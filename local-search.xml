<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>6月闲谈：华子你带我走吧</title>
    <link href="/2024/06/22/6%E6%9C%88%E9%97%B2%E8%B0%88%EF%BC%9A%E5%8D%8E%E5%AD%90%E4%BD%A0%E5%B8%A6%E6%88%91%E8%B5%B0%E5%90%A7/"/>
    <url>/2024/06/22/6%E6%9C%88%E9%97%B2%E8%B0%88%EF%BC%9A%E5%8D%8E%E5%AD%90%E4%BD%A0%E5%B8%A6%E6%88%91%E8%B5%B0%E5%90%A7/</url>
    
    <content type="html"><![CDATA[<p>突然发现距离上次更新个人博客已经一个月了，惊觉 howTimeFlies（此处也要小驼峰）！<br>　　网站是寒假时一时兴起创立的，当时花了很久的时间装饰他，一到开学便抛在一边了，如果不是有点舍不得自己在现在这个主题花费了很多时间，很想换个主题换一下口味 hh。之后还是再挑一个主题换一下口味好了。<br>　　然后这学期也做了一些项目，无非就是画板，freertos，上位机全套，还是夹带了不少私货的，把导师的项目当作试验田，尽可能地尝试了很多没用过的技术，正好趁机学习。做项目之余私下里在学习 linux 系统编程，一直学习到了五月初，便停止了学习，这一停就停到了现在，很难捡起来，学习还是要一鼓作气。<br>　　被家长 push 着，也尝试着疯狂找实习，很多厂都不要 26 届的，最后在华子 2012 找到了日常实习，已入池，就等着开奖了，还是很期待的，无论什么东西，还是要亲眼看看，才知道好不好，我想亲身去体验一下。<br>　　一直每天忙碌的，对着电脑一天又一天的，来到了 6.21，这个美妙的日子，考试都结束了，面试通过了，项目交付了，一下子轻松下来了，有点空虚，暂时也没有找到新的想学习的东西。<br>　　<img src="https://s2.loli.net/2024/06/22/cYy5bWSKNu6UJnD.png"/><br>　　 Github 的热力图就是这段日子最好的记录吧。<br>　　最近打开的最多的 app 就是牛客了，每天看牛友 offer 拿到手软，心里也痒痒的，期待着自己开奖的日子到来。我感觉我还是非常喜欢做技术的，而现在又能很轻易地满足自己的好奇心，有时候睡前突然想了解一个东西，就和 gpt 聊天就好了。<br>　　说起来 gpt，我用 Github Copilot 搭的 gpt 镜像站无了，最终还是被封了，不过问题不大，国产也有一些够用的。<br>　　最近这些天就还是继续做项目吧，减轻一点之后实习的压力，什么都想要果然还是太贪心了。但是非常感谢导师这边能让我接触一些比较好的项目，这次华子的主管面才能聊的非常愉快，研究生以来的努力都有了回报。</p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>阅读nginx源码环境搭建——基于vscode+clangd+bear</title>
    <link href="/2024/05/19/%E9%98%85%E8%AF%BBnginx%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8Evscode+clangd+bear/"/>
    <url>/2024/05/19/%E9%98%85%E8%AF%BBnginx%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8Evscode+clangd+bear/</url>
    
    <content type="html"><![CDATA[<p>最近想看一下优秀的 C 语言开源项目，其中<strong>nginx</strong>很多人推荐，所以从它开始，进行源码阅读，记录一下本地环境搭建过程。</p><h2 id="1-vscode所需插件"><a href="#1-vscode所需插件" class="headerlink" title="1. vscode所需插件"></a>1. <strong>vscode</strong>所需插件</h2><ol><li>clangd：代码补全、跳转、语法检查等功能。</li><li>Bookmarks：代码书签，方便对关键代码进行标记。</li></ol><h2 id="2-下载nginx源码"><a href="#2-下载nginx源码" class="headerlink" title="2. 下载nginx源码"></a>2. 下载<strong>nginx</strong>源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/nginx/nginx.git<br><br>$ tree -L 2<br>.<br>├── auto<br>│   ├── cc<br>│   ├── configure<br>│   ├── define<br>│   ├── endianness<br>│   ├── feature<br>│   ├── have<br>│   ├── have_headers<br>│   ├── headers<br>│   ├── include<br>│   ├── init<br>│   ├── install<br>│   ├── lib<br>│   ├── make<br>│   ├── module<br>│   ├── modules<br>│   ├── nohave<br>│   ├── options<br>│   ├── os<br>│   ├── sources<br>│   ├── stubs<br>│   ├── summary<br>│   ├── threads<br>│   ├── types<br>│   └── unix<br>├── conf<br>│   ├── fastcgi.conf<br>│   ├── fastcgi_params<br>│   ├── koi-utf<br>│   ├── koi-win<br>│   ├── mime.types<br>│   ├── nginx.conf<br>│   ├── scgi_params<br>│   ├── uwsgi_params<br>│   └── win-utf<br>├── contrib<br>│   ├── geo2nginx.pl<br>│   ├── README<br>│   ├── unicode2nginx<br>│   └── vim<br>├── docs<br>│   ├── dtd<br>│   ├── GNUmakefile<br>│   ├── html<br>│   ├── man<br>│   ├── text<br>│   ├── xml<br>│   ├── xsls<br>│   └── xslt<br>├── Makefile<br>├── misc<br>│   ├── GNUmakefile<br>│   └── README<br>└── src<br>    ├── core<br>    ├── event<br>    ├── http<br>    ├── mail<br>    ├── misc<br>    ├── os<br>    └── stream<br></code></pre></td></tr></table></figure><p>下载下来的文件结构是这个样子的。<br>我们主要关心：</p><ul><li><code>src</code>：源码目录，可以看到包含核心模块、事件模块、HTTP 模块、邮件模块、OS 模块、流模块等</li><li><code>auto/configure</code>：源码编译脚本</li></ul><h2 id="3-编译nginx源码"><a href="#3-编译nginx源码" class="headerlink" title="3. 编译nginx源码"></a>3. 编译<strong>nginx</strong>源码</h2><p>调用编译脚本，编译后生成<strong>makefile</strong>和<strong>compile_commands.json</strong>，<code>clangd</code>可以读取这个 json 文件进行代码补全、跳转等功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 编译源码，如果不加运行参数，则只编译内核模块</span><br><span class="hljs-comment"># 本着学习的原则，这里我编译所有模块</span><br><span class="hljs-comment"># 这也意味着会有更多的依赖库</span><br><span class="hljs-comment"># 缺什么依赖库，执行此脚本会报错提醒</span><br>./auto/configure \<br>    --with-http_ssl_module \<br>    --with-http_realip_module \<br>    --with-http_addition_module \<br>    --with-http_sub_module \<br>    --with-http_dav_module \<br>    --with-http_flv_module \<br>    --with-http_mp4_module \<br>    --with-http_gunzip_module \<br>    --with-http_gzip_static_module \<br>    --with-http_random_index_module \<br>    --with-http_secure_link_module \<br>    --with-http_stub_status_module \<br>    --with-http_auth_request_module \<br>    --with-http_xslt_module=dynamic \<br>    --with-http_image_filter_module=dynamic \<br>    --with-http_geoip_module=dynamic \<br>    --with-http_perl_module=dynamic \<br>    --with-threads \<br>    --with-stream \<br>    --with-stream_ssl_module \<br>    --with-stream_ssl_preread_module \<br>    --with-stream_realip_module \<br>    --with-stream_geoip_module=dynamic \<br>    --with-mail \<br>    --with-mail_ssl_module \<br>    --with-file-aio \<br>    --with-http_v2_module \<br>    --with-ipv6<br><br><span class="hljs-comment"># 生成编译数据库</span><br>bear -- make<br></code></pre></td></tr></table></figure><h2 id="4-vscode配置"><a href="#4-vscode配置" class="headerlink" title="4. vscode配置"></a>4. <strong>vscode</strong>配置</h2><p>在源码目录下建立<code>.vscode</code>文件夹：</p><ol><li><p>打开<code>settings.json</code>，添加以下内容，告知<code>clangd</code>编译数据库的位置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;clangd.arguments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;--compile-commands-dir=$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>打开<code>c_cpp_properties.json</code>，添加以下内容，指定编译器路径，头文件路径等：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Linux&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;includePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defines&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;compilerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/gcc&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;cStandard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c17&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;cppStandard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c++14&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;intelliSenseMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;linux-gcc-x64&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="5-成品展示"><a href="#5-成品展示" class="headerlink" title="5. 成品展示"></a>5. 成品展示</h2><p>还有一点模块的库没有装完，有少数报错，目前已经够了，先开始学习吧。</p><p><img src="https://s2.loli.net/2024/05/19/9Jt6OACX4vzLpBd.png" alt="nginx.png"></p>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>vscode</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下C语言教程-李慧芹老师-第十五章</title>
    <link href="/2024/05/16/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0/"/>
    <url>/2024/05/16/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sinlatansen/Linux-C-Notes">配套代码笔记仓库</a>。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86">进程基本知识</a><ul><li><a href="#%E8%BF%9B%E7%A8%8B%E6%A0%87%E8%AF%86%E7%AC%A6pid">进程标识符<code>pid</code></a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%BA%A7%E7%94%9F">进程的产生</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%B6%88%E4%BA%A1%E5%8F%8A%E9%87%8A%E6%94%BE%E8%B5%84%E6%BA%90">进程的消亡及释放资源</a></li><li><a href="#exec%E5%87%BD%E6%95%B0%E6%97%8F"><code>exec</code>函数族</a></li><li><a href="#%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E5%8F%8A%E7%BB%84%E6%9D%83%E9%99%90">用户权限及组权限</a></li><li><a href="#%E8%A7%82%E6%91%A9%E8%AF%BE%E8%A7%A3%E9%87%8A%E5%99%A8%E6%96%87%E4%BB%B6">观摩课：解释器文件</a></li><li><a href="#system%E5%87%BD%E6%95%B0"><code>system()</code>函数</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E4%BC%9A%E8%AE%A1">进程会计</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E6%97%B6%E9%97%B4">进程时间</a></li><li><a href="#%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B">守护进程</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97">系统日志</a></li></ul></li></ul><h1 id="进程基本知识"><a href="#进程基本知识" class="headerlink" title="进程基本知识"></a>进程基本知识</h1><p>已经进入<strong>多进程</strong>阶段</p><h2 id="进程标识符pid"><a href="#进程标识符pid" class="headerlink" title="进程标识符pid"></a>进程标识符<code>pid</code></h2><p>类型<code>pid_t</code>，传统意义上是一个16位有符号整型数。</p><p>命令<code>ps</code></p><p>常用命令：<code>ps axf</code>，<code>ps aux</code>，<code>ps axm</code>，<code>ps ax -L</code></p><p>进程号是顺次向下使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 返回当前进程号</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getpid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-comment">// 返回父进程的进程号</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getppid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><h2 id="进程的产生"><a href="#进程的产生" class="headerlink" title="进程的产生"></a>进程的产生</h2><p><code>pid_t fork();</code></p><ul><li>以<strong>复制（duplicating）</strong>当前进程的方式创建一个新进程</li><li>和<code>setjmp</code>一样，执行一次，返回两次</li><li>在<code>fork</code>处复制，不会从头运行</li></ul><p><code>fork</code>后父子进程的不同之处：</p><ol><li><code>fork</code>的返回值不一样</li><li><code>pid</code>不同</li><li><code>ppid</code>也不同</li><li>未决信号和文件锁不继承</li><li>资源利用量清0</li></ol><p><code>init</code>进程：<strong>1号</strong>，是所有进程的祖先进程</p><p>调度器的调度策略来决定哪个进程先执行</p><p><code>fflush()</code>的重要性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  vfork创建的子进程只能做exec或者exit</span><br><span class="hljs-comment"> *  ! 基本废弃</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">vfork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><h2 id="进程的消亡及释放资源"><a href="#进程的消亡及释放资源" class="headerlink" title="进程的消亡及释放资源"></a>进程的消亡及释放资源</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 等待进程状态发生变化</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">wait</span><span class="hljs-params">(<span class="hljs-type">int</span> *status)</span>; <span class="hljs-comment">// 阻塞</span><br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">waitpid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">int</span> *status, <span class="hljs-type">int</span> options)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">waitid</span><span class="hljs-params">(<span class="hljs-type">idtype_t</span> idtype, <span class="hljs-type">id_t</span> id, <span class="hljs-type">siginfo_t</span> *infop, <span class="hljs-type">int</span> options)</span>;<br><br><br>wait3();<br>wait4();<br></code></pre></td></tr></table></figure><p>分配法和交叉分配法，90%优先选择交叉分配法。</p><p>池类算法：<br>上游往池子里放任务，下游三个线程从池子里取任务。</p><h2 id="exec函数族"><a href="#exec函数族" class="headerlink" title="exec函数族"></a><code>exec</code>函数族</h2><p>eg. <code>bash</code>进程创建<code>primer</code>进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// exec函数族：替换当前进程的映像</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> **environ;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">execl</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *arg, ...)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">execlp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *arg, ...)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">execle</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *arg, ..., <span class="hljs-type">char</span> * <span class="hljs-type">const</span> envp[])</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">execv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[])</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">execvp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[])</span>;<br><br></code></pre></td></tr></table></figure><h2 id="用户权限及组权限"><a href="#用户权限及组权限" class="headerlink" title="用户权限及组权限"></a>用户权限及组权限</h2><p><code>u+s</code>：如果文件是可执行的，则执行文件时，是以文件的拥有者的权限执行的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-rwsr-xr-x 1 root root 68248 Mar 23  2023 /usr/bin/passwd<br></code></pre></td></tr></table></figure><p>所以普通用户执行<code>passwd</code>时，是以<code>root</code>的权限执行的。</p><p><code>g+s</code>：如果文件是可执行的，则执行文件时，是以文件的所在组的权限执行的。</p><p><code>uid</code>和<code>gid</code>都有三种类型：</p><ol><li><code>real uid</code>：进程的实际所有者</li><li><code>effective uid</code>：进程的有效所有者</li><li><code>saved uid</code>：进程的保存的有效所有者</li></ol><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">shell获取身份的流程</span><br>      <span class="hljs-comment">fork         exec         fork</span><br><span class="hljs-comment">init</span> <span class="hljs-literal">--</span>&gt;<span class="hljs-literal">--</span>&gt; <span class="hljs-comment">getty</span> <span class="hljs-literal">--</span>&gt;<span class="hljs-literal">--</span>&gt; <span class="hljs-comment">login</span> <span class="hljs-literal">--</span>&gt;<span class="hljs-literal">--</span>&gt; <span class="hljs-comment">shell</span><br>      <span class="hljs-comment">exec                      exec</span><br><span class="hljs-comment">root        root         root         user</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 获取当前用户的real uid</span><br><span class="hljs-type">uid_t</span> <span class="hljs-title function_">getuid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-comment">// 获取当前用户的effective uid</span><br><span class="hljs-type">uid_t</span> <span class="hljs-title function_">geteuid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-comment">// 获取当前进程的real gid</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getegid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-comment">// 获取当前进程的effective gid</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getgid</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-comment">// 设置当前进程的real uid</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setuid</span><span class="hljs-params">(<span class="hljs-type">uid_t</span> uid)</span>;<br><br><span class="hljs-comment">// 设置当前进程的effective uid</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">seteuid</span><span class="hljs-params">(<span class="hljs-type">uid_t</span> uid)</span>;<br><br><span class="hljs-comment">// 设置当前进程的real gid</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setgid</span><span class="hljs-params">(<span class="hljs-type">gid_t</span> gid)</span>;<br><br><span class="hljs-comment">// 设置当前进程的effective gid  </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setegid</span><span class="hljs-params">(<span class="hljs-type">gid_t</span> gid)</span>;<br><br><span class="hljs-comment">// 交换uid和gid （原子操作）</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setreuid</span><span class="hljs-params">(<span class="hljs-type">uid_t</span> ruid, <span class="hljs-type">uid_t</span> euid)</span>;<br><br><span class="hljs-comment">// 交换gid和egid （原子操作）</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setregid</span><span class="hljs-params">(<span class="hljs-type">gid_t</span> rgid, <span class="hljs-type">gid_t</span> egid)</span>;<br><br></code></pre></td></tr></table></figure><h2 id="观摩课：解释器文件"><a href="#观摩课：解释器文件" class="headerlink" title="观摩课：解释器文件"></a>观摩课：解释器文件</h2><blockquote><p>unix讲究机制而非策略</p></blockquote><p>脚本，后缀名是什么都可以，一般用<code>sh</code>, <code>exec</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/cat</span><br><br><span class="hljs-comment"># some shell</span><br></code></pre></td></tr></table></figure><p><code>#!</code>是一种约定俗成的标记，告诉系统这个脚本应该用什么解释器来执行。</p><h2 id="system-函数"><a href="#system-函数" class="headerlink" title="system()函数"></a><code>system()</code>函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  运行一个shell命令</span><br><span class="hljs-comment"> *  调用/bin/sh</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">system</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *command)</span>;<br></code></pre></td></tr></table></figure><p>相当于<code>fork+exec+wait</code>的封装</p><h2 id="进程会计"><a href="#进程会计" class="headerlink" title="进程会计"></a>进程会计</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//! freeBSD系统的方言</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">acct</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename)</span>;<br></code></pre></td></tr></table></figure><h2 id="进程时间"><a href="#进程时间" class="headerlink" title="进程时间"></a>进程时间</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">clock_t</span> <span class="hljs-title function_">times</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> tms *buf)</span>;<br><br><span class="hljs-comment">// clock_t 滴答数</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tms</span>&#123;</span><br>    <span class="hljs-type">clock_t</span> tms_utime;  <span class="hljs-comment">/* user time */</span><br>    <span class="hljs-type">clock_t</span> tms_stime;  <span class="hljs-comment">/* system time */</span><br>    <span class="hljs-type">clock_t</span> tms_cutime; <span class="hljs-comment">/* user time of children */</span><br>    <span class="hljs-type">clock_t</span> tms_cstime; <span class="hljs-comment">/* system time of children */</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><ol><li>守护进程<code>PPID</code>为1</li><li>守护进程没有控制终端，<code>TTY</code>为?</li><li><code>PID, PGID, SID</code>相同</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">pid_t</span> <span class="hljs-title function_">setpgid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">pid_t</span> pgid)</span>;<br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getpgid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid)</span>;<br><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getpgrp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//! 方言</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">getpgrp</span><span class="hljs-params">(<span class="hljs-type">psid_t</span> pid)</span>; <span class="hljs-comment">//! 方言</span><br></code></pre></td></tr></table></figure><ul><li><p>会话（session）：一个或多个进程组的集合，以<code>sid</code>为标识<br><code>pid_t setsid(void);</code><br><code>setsid</code>必须由非<code>leader</code>进程调用，从而创建一个新的会话。</p><ul><li>前台进程组：正在与终端交互的进程组</li><li>后台进程组：正在运行，但不与终端交互的进程组</li></ul></li><li><p>终端：<br>我们接触的都是虚拟终端</p></li></ul><p><strong>单实例守护进程</strong>：锁文件<code>/var/run/name.pid</code></p><p>启动脚本文件：<code>/etc/rc*...</code></p><h2 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h2><p><code>syslogd</code>服务</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;syslog.h&gt;</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  打开系统日志</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @prarm: ident  标识符</span><br><span class="hljs-comment"> * @prarm: option 选项   LOG_CONS, LOG_NDELAY, LOG_NOWAIT, LOG_PERROR ...</span><br><span class="hljs-comment"> * @prarm: facility  来源  LOG_USER, LOG_DAEMON, LOG_KERN, LOG_LOCAL0~7 ...</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">openlog</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *ident, <span class="hljs-type">int</span> option, <span class="hljs-type">int</span> facility)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  记录系统日志</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @prarm: priority  优先级 以 ERR 与 WARNING 为分界点</span><br><span class="hljs-comment"> * @prarm: format 格式化字符串</span><br><span class="hljs-comment"> * @prarm: ... 格式化参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">syslog</span><span class="hljs-params">(<span class="hljs-type">int</span> priority, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  关闭系统日志</span><br><span class="hljs-comment"> */</span> <br><span class="hljs-type">void</span> <span class="hljs-title function_">closelog</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tail</span> /var/log/messages  <span class="hljs-comment"># 老师</span><br>journalctl -r  <span class="hljs-comment"># 我的debian</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>李慧芹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下C语言教程-李慧芹老师-第十四章</title>
    <link href="/2024/05/16/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0/"/>
    <url>/2024/05/16/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sinlatansen/Linux-C-Notes">配套代码笔记仓库</a>。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">文件系统</a><ul><li><a href="#%E7%9B%AE%E5%BD%95%E5%92%8C%E6%96%87%E4%BB%B6">目录和文件</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E5%92%8C%E4%BF%A1%E6%81%AF">系统数据文件和信息</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E7%8E%AF%E5%A2%83">进程环境</a><ul><li><a href="#main%E5%87%BD%E6%95%B0"><code>main</code>函数</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%BB%88%E6%AD%A2">进程的终止</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E7%9A%84%E5%88%86%E6%9E%90">命令行参数的分析</a></li><li><a href="#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">环境变量</a></li><li><a href="#c%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E5%B8%83%E5%B1%80">C程序的存储空间布局</a></li><li><a href="#%E5%BA%93">库</a></li><li><a href="#%E5%87%BD%E6%95%B0%E4%B9%8B%E9%97%B4%E6%AD%A3%E5%B8%B8%E7%9A%84%E8%B7%B3%E8%BD%AC">函数之间正常的跳转</a></li><li><a href="#%E8%B5%84%E6%BA%90%E7%9A%84%E8%8E%B7%E5%8F%96%E5%8F%8A%E6%8E%A7%E5%88%B6">资源的获取及控制</a></li></ul></li></ul></li></ul><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><p>类<code>ls</code>的实现，如<code>myls -l -a -i -n</code></p><p><code>cmd --长格式  -短格式  非选项的传参</code></p><h2 id="目录和文件"><a href="#目录和文件" class="headerlink" title="目录和文件"></a>目录和文件</h2><ol><li>获取文件属性</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  将文件的属性存储到buf中</span><br><span class="hljs-comment"> *  stat : 通过文件路径获取属性，面对符号链接文件时，</span><br><span class="hljs-comment"> *         获取的是指向的目标文件的属性</span><br><span class="hljs-comment"> *  fstat: 通过文件描述符获取属性</span><br><span class="hljs-comment"> *  lstat: 通过文件路径获取属性，面对符号链接文件时，</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">stat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-keyword">struct</span> stat *buf)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fstat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-keyword">struct</span> stat *buf)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">lstat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-keyword">struct</span> stat *buf)</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> &#123;</span><br>    <span class="hljs-type">dev_t</span>     st_dev;         <span class="hljs-comment">/* ID of device containing file */</span><br>    <span class="hljs-type">ino_t</span>     st_ino;         <span class="hljs-comment">/* inode number */</span><br>    <span class="hljs-comment">// 文件唯一标识，身份证号</span><br><br>    <span class="hljs-type">mode_t</span>    st_mode;        <span class="hljs-comment">/* protection */</span><br>    <span class="hljs-comment">// st_mode: 文件权限+文件类型</span><br>    <span class="hljs-comment">// 文件权限</span><br>    <span class="hljs-comment">// 七种文件类型：dcb-lsp</span><br><br>    <span class="hljs-type">nlink_t</span>   st_nlink;       <span class="hljs-comment">/* number of hard links */</span><br>    <span class="hljs-type">uid_t</span>     st_uid;         <span class="hljs-comment">/* user ID of owner */</span><br>    <span class="hljs-type">gid_t</span>     st_gid;         <span class="hljs-comment">/* group ID of owner */</span><br>    <span class="hljs-type">dev_t</span>     st_rdev;        <span class="hljs-comment">/* device ID (if special file) */</span><br>    <span class="hljs-type">off_t</span>     st_size;        <span class="hljs-comment">/* total size, in bytes */</span><br>    <span class="hljs-comment">// 在linux下，与windows不同，size值仅仅是属性</span><br>    <span class="hljs-comment">// 不能实际体现占用磁盘大小，详见 big.c</span><br><br>    <span class="hljs-type">blksize_t</span> st_blksize;    <span class="hljs-comment">/* blocksize for file system I/O */</span><br>    <span class="hljs-type">blkcnt_t</span>  st_blocks;     <span class="hljs-comment">/* number of 512B blocks allocated */</span><br>    <span class="hljs-type">time_t</span>    st_atime;       <span class="hljs-comment">/* time of last access */</span><br>    <span class="hljs-type">time_t</span>    st_mtime;       <span class="hljs-comment">/* time of last modification */</span><br>    <span class="hljs-type">time_t</span>    st_ctime;       <span class="hljs-comment">/* time of last status change */</span><br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>文件访问权限<br><code>st_mode</code>是一个16位的二进制数，文件类型，文件权限，特殊权限。</p></li><li><p><code>umask</code><br>作用：防止产生权限过松的文件。<br><code>0666 &amp;~umask</code><br><code>umask</code>也是一个终端命令，可以查看和设置。<br><code>mode_t umask(mode_t mask);</code></p></li><li><p>文件权限的更改&#x2F;管理</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更改文件权限</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">chmod</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">mode_t</span> mode)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fchmod</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">mode_t</span> mode)</span>;<br></code></pre></td></tr></table></figure><ol start="5"><li><p>粘住位<br>t位，例如<code>/tmp</code>目录。</p></li><li><p>文件系统：<code>FAT</code>, <code>UFS</code><br>文件或数据的存储格式。</p><ol><li><p><code>FAT</code>：静态存储的单链表</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node_st</span>&#123;</span><br>  <span class="hljs-type">int</span>  next[N];<br><span class="hljs-type">char</span> data[N][SIZE];<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><code>UFS</code>：<br>缺点：不善于处理大量的小文件，因为每个文件都有一个<code>inode</code>，占用空间。</p></li></ol></li></ol><blockquote><p>面试题：<br>不用比较，比较两个uint32_t的大小<br>使用位图</p></blockquote><ol start="7"><li><p>硬链接，符号链接</p><ul><li><p>硬链接<br><code>ln bigfile bigfile_link</code><br>与目录项是同义词<br>相当于目录项又弄了一份，使用<code>ls -i</code>可以看到<code>inode</code>号相同。</p><p>限制：不能给分区建立，不能给目录建立</p></li><li><p>符号链接<br><code>ln -s bigfile_link bigfile_s</code></p><p>优点：可以跨分区，可以给目录建立</p></li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">link</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *oldpath, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *newpath)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  只有没有引用的数据才会真正删除</span><br><span class="hljs-comment"> *  可以利用这一点创建匿名文件</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">unlink</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  改变文件的路径或者名字</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">rename</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *oldpath, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *newpath)</span>;<br></code></pre></td></tr></table></figure><ol start="8"><li><code>utime</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  更改文件最后读/写的时间</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">utime</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> utimbuf *times)</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">utimbuf</span> &#123;</span><br>    <span class="hljs-type">time_t</span> actime;       <span class="hljs-comment">/* access time */</span><br>    <span class="hljs-type">time_t</span> modtime;      <span class="hljs-comment">/* modification time */</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time_t</span> &#123;</span><br>    <span class="hljs-type">long</span> tv_sec;         <span class="hljs-comment">/* seconds */</span><br>    <span class="hljs-type">long</span> tv_usec;        <span class="hljs-comment">/* microseconds */</span><br>&#125;;<br></code></pre></td></tr></table></figure><ol start="9"><li>目录的创建和销毁<br><code>mkdir, rmdir</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">mkdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">mode_t</span> mode)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  只有目录为空才能删除</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">rmdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname)</span>;<br></code></pre></td></tr></table></figure><ol start="10"><li>更改当前工作路径<br><code>cd, pwd</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  改变当前工作路径</span><br><span class="hljs-comment"> *  可以突破假根目录</span><br><span class="hljs-comment"> *  但是不能突破chroot</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">chdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fchdir</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  获取当前工作路径</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">getcwd</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> size)</span>;<br></code></pre></td></tr></table></figure><ol start="11"><li>分析目录&#x2F;读取目录内容</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  法一</span><br><span class="hljs-comment"> *  解析模式/通配符</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @prarm: pattern 匹配模式</span><br><span class="hljs-comment"> * @prarm: flags   匹配标志</span><br><span class="hljs-comment"> * @prarm: errfunc 错误回调函数</span><br><span class="hljs-comment"> * @prarm: pglob   匹配结果</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @return  匹配的文件数量</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">glob</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> pattern, <span class="hljs-type">int</span> flags,</span><br><span class="hljs-params">                <span class="hljs-type">int</span> (*errfunc)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *epath, <span class="hljs-type">int</span> eerrno),</span><br><span class="hljs-params">                <span class="hljs-type">glob_t</span> *<span class="hljs-keyword">restrict</span> pglob)</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  释放glob_t结构体</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">globfree</span><span class="hljs-params">(<span class="hljs-type">glob_t</span> *pglob)</span>;               <br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 与argc, argv类似</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">size_t</span>   gl_pathc;    <span class="hljs-comment">/* Count of paths matched so far */</span><br>    <span class="hljs-type">char</span>   **gl_pathv;    <span class="hljs-comment">/* List of matched pathnames */</span><br>    <span class="hljs-type">size_t</span>   gl_offs;     <span class="hljs-comment">/* Slots to reserve in gl_pathv */</span><br>&#125; <span class="hljs-type">glob_t</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  法二</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  打开一个目录</span><br><span class="hljs-comment"> *  返回一个指向DIR结构体的指针</span><br><span class="hljs-comment"> *  是堆区，需要 closedir 释放</span><br><span class="hljs-comment">*/</span><br>DIR *<span class="hljs-title function_">opendir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br>DIR *<span class="hljs-title function_">fdopendir</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  关闭一个目录</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">closedir</span><span class="hljs-params">(DIR *dirp)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  读取一个目录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> *  返回指针指向静态区</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">struct</span> dirent *<span class="hljs-title function_">readdir</span><span class="hljs-params">(DIR *dirp)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">readdir_r</span><span class="hljs-params">(DIR *<span class="hljs-keyword">restrict</span> dirp,</span><br><span class="hljs-params">              <span class="hljs-keyword">struct</span> dirent *<span class="hljs-keyword">restrict</span> entry,</span><br><span class="hljs-params">              <span class="hljs-keyword">struct</span> dirent **<span class="hljs-keyword">restrict</span> result)</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> &#123;</span><br>    <span class="hljs-type">ino_t</span>          d_ino;       <span class="hljs-comment">/* inode number */</span><br>    <span class="hljs-type">off_t</span>          d_off;       <span class="hljs-comment">/* offset to the next dirent */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> d_reclen;    <span class="hljs-comment">/* length of this record */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>  d_type;      <span class="hljs-comment">/* type of file; not supported</span><br><span class="hljs-comment">                                   by all file system types */</span><br>    <span class="hljs-type">char</span>           d_name[<span class="hljs-number">256</span>]; <span class="hljs-comment">/* filename */</span><br>&#125;;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  重置一个目录</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">rewinddir</span><span class="hljs-params">(DIR *dirp)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">seekdir</span><span class="hljs-params">(DIR *dirp, <span class="hljs-type">long</span> offset)</span>;<br><br><span class="hljs-type">long</span> <span class="hljs-title function_">telldir</span><span class="hljs-params">(DIR *dirp)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  du 命令</span><br><span class="hljs-comment"> *  以字节为单位，统计目录下所有文件的大小</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment">*/</span><br><br><br></code></pre></td></tr></table></figure><p>作业：用另一套函数实现<code>mydu</code></p><h2 id="系统数据文件和信息"><a href="#系统数据文件和信息" class="headerlink" title="系统数据文件和信息"></a>系统数据文件和信息</h2><blockquote><p>不同环境可能有区别，以具体查询为准，这里以Linux为例</p></blockquote><ol><li><code>/etc/passwd</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  通过用户名获取用户信息</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">struct</span> passwd *<span class="hljs-title function_">getpwuid</span><span class="hljs-params">(<span class="hljs-type">uid_t</span> uid)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  通过用户ID获取用户信息</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">struct</span> passwd *<span class="hljs-title function_">getpwnam</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">passwd</span> &#123;</span><br>    <span class="hljs-type">char</span>   *pw_name;       <span class="hljs-comment">/* username */</span><br>    <span class="hljs-type">char</span>   *pw_passwd;     <span class="hljs-comment">/* user password */</span><br>    <span class="hljs-type">uid_t</span>   pw_uid;        <span class="hljs-comment">/* user ID */</span><br>    <span class="hljs-type">gid_t</span>   pw_gid;        <span class="hljs-comment">/* group ID */</span><br>    <span class="hljs-type">char</span>   *pw_gecos;      <span class="hljs-comment">/* user information */</span><br>    <span class="hljs-type">char</span>   *pw_dir;        <span class="hljs-comment">/* home directory */</span><br>    <span class="hljs-type">char</span>   *pw_shell;      <span class="hljs-comment">/* shell program */</span><br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li><code>/etc/group</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  通过组ID获取组信息</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">struct</span> group *<span class="hljs-title function_">getgrgid</span><span class="hljs-params">(<span class="hljs-type">gid_t</span> gid)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  通过组名获取组信息</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">struct</span> group *<span class="hljs-title function_">getgrnam</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">group</span> &#123;</span><br>    <span class="hljs-type">char</span>   *gr_name;       <span class="hljs-comment">/* group name */</span><br>    <span class="hljs-type">char</span>   *gr_passwd;     <span class="hljs-comment">/* group password */</span><br>    <span class="hljs-type">gid_t</span>   gr_gid;        <span class="hljs-comment">/* group ID */</span><br>    <span class="hljs-type">char</span>  **gr_mem;        <span class="hljs-comment">/* group members */</span><br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li><code>/etc/shadow</code><br><code>ll</code>显示<strong>root</strong>用户也不可读写，但是只有<strong>root</strong>用户才可读写<br>这样是提醒你，即便是<strong>root</strong>用户，也不要随便读写这个文件</li></ol><blockquote><p>密码</p><p>hash - 混淆，不可逆</p><p>如果原串一样，hash值也一样</p><p>防备管理员监守自盗</p><p>加密 - 解密</p><p>加密为了安全，攻击成本大于收益</p><p>安全？穷举：口令随机校验（第一遍明明对了给你报错，让你连续两遍成功输入正确）</p><p>推荐书籍：《应用密码学》</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 获得用户的密码信息</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">struct</span> *spwd <span class="hljs-title function_">getspnam</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 加密密码</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @prarm: key  密码</span><br><span class="hljs-comment"> * @prarm: salt 盐 杂字串</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 默认 md5 加密方式</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">crypt</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *key, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *salt)</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">spwd</span> &#123;</span><br>    <span class="hljs-type">char</span> *sp_namp;      <span class="hljs-comment">/* login name */</span><br>    <span class="hljs-type">char</span> *sp_pwdp;      <span class="hljs-comment">/* encrypted password */</span><br>    <span class="hljs-type">long</span>  sp_lstchg;    <span class="hljs-comment">/* last change */</span><br>    <span class="hljs-type">long</span>  sp_min;       <span class="hljs-comment">/* min days between changes */</span><br>    <span class="hljs-type">long</span>  sp_max;       <span class="hljs-comment">/* max days between changes */</span><br>    <span class="hljs-type">long</span>  sp_warn;      <span class="hljs-comment">/* warning days before password</span><br><span class="hljs-comment">                           expires */</span><br>    <span class="hljs-type">long</span>  sp_inact;     <span class="hljs-comment">/* days before account inactive */</span><br>    <span class="hljs-type">long</span>  sp_expire;    <span class="hljs-comment">/* days since 1970-01-01 until account</span><br><span class="hljs-comment">                           expires */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sp_flag; <span class="hljs-comment">/* reserved */</span><br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输入提示符</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">getpass</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *prompt)</span>;<br></code></pre></td></tr></table></figure><ol start="4"><li>时间戳<br>机器喜欢大整数 <code>time_t</code><br>人类喜欢字符串 <code>char *</code><br>程序员喜欢结构体 <code>struct tm</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  从内核获取以秒为单位的一个时戳</span><br><span class="hljs-comment"> *  从 UTC 1970年1月1日0时0分0秒 到现在的秒数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">time_t</span> <span class="hljs-title function_">time</span><span class="hljs-params">(<span class="hljs-type">time_t</span> *t)</span>;<br><br><span class="hljs-comment">// eg: 两种用法</span><br><span class="hljs-type">time_t</span> stamp;<br>time(&amp;stamp);<br>stamp=time(<span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  将时间戳转换为结构体</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">struct</span> tm *<span class="hljs-title function_">gmtime</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">time_t</span> *timep)</span>;<br><span class="hljs-keyword">struct</span> tm *<span class="hljs-title function_">localtime</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">time_t</span> *timep)</span>;<br><br>sturct tm &#123;<br>    <span class="hljs-type">int</span> tm_sec;    <span class="hljs-comment">/* seconds */</span><br>    <span class="hljs-type">int</span> tm_min;    <span class="hljs-comment">/* minutes */</span><br>    <span class="hljs-type">int</span> tm_hour;   <span class="hljs-comment">/* hours */</span><br>    <span class="hljs-type">int</span> tm_mday;   <span class="hljs-comment">/* day of the month */</span><br>    <span class="hljs-type">int</span> tm_mon;    <span class="hljs-comment">/* month */</span><br>    <span class="hljs-type">int</span> tm_year;   <span class="hljs-comment">/* year */</span><br>    <span class="hljs-type">int</span> tm_wday;   <span class="hljs-comment">/* day of the week */</span><br>    <span class="hljs-type">int</span> tm_yday;   <span class="hljs-comment">/* day in the year */</span><br>    <span class="hljs-type">int</span> tm_isdst;  <span class="hljs-comment">/* daylight saving time */</span><br>                   <span class="hljs-comment">/* daylight 夏令时调整 */</span><br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  将结构体转换为时间戳</span><br><span class="hljs-comment"> *  ! 没有 const，可能更改 tm</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">time_t</span> <span class="hljs-title function_">mktime</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> tm *tm)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 格式化输出时间</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">strftime</span><span class="hljs-params">(<span class="hljs-type">char</span> *s, <span class="hljs-type">size_t</span> max, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format,</span><br><span class="hljs-params">                <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> tm *tm)</span>;<br><br><span class="hljs-comment">// eg</span><br>strftime(buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, tm);<br></code></pre></td></tr></table></figure><h2 id="进程环境"><a href="#进程环境" class="headerlink" title="进程环境"></a>进程环境</h2><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a><code>main</code>函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span>;<br></code></pre></td></tr></table></figure><h3 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h3><ol><li><p>正常终止:</p><ul><li><p>从<code>main</code>函数返回</p></li><li><p>调用<code>exit</code><br><code>void exit(int status);</code><br>status &amp; 0377 有符号的char -128~127</p></li><li><p>调用<code>_exit</code>或者<code>_Exit</code>（系统调用）</p></li></ul><blockquote><p><code>exit</code>与<code>_exit _Exit</code>的区别<br><code>_exit</code>不执行<code>atexit</code>注册的函数，不刷新<code>stdio</code>缓冲区<br>这样可以防止错误扩散</p></blockquote><ul><li>最后一个线程从其启动例程返回</li><li>最后一个线程调用了<code>pthread_exit</code></li></ul></li><li><p>异常终止</p><ul><li>调用<code>abort</code></li><li>接到一个信号并终止</li><li>最后一个线程对其取消请求作出响应</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  注册一个函数，当进程终止时调用</span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> *  钩子函数：逆序执行</span><br><span class="hljs-comment"> *  可以进行资源释放</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">atexit</span><span class="hljs-params">(<span class="hljs-type">void</span> (*function)(<span class="hljs-type">void</span>))</span>;<span class="hljs-comment">// 钩子函数</span><br></code></pre></td></tr></table></figure><h3 id="命令行参数的分析"><a href="#命令行参数的分析" class="headerlink" title="命令行参数的分析"></a>命令行参数的分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *optarg; <span class="hljs-comment">// 选项参数</span><br><span class="hljs-comment">// optind: 下一个要处理的参数的索引</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> optind, opterr, optopt;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getopt</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[], <span class="hljs-type">const</span> <span class="hljs-type">char</span> *optstring)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getopt_long</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[], <span class="hljs-type">const</span> <span class="hljs-type">char</span> *optstring,</span><br><span class="hljs-params">                <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> option *longopts, <span class="hljs-type">int</span> *longindex)</span>;<br></code></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p><strong>KEY &#x3D; VALVE</strong><br>可以通过<code>export</code>命令查看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">getenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * change or add</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @prarm: overwrite  是否覆盖</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 覆盖时是释放原来的空间，重新分配</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *value, <span class="hljs-type">int</span> overwrite)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">unsetenv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 和getenv一样的作用，change or add</span><br><span class="hljs-comment"> * 用法不一样，且没有const修饰</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">putenv</span><span class="hljs-params">(<span class="hljs-type">char</span> *<span class="hljs-built_in">string</span>)</span>;<br></code></pre></td></tr></table></figure><h3 id="C程序的存储空间布局"><a href="#C程序的存储空间布局" class="headerlink" title="C程序的存储空间布局"></a>C程序的存储空间布局</h3><p><code>pmap</code>命令，查看进程空间布局</p><h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><ul><li><p>动态库</p></li><li><p>静态库</p></li><li><p>手工装载库</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">dlopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flag)</span>;<br><span class="hljs-type">char</span> *<span class="hljs-title function_">dlerror</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">dlclose</span><span class="hljs-params">(<span class="hljs-type">void</span> *handle)</span>;<br><span class="hljs-type">void</span> *<span class="hljs-title function_">dlsym</span><span class="hljs-params">(<span class="hljs-type">void</span> *handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *symbol)</span>;<br><span class="hljs-comment">// Link with -ldl</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="函数之间正常的跳转"><a href="#函数之间正常的跳转" class="headerlink" title="函数之间正常的跳转"></a>函数之间正常的跳转</h3><p><code>goto</code>无法跨函数跳转。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  设置跳转点</span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> * @return  0  说明是在设置跳转点</span><br><span class="hljs-comment"> * @return 非0 说明是通过 longjmp 返回</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setjmp</span><span class="hljs-params">(jmp_buf env)</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 跳转到跳转点</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @prarm: env  跳转点 </span><br><span class="hljs-comment"> * @prarm: val  传递给 setjmp 的值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">longjmp</span><span class="hljs-params">(jmp_buf env, <span class="hljs-type">int</span> val)</span>;<br></code></pre></td></tr></table></figure><h3 id="资源的获取及控制"><a href="#资源的获取及控制" class="headerlink" title="资源的获取及控制"></a>资源的获取及控制</h3><p><code>ulimit -a</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// get/set resource limits</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getrlimit</span><span class="hljs-params">(<span class="hljs-type">int</span> resource, <span class="hljs-keyword">struct</span> rlimit *rlim)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">setrlimit</span><span class="hljs-params">(<span class="hljs-type">int</span> resource, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> rlimit *rlim)</span>;<br><br><span class="hljs-comment">// 普通用户不能设置超过硬限制</span><br><span class="hljs-comment">// root 用户可以 升高/降低 硬限制</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rlimit</span> &#123;</span><br>    <span class="hljs-type">rlim_t</span> rlim_cur;  <span class="hljs-comment">/* soft limit */</span><br>    <span class="hljs-type">rlim_t</span> rlim_max;  <span class="hljs-comment">/* hard limit */</span><br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>李慧芹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下C语言教程-李慧芹老师-第十二章</title>
    <link href="/2024/05/16/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0/"/>
    <url>/2024/05/16/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sinlatansen/Linux-C-Notes">配套代码笔记仓库</a>。</p><h1 id="俄罗斯方块"><a href="#俄罗斯方块" class="headerlink" title="俄罗斯方块"></a>俄罗斯方块</h1><ol><li><p>图形</p><p> ANSI_VT，framebuffer </p><p> 前者以光标为单位，后者以像素为单位。</p><p> 推荐后者。 </p></li><li><p>输入设备</p></li><li><p>并发</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>李慧芹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下C语言教程-李慧芹老师-第十三章</title>
    <link href="/2024/05/16/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/"/>
    <url>/2024/05/16/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sinlatansen/Linux-C-Notes">配套代码笔记仓库</a>。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#io%E6%93%8D%E4%BD%9C">I&#x2F;O操作</a><ul><li><a href="#%E6%A0%87%E5%87%86io">标准IO</a></li><li><a href="#%E6%96%87%E4%BB%B6io%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8io">文件IO&#x2F;系统调用IO</a><ul><li><a href="#%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%9A%84%E6%A6%82%E5%BF%B5">文件描述符的概念</a></li><li><a href="#%E6%96%87%E4%BB%B6io%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0">文件IO操作相关函数：</a></li><li><a href="#%E4%BE%8B%E9%A2%98%E9%80%9A%E8%BF%87%E6%96%87%E4%BB%B6io%E5%A4%84%E7%90%86csv%E8%A1%A8%E6%A0%BC">例题：通过文件IO处理csv表格</a></li><li><a href="#%E6%96%87%E4%BB%B6io%E4%B8%8E%E6%A0%87%E5%87%86io%E7%9A%84%E5%8C%BA%E5%88%AB">文件IO与标准IO的区别</a></li><li><a href="#io%E7%9A%84%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98">IO的效率问题</a><ul><li><a href="#%E4%B9%A0%E9%A2%98">习题</a></li><li><a href="#%E8%A7%A3%E7%AD%94">解答</a></li><li><a href="#%E7%BB%93%E6%9E%9C">结果</a></li></ul></li><li><a href="#%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB">文件共享</a></li><li><a href="#%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C">原子操作</a></li><li><a href="#%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E9%87%8D%E5%AE%9A%E5%90%91dup-dup2">程序中的重定向：<code>dup</code>, <code>dup2</code></a></li><li><a href="#%E5%90%8C%E6%AD%A5">同步</a></li><li><a href="#devfd%E7%9B%AE%E5%BD%95">&#x2F;dev&#x2F;fd&#x2F;目录</a></li></ul></li></ul></li></ul><h1 id="I-O操作"><a href="#I-O操作" class="headerlink" title="I&#x2F;O操作"></a>I&#x2F;O操作</h1><p>输入输出是一切实现的基础。</p><ul><li><p>标准IO：<code>stdio</code></p></li><li><p>系统调用IO（文件IO）：<code>sysio</code></p></li></ul><p>优先使用<strong>标准IO</strong>，兼容性更好，还有合并系统调用的优势。</p><h2 id="标准IO"><a href="#标准IO" class="headerlink" title="标准IO"></a>标准IO</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* stdio */</span><br><span class="hljs-comment">/* FILE类型贯穿始终 */</span><br><br>FILE *<span class="hljs-title function_">fopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode)</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * fopen 返回指针的储存位置？ 1.栈  2.静态区  3.堆</span><br><span class="hljs-comment"> * 正确答案：3.堆。</span><br><span class="hljs-comment"> * 因为如果是栈，就是函数内部局部变量，无法返回地址。</span><br><span class="hljs-comment"> * 如果是静态区，无法确定需要多少个这个变量。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 只有 r 和 r+ 一定要求文件存在</span><br><span class="hljs-comment"> * 另外几种不存在会创建</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 创建文件的权限</span><br><span class="hljs-comment"> * 0666 &amp; ~umask</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 对于普通用户</span><br><span class="hljs-comment"> * umask 得到 022</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fclose</span><span class="hljs-params">(FILE *fp)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">(<span class="hljs-type">int</span> c, FILE *stream)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fgetc</span><span class="hljs-params">(FILE *stream)</span>;<br><br><span class="hljs-type">char</span> *<span class="hljs-title function_">fgets</span><span class="hljs-params">(<span class="hljs-type">char</span> *s, <span class="hljs-type">int</span> size, FILE *stream)</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 两种正常返回的情况：</span><br><span class="hljs-comment"> * 1. 读了 size-1 个字节，最后一个字节留给 &#x27;\0&#x27;</span><br><span class="hljs-comment"> * 2. 读到了 &#x27;\n&#x27;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * eg. 加入用fgets(buf, 5, stream) 来读 abcd</span><br><span class="hljs-comment"> * 是会读两次的</span><br><span class="hljs-comment"> * 第一次：abcd&#x27;\0&#x27;</span><br><span class="hljs-comment"> * 第二次：&#x27;\n&#x27;&#x27;\0&#x27;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fputs</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> s, FILE *<span class="hljs-keyword">restrict</span> stream)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这一对函数常用但是无法验证边界</span><br><span class="hljs-comment"> * 尽量一次只读单字节，更安全</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 返回值：成功读/写的对象的数量</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">fread</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> nemmb, FILE *stream)</span>;<br><span class="hljs-type">size_t</span> <span class="hljs-title function_">fwrite</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> nmemb, FILE *stream)</span>;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">printf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, ...)</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 常用于 fprintf(stderr,...)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fprintf</span><span class="hljs-params">(FILE *<span class="hljs-keyword">restrict</span> stream, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, ...)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">dprintf</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, ...)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将格式化内容输出到一个字符串</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 和 atoi() 正好相反</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sprintf</span><span class="hljs-params">(<span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> str, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, ...)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 比sprintf多了size参数，更安全</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">snprintf</span><span class="hljs-params">(<span class="hljs-type">char</span>   str[<span class="hljs-keyword">restrict</span>.size],</span><br><span class="hljs-params">             <span class="hljs-type">size_t</span> size,</span><br><span class="hljs-params">             <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format,</span><br><span class="hljs-params">             ...)</span><br><br><span class="hljs-comment">// !!! 慎用%s</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">scanf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, ...)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fscanf</span><span class="hljs-params">(FILE *<span class="hljs-keyword">restrict</span> stream,</span><br><span class="hljs-params">                  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-keyword">restrict</span> format, ...)</span>;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 移动文件当前位置指针</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 可用于生成空洞文件，下载器原理</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @prarm: offset 移动多远</span><br><span class="hljs-comment"> * @prarm: whence 移动方向</span><br><span class="hljs-comment"> *         SEEK_SET, SEEK_CUR, SEEK_END</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @return  成功0，失败-1</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fseek</span><span class="hljs-params">(FILE *stream, <span class="hljs-type">long</span> offset, <span class="hljs-type">int</span> whence)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 反映当前文件指针所在位置</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 这个long的负值部分无法使用。</span><br><span class="hljs-comment"> * 所以文件无法超过2G。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">ftell</span><span class="hljs-params">(FILE *stream)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解决上面long的问题。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 最好编译时加上</span><br><span class="hljs-comment"> * #define _FILE_OFFSET_BITS 64</span><br><span class="hljs-comment"> * 可以写入makefile</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 但是这俩函数是方言，前面那个long的一对支持C89，C99</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fseeko</span><span class="hljs-params">(FILE *stream, <span class="hljs-type">off_t</span> offset, <span class="hljs-type">int</span> whence)</span>;<br><span class="hljs-type">off_t</span> <span class="hljs-title function_">ftello</span><span class="hljs-params">(FILE *stream)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将文件指针置于文件首 </span><br><span class="hljs-comment"> * equivalent to:</span><br><span class="hljs-comment"> * fseek(stream, 0L, SEEK_SET);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">rewind</span><span class="hljs-params">(FILE *stream)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  缓冲区的作用：</span><br><span class="hljs-comment"> *     大多数情况下是好事，合并系统调用</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 行缓冲： 换行时候刷新，满了的时候刷新，强制刷新（标准输出是这样的，因为是终端设备）</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 全缓冲： 满了的时候刷新，强制刷新（默认，只要不是终端设备）</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 无缓冲： 如stderr，需要立即输出的内容</span><br><span class="hljs-comment">*/</span><br>fflush();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @prarm: mode</span><br><span class="hljs-comment"> * 三种缓冲模式: </span><br><span class="hljs-comment"> *            _IONBF</span><br><span class="hljs-comment"> *            _IOLBF</span><br><span class="hljs-comment"> *            _IOFBF</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">setvbuf</span><span class="hljs-params">(FILE *stream, <span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> mode, <span class="hljs-type">size_t</span> size)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 为了读取一行</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 使用办法：</span><br><span class="hljs-comment"> *   #define _GNU_SOURCE  这个不想写到代码里面的话可以写到makefile</span><br><span class="hljs-comment"> *   eg. CFLAGS+=-D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE</span><br><span class="hljs-comment"> *   #include &lt;stdio.h&gt;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * !!! 里面有 malloc 动作，未释放</span><br><span class="hljs-comment"> * !!! 是方言，可以自己封装一个mygetline和mygetline_free</span><br><span class="hljs-comment"> * !!! 但是根据chatgpt，好像直接 free(*lineptr) 就行了</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">getline</span><span class="hljs-params">(<span class="hljs-type">char</span> **lineptr, <span class="hljs-type">size_t</span> *n, FILE *stream)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 临时文件</span><br><span class="hljs-comment"> *       1. 如何不冲突的创建</span><br><span class="hljs-comment"> *       2. 及时销毁</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * tmpnam: 创建临时文件名字</span><br><span class="hljs-comment"> *         有并发危险，因为产生名字和创建文件是两步</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * tmpfile: 创建临时文件</span><br><span class="hljs-comment"> *          是匿名文件，ls -a 都看不到</span><br><span class="hljs-comment"> *          避免冲突</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">tmpnam</span><span class="hljs-params">(<span class="hljs-type">char</span> *s)</span>;<br>FILE *<span class="hljs-title function_">tmpfile</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br></code></pre></td></tr></table></figure><h2 id="文件IO-系统调用IO"><a href="#文件IO-系统调用IO" class="headerlink" title="文件IO&#x2F;系统调用IO"></a>文件IO&#x2F;系统调用IO</h2><p>文件描述符（<code>fd</code>）是在文件IO中贯穿始终的类型。</p><h3 id="文件描述符的概念"><a href="#文件描述符的概念" class="headerlink" title="文件描述符的概念"></a>文件描述符的概念</h3><p>是一个整型数，是一个指针数组的下标。</p><p>优先使用当前可用范围内最小的。</p><h3 id="文件IO操作相关函数："><a href="#文件IO操作相关函数：" class="headerlink" title="文件IO操作相关函数："></a>文件IO操作相关函数：</h3><ul><li><code>open</code></li><li><code>close</code></li><li><code>read</code></li><li><code>write</code></li><li><code>lsee</code></li></ul><p>可以使用<code>./open file &amp;</code>来后台运行一个程序。</p><p>然后通过<code>ps</code>查看进程号</p><p>然后进入<code>/proc/进程号/fd</code>查看文件描述符</p><p>前三个是标准输入、输出、错误，后面的是打开的文件描述符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * flag:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * r  -&gt; O_RDONLY</span><br><span class="hljs-comment"> * r+ -&gt; O_RDWR</span><br><span class="hljs-comment"> * w  -&gt; O_WRONLY | O_CREAT | O_TRUNC</span><br><span class="hljs-comment"> * w+ -&gt; O_RDWR   | O_TRUNC | O_CREAT</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * O_RDONLY     只读</span><br><span class="hljs-comment"> * O_WRONLY     只写</span><br><span class="hljs-comment"> * O_RDWR       读写</span><br><span class="hljs-comment"> * O_CREAT      创建</span><br><span class="hljs-comment"> * O_TRUNC      截断</span><br><span class="hljs-comment"> * O_APPEND     追加</span><br><span class="hljs-comment"> * O_EXCL       排他(若要创建的文件已存在则报错)</span><br><span class="hljs-comment"> * O_NONBLOCK   非阻塞</span><br><span class="hljs-comment"> * O_SYNC       同步</span><br><span class="hljs-comment"> * O_DSYNC      数据同步</span><br><span class="hljs-comment"> * O_RSYNC      读同步</span><br><span class="hljs-comment"> * O_DIRECT     直接IO</span><br><span class="hljs-comment"> * O_LARGEFILE  大文件</span><br><span class="hljs-comment"> * O_DIRECTORY  目录</span><br><span class="hljs-comment"> * O_NOFOLLOW   不跟踪符号链接</span><br><span class="hljs-comment"> * O_CLOEXEC    close-on-exec</span><br><span class="hljs-comment"> * O_PATH       仅打开目录</span><br><span class="hljs-comment"> * O_TMPFILE    临时文件</span><br><span class="hljs-comment"> * O_NOCTTY     不分配控制终端</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 如果有creat就必须用三参数的形式</span><br><span class="hljs-comment"> * C语言没有重载，这是变参函数</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @prarm: pathname 文件路径</span><br><span class="hljs-comment"> * @prarm: flags    文件打开方式</span><br><span class="hljs-comment"> * @prarm: mode     文件权限</span><br><span class="hljs-comment"> *                  假如0666，就是rw-rw-rw-，110110110</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, <span class="hljs-type">mode_t</span> mode)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">close</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @return 读取的字节数，失败返回-1</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> count)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  想要控制写入的位置，需要使用lseek</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @return 写入的字节数，失败返回-1</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> count)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  移动文件指针</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @prarm: offset 移动多远</span><br><span class="hljs-comment"> * @prarm: whence 移动方向</span><br><span class="hljs-comment"> *         SEEK_SET, SEEK_CUR, SEEK_END</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @return  成功0，失败-1</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">off_t</span> <span class="hljs-title function_">lseek</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, offt offset, <span class="hljs-type">int</span> whence)</span>;<br><br></code></pre></td></tr></table></figure><h3 id="例题：通过文件IO处理csv表格"><a href="#例题：通过文件IO处理csv表格" class="headerlink" title="例题：通过文件IO处理csv表格"></a>例题：通过文件IO处理csv表格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csv">,语文,数学,英语,总分,评价<br>张三,90,91,92,,<br>李四,80,81,82,,<br>王五,70,71,72,,<br></code></pre></td></tr></table></figure><p>思路：逐行处理</p><p>可以使用16进制查看工具</p><h3 id="文件IO与标准IO的区别"><a href="#文件IO与标准IO的区别" class="headerlink" title="文件IO与标准IO的区别"></a>文件IO与标准IO的区别</h3><p>区别：响应速度&amp;吞吐量</p><p>文件IO需要频繁进入内核，标准IO通过缓冲区合并系统调用。</p><p>响应速度快就文件IO，吞吐量大就标准IO。</p><blockquote><p>[!warning]<br>二者不可混用</p></blockquote><p>转换方法：<code>fileno</code>, <code>fdopen</code></p><h3 id="IO的效率问题"><a href="#IO的效率问题" class="headerlink" title="IO的效率问题"></a>IO的效率问题</h3><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><p>将<code>mycpy.c</code>程序进行更改，将<code>BUFSIZE</code>的值放大，观察进程消耗的时间，注意性能出现拐点的值以及程序何时段错误。</p><h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>将<code>BUFSIZE</code>作为命令行参数传入，<code>int bufsize = atoi(argv[3]);</code></p><p>通过脚本进行试验：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 生成一个 5GB 的文件</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/urandom of=/tmp/bigfile bs=1G count=5<br><br><span class="hljs-comment"># 输入和输出文件的路径</span><br>src=<span class="hljs-string">&quot;/tmp/bigfile&quot;</span><br>dst=<span class="hljs-string">&quot;/tmp/outfile&quot;</span><br><br><span class="hljs-comment"># 编译你的程序</span><br>gcc -o mycpy_bufsize mycpy_bufsize.c<br><br><span class="hljs-comment"># 初始化 BUFSIZE</span><br>bufsize=512<br><br><span class="hljs-comment"># 循环，每次 BUFSIZE * 2</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span><br>  <span class="hljs-comment"># 用 time 命令运行你的程序，并将结果重定向到一个临时文件</span><br>  &#123; <span class="hljs-keyword">time</span> ./mycpy_bufsize <span class="hljs-variable">$src</span> <span class="hljs-variable">$dst</span> <span class="hljs-variable">$bufsize</span>; &#125; 2&gt; time.txt<br>  <br>  <span class="hljs-comment"># 检查程序的退出状态</span><br>  <span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Max BUFSIZE before segfault: <span class="hljs-variable">$bufsize</span>&quot;</span><br>    <span class="hljs-built_in">break</span><br>  <span class="hljs-keyword">fi</span><br><br>  <span class="hljs-comment"># 提取 time 的结果</span><br>  real_time=$(grep real time.txt | awk -F<span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br>  user_time=$(grep user time.txt | awk -F<span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br>  sys_time=$(grep sys time.txt | awk -F<span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br><br>  <span class="hljs-comment"># 输出 BUFSIZE 和 time 的结果</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;BUFSIZE: <span class="hljs-variable">$bufsize</span>, Real Time: <span class="hljs-variable">$real_time</span>, User Time: <span class="hljs-variable">$user_time</span>, Sys Time: <span class="hljs-variable">$sys_time</span>&quot;</span><br>  <br>  <span class="hljs-comment"># BUFSIZE * 2</span><br>  bufsize=$((bufsize * <span class="hljs-number">2</span>))<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 删除临时文件</span><br><span class="hljs-built_in">rm</span> time.txt<br><span class="hljs-built_in">rm</span> <span class="hljs-variable">$src</span><br><span class="hljs-built_in">rm</span> <span class="hljs-variable">$dst</span><br><br></code></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">wan@SK-20240106UQUX:~/Linux-C-Notes/C13-Linux系统编程/io/sys$ ./time.sh<br>BUFSIZE: 512, Real Time: 0m7.672s, User Time: 0m0.650s, Sys Time: 0m7.007s<br>BUFSIZE: 1024, Real Time: 0m5.026s, User Time: 0m0.201s, Sys Time: 0m4.651s<br>BUFSIZE: 2048, Real Time: 0m3.535s, User Time: 0m0.158s, Sys Time: 0m3.183s<br>BUFSIZE: 4096, Real Time: 0m2.418s, User Time: 0m0.059s, Sys Time: 0m2.232s<br>BUFSIZE: 8192, Real Time: 0m2.363s, User Time: 0m0.040s, Sys Time: 0m2.150s<br>BUFSIZE: 16384, Real Time: 0m2.279s, User Time: 0m0.030s, Sys Time: 0m2.079s<br>BUFSIZE: 32768, Real Time: 0m2.238s, User Time: 0m0.020s, Sys Time: 0m2.026s<br>BUFSIZE: 65536, Real Time: 0m2.114s, User Time: 0m0.000s, Sys Time: 0m1.972s<br>BUFSIZE: 131072, Real Time: 0m2.302s, User Time: 0m0.019s, Sys Time: 0m1.982s<br>BUFSIZE: 262144, Real Time: 0m2.244s, User Time: 0m0.000s, Sys Time: 0m2.016s<br>BUFSIZE: 524288, Real Time: 0m2.254s, User Time: 0m0.000s, Sys Time: 0m2.039s<br>BUFSIZE: 1048576, Real Time: 0m2.249s, User Time: 0m0.010s, Sys Time: 0m2.037s<br>BUFSIZE: 2097152, Real Time: 0m2.304s, User Time: 0m0.000s, Sys Time: 0m2.108s<br>BUFSIZE: 4194304, Real Time: 0m2.234s, User Time: 0m0.010s, Sys Time: 0m2.082s<br>Max BUFSIZE before segfault: 8388608<br></code></pre></td></tr></table></figure><p>在<code>ulimit -a</code>中，我的系统的<code>stack size</code>是<code>8192</code>，所以<code>BUFSIZE</code>不能超过<code>8192</code>，否则会段错误。与测试结果一致。</p><h3 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h3><p>多个任务共同操作一个文件或者协同完成任务</p><p>面试题：写程序删除一个文件的第10行</p><p>补充函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 截断文件到某长度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">truncate</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">off_t</span> length)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">ftruncate</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">off_t</span> length)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 最简单思路，将11行开始的内容到第10行开始处覆盖写</span><br><span class="hljs-keyword">while</span>()<br>&#123;<br>    lseek <span class="hljs-number">11</span> + read +lseek <span class="hljs-number">10</span> + write<br>&#125;<br><br><span class="hljs-comment">// 优化思路，两个文件描述符，一个读一个写</span><br><span class="hljs-number">1</span> -&gt; open r  -&gt; fd1 -&gt; lseek <span class="hljs-number">11</span><br><span class="hljs-number">2</span> -&gt; open r+ -&gt; fd2 -&gt; lseek <span class="hljs-number">10</span><br><br><span class="hljs-keyword">while</span>()<br>&#123;<br>    <span class="hljs-number">1</span>-&gt;fd1-&gt; read<br>    <span class="hljs-number">2</span>-&gt;fd2-&gt; write<br>&#125;<br><br><span class="hljs-comment">// 两个进程, 设计进程间通信</span><br>process1 -&gt; open -&gt; r<br>process2 -&gt; open -&gt; r+<br><br>p1-&gt;read -&gt; p2-&gt;write<br><br></code></pre></td></tr></table></figure><h3 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h3><p>指不可分割的操作</p><p>作用：解决竞争和冲突</p><p>如<code>tmpnam</code>函数，产生文件名和创建文件是两步，会有并发问题。</p><h3 id="程序中的重定向：dup-dup2"><a href="#程序中的重定向：dup-dup2" class="headerlink" title="程序中的重定向：dup, dup2"></a>程序中的重定向：<code>dup</code>, <code>dup2</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  dup 和 dup2 都是复制文件描述符</span><br><span class="hljs-comment"> *  dup2 可以指定新的文件描述符</span><br><span class="hljs-comment"> *  dup 会返回一个新的文件描述符</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dup</span><span class="hljs-params">(<span class="hljs-type">int</span> oldfd)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">dup2</span><span class="hljs-params">(<span class="hljs-type">int</span> oldfd, <span class="hljs-type">int</span> newfd)</span>;<br></code></pre></td></tr></table></figure><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>同步内核层面的buffer和cache</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sync</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fsync</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fdatasync</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>; <span class="hljs-comment">// 只刷新数据，不刷新亚数据</span><br><br><span class="hljs-comment">// 文件描述符所有的操作几乎都来源于该函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fcntl</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> cmd, ... <span class="hljs-comment">/* arg */</span>)</span>;<br><br><span class="hljs-comment">// 设备相关的内容</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ioctl</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> request, ... <span class="hljs-comment">/* arg */</span>)</span>;<br><br></code></pre></td></tr></table></figure><h3 id="dev-fd-目录"><a href="#dev-fd-目录" class="headerlink" title="&#x2F;dev&#x2F;fd&#x2F;目录"></a>&#x2F;dev&#x2F;fd&#x2F;目录</h3><p><strong>虚目录</strong>：显示当前进程的文件描述符信息</p>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>李慧芹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下C语言教程-李慧芹老师-第十章，第十一章</title>
    <link href="/2024/04/29/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%8C%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/"/>
    <url>/2024/04/29/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%8C%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sinlatansen/Linux-C-Notes">配套代码笔记仓库</a>。</p><h1 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h1><h2 id="makefile与Makefile的区别"><a href="#makefile与Makefile的区别" class="headerlink" title="makefile与Makefile的区别"></a>makefile与Makefile的区别</h2><p><code>make</code>会优先使用<code>makefile</code>，发布的项目一般是一个<code>Makefile</code>，方便用户写自己的<code>makefile</code>。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://seisman.github.io/how-to-write-makefile/">跟我一起写Makefile — 跟我一起写Makefile 1.0 文档 (seisman.github.io)</a></p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a><ul><li><a href="#%E6%9E%B6%E6%9E%84%E6%A2%B3%E7%90%86">架构梳理</a></li><li><a href="#%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93">静态库与动态库</a><ul><li><a href="#%E9%9D%99%E6%80%81%E5%BA%93">静态库</a><ul><li><a href="#%E4%BB%A5%E9%93%BE%E5%BC%8F%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84lib2%E4%B8%BA%E4%BE%8B">以链式双向链表的<code>lib2</code>为例。</a></li></ul></li><li><a href="#%E5%8A%A8%E6%80%81%E5%BA%93">动态库</a><ul><li><a href="#%E8%BF%98%E6%98%AF%E4%BB%A5lib2%E4%B8%BA%E4%BE%8B">还是以<code>lib2</code>为例。</a></li><li><a href="#%E4%BB%A5%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E6%A0%88%E4%B8%BA%E4%BE%8Blibstack%E4%BE%9D%E8%B5%96libllist">以链式存储栈为例，<code>libstack</code>依赖<code>libllist</code>。</a></li></ul></li></ul></li></ul></li></ul><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="架构梳理"><a href="#架构梳理" class="headerlink" title="架构梳理"></a>架构梳理</h2><ul><li><p>线性（1:1)</p><ul><li><p>线性表</p><ul><li><p>顺序存储  –&gt;  <code>arr</code></p></li><li><p>链式存储  –&gt;  指针 （有头，无头）</p><p>  有头是指有一个不存数据的头，始终作为这个链表的起点。</p><p>  会更加简单，无头的话，更改首部节点会麻烦。</p><p>  头节点不仅可以作为起点，还可以作为存储信息的仓库，因为头节点只有*next是必须的。</p><ul><li><p>单链表</p><ul><li>循环</li><li>不循环</li></ul></li><li><p>双向链表</p><p>  <code>lib</code>四个版本，第一个最基础完善，第二个改成了变长结构体，第三个在第二个的基础上封装了函数指针，第四个在第二个的基础上隐藏了数据结构，只暴露接口。</p><ul><li>循环</li><li>不循环</li></ul><p>  学到这里可以去读一下内核有关<strong>list</strong>的实现，主要都是宏和内联函数。</p></li></ul></li></ul></li><li><p>栈</p></li><li><p>队列</p><p>  练习：</p><ol><li><p>表达式计算</p></li><li><p>球钟算法<br> 三个栈，1h，5min，1min。27个球，过了多久队列里又是1到27的顺序。</p></li></ol></li></ul></li><li><p>树状（1:N）</p><p>  <strong>递归</strong>。<strong>递归</strong>转<strong>非递归</strong>。</p><ul><li><p>深度：层数</p></li><li><p>度：子树的个数</p></li><li><p>叶子：边缘节点</p></li><li><p>孩子：与父节点对应</p></li><li><p>兄弟：相同父节点</p></li><li><p>堂兄弟：相同爷节点</p></li><li><p>二叉树：</p><ul><li>满二叉树：深度为<code>k</code>且节点为<code>2^k-1</code>的二叉树</li><li>完全二叉树：一颗二叉树，只有倒数两层可以存在不满两个孩子的节点，且单个孩子时只能是左孩子</li></ul></li><li><p>存储：</p><ul><li>顺序：直观，但是浪费空间<br>  满二叉树：父节点<code>n</code>，左孩子<code>2n</code>，右孩子<code>2n+1</code></li><li>链式：灵活，空间利用率高</li></ul></li><li><p>遍历</p><ul><li>按行</li><li>先序（根，左，右）</li><li>中序（左，根，右）</li><li>后序（左，右，根）</li></ul><p>  先加中，或者，中加后，都可以逆推出树。先加后不行。</p></li><li><p>平衡：</p><p>  有很多种条件判定。</p><p>  这棵树的左右子树个数差值为1。</p></li><li><p>广义表</p><p>  <code>( root ( left ) ( right) )</code>，进行嵌套。 </p></li><li><p>搜索树</p><p>  空间换时间，查找是**o(1)**。</p><p>  <strong>课后作业：词频统计</strong></p></li></ul></li><li><p>图（N:M）</p></li></ul><h2 id="静态库与动态库"><a href="#静态库与动态库" class="headerlink" title="静态库与动态库"></a>静态库与动态库</h2><ul><li>静态库：<ul><li>私家车，可以不在标准的位置下。</li><li>编译时引入，代码膨胀但是不影响运行时间。</li></ul></li><li>动态库（共享库）：<ul><li>公交车，只能在指定的路径。</li><li>运行时引入，占用运行时间。</li></ul></li></ul><h3 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h3><ol><li><code>libxx.a</code><br> xx 指代库名</li><li><code>ar -cr libxx.a yyy.o</code></li><li>发布到<br> <code>/usr/local/include</code><br> <code>/usr/local/lib</code></li><li><code>gcc -L/usr/local/lib -o main main.o -lxx</code><br> 如果路径都是这个默认的，可省略。<br> <code>-l</code>参数必须在最后，有依赖</li><li><code>ldd -print shared libirary dependencies</code><br> 打印所用到的动态库的内容</li></ol><h4 id="以链式双向链表的lib2为例。"><a href="#以链式双向链表的lib2为例。" class="headerlink" title="以链式双向链表的lib2为例。"></a>以链式双向链表的<code>lib2</code>为例。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ ldd ./main <br>        linux-vdso.so.1 (0x00007ffffa3d0000)<br>        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fa6c123a000)<br>        /lib64/ld-linux-x86-64.so.2 (0x00007fa6c142b000)<br>        *[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ gcc -c llist.c<br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ <span class="hljs-built_in">ls</span><br> llist.c   llist.o   Makefile<br> llist.h   main.c   <br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ ar -cr libllist.a llist.o<br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ <span class="hljs-built_in">ls</span><br> libllist.a   llist.h   main.c<br> llist.c      llist.o   Makefile<br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> llist.h /usr/local/include <br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> libllist.a /usr/local/lib <br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ gcc -o main main.c -lllist <br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ <span class="hljs-built_in">ls</span><br> libllist.a   llist.h   main     Makefile<br> llist.c      llist.o   main.c  <br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ ./main<br>6 std6 90 59<br>5 std5 62 27<br>4 std4 49 21<br>3 std3 86 92<br>2 std2 93 35<br>1 std1 77 15<br>0 std0 83 86<br><br><br>5 std5 62 27<br>4 std4 49 21<br>3 std3 86 92<br>2 std2 93 35<br>1 std1 77 15<br>0 std0 83 86<br></code></pre></td></tr></table></figure><p>这时<code>main.c</code>路径下都不需要<code>llist.c</code>和<code>llist.h</code>了，<code>#include</code>时也从<code>&quot;llist.h&quot;</code>变为<code>&lt;llist.h&gt;</code>。</p><h3 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h3><ol><li><code>libxx.so</code><br> xx为库名</li><li><code>gcc -shared -fpic -o libxx.so yyy.c</code></li><li>发布到<br> <code>/usr/local/include</code><br> <code>/usr/local/lib</code></li><li>在<code>/etc/ld.so.conf</code>中添加路径</li><li><code>/sbin/ldconfig</code> 重读&#96;&#x2F;etc&#x2F;ld.so.conf&#96;&#96;</li><li>&#96;&#96;gcc -I&#x2F;usr&#x2F;local&#x2F;include -L&#x2F;usr&#x2F;local&#x2F;lib -o … -lxx&#96;<br> 如果路径都是这个默认的，可省略。</li><li>非root用户发布，可以自己定义一个位置，例如<code>~/lib</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> xx.co ~/lib<br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH= ~/lib<br></code></pre></td></tr></table></figure><h4 id="还是以lib2为例。"><a href="#还是以lib2为例。" class="headerlink" title="还是以lib2为例。"></a>还是以<code>lib2</code>为例。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ <span class="hljs-built_in">ls</span><br> llist.c   llist.h   main   main.c   Makefile<br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ gcc -shared -fpic -o libllist.so llist.c<br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ <span class="hljs-built_in">ls</span><br> libllist.so   llist.h   main.c<br> llist.c       main      Makefile<br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> libllist.so /usr/local/lib<br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ <span class="hljs-built_in">sudo</span> vi /etc/ld.so.conf<br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ <span class="hljs-built_in">sudo</span> /sbin/ldconfig<br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ gcc -o main main.c -lllist<br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ ./main<br>6 std6 90 59<br>5 std5 62 27<br>4 std4 49 21<br>3 std3 86 92<br>2 std2 93 35<br>1 std1 77 15<br>0 std0 83 86<br><br><br>5 std5 62 27<br>4 std4 49 21<br>3 std3 86 92<br>2 std2 93 35<br>1 std1 77 15<br>0 std0 83 86<br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/list/linklist/double/lib2]$ ldd ./main<br>        linux-vdso.so.1 (0x00007ffd963ee000)<br>        libllist.so =&gt; /usr/local/lib/libllist.so (0x00007fda74025000)<br>        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fda73e44000)<br>        /lib64/ld-linux-x86-64.so.2 (0x00007fda7403a000)<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><p>当动态库和静态库重名，会优先链接<strong>静态库</strong>。</p></blockquote><h4 id="以链式存储栈为例，libstack依赖libllist。"><a href="#以链式存储栈为例，libstack依赖libllist。" class="headerlink" title="以链式存储栈为例，libstack依赖libllist。"></a>以链式存储栈为例，<code>libstack</code>依赖<code>libllist</code>。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/stack/list]$ <span class="hljs-built_in">ls</span><br> llist.c   main     Makefile   stack.o<br> llist.h   main.c   stack.c   <br> llist.o   main.o   stack.h   <br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/stack/list]$ gcc -shared -fpic -o libstack.so stack.c<br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/stack/list]$ <span class="hljs-built_in">ls</span><br> libstack.so   llist.o   main.o     stack.h<br> llist.c       main      Makefile   stack.o<br> llist.h       main.c    stack.c   <br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/stack/list]$ <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> libstack.so /usr/local/lib <br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/stack/list]$ <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> stack.h /usr/local/include <br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/stack/list]$ code main.c         <br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/stack/list]$ <span class="hljs-built_in">ls</span><br> llist.c   main     Makefile   stack.o<br> llist.h   main.c   stack.c   <br> llist.o   main.o   stack.h   <br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/stack/list]$ gcc -o main main.c -lstack<br>/usr/bin/ld: /usr/local/lib/libstack.so: undefined reference to `llist_create<span class="hljs-string">&#x27;</span><br><span class="hljs-string">/usr/bin/ld: /usr/local/lib/libstack.so: undefined reference to `llist_fetch&#x27;</span><br>/usr/bin/ld: /usr/local/lib/libstack.so: undefined reference to `llist_destroy<span class="hljs-string">&#x27;</span><br><span class="hljs-string">/usr/bin/ld: /usr/local/lib/libstack.so: undefined reference to `llist_insert&#x27;</span><br>collect2: error: ld returned 1 <span class="hljs-built_in">exit</span> status<br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/stack/list]$ gcc -o main main.c -lstack -lllist<br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/stack/list]$ ./main<br>./main: error <span class="hljs-keyword">while</span> loading shared libraries: libstack.so: cannot open shared object file: No such file or directory<br>*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/stack/list]$ <span class="hljs-built_in">sudo</span> /sbin/ldconfig               <br>/sbin/ldconfig: Can<span class="hljs-string">&#x27;t link /usr/lib/wsl/lib/libnvoptix_loader.so.1 to libnvoptix.so.1</span><br><span class="hljs-string">/sbin/ldconfig: /usr/lib/wsl/lib/libcuda.so.1 is not a symbolic link</span><br><span class="hljs-string"></span><br><span class="hljs-string">*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/stack/list]$ gcc -o main main.c -lstack -lllist</span><br><span class="hljs-string">*[main][~/workspace/Linux-C-Notes/Chapter11/ds/line/stack/list]$ ./main                            </span><br><span class="hljs-string">6 stu6 90 59</span><br><span class="hljs-string">5 stu5 62 27</span><br><span class="hljs-string">4 stu4 49 21</span><br><span class="hljs-string">3 stu3 86 92</span><br><span class="hljs-string">2 stu2 93 35</span><br><span class="hljs-string">1 stu1 77 15</span><br><span class="hljs-string">0 stu0 83 86</span><br></code></pre></td></tr></table></figure><p>添加动态库记得重载配置文件<code>sudo /sbin/ldconfig</code>!</p>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>李慧芹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下C语言教程-李慧芹老师-第九章</title>
    <link href="/2024/04/29/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E4%B9%9D%E7%AB%A0/"/>
    <url>/2024/04/29/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E4%B9%9D%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sinlatansen/Linux-C-Notes">配套代码笔记仓库</a>。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86">动态内存管理</a><ul><li><a href="#%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98">函数传参相关问题</a></li><li><a href="#%E5%85%B3%E4%BA%8E-free">关于 free</a></li></ul></li></ul><h1 id="动态内存管理"><a href="#动态内存管理" class="headerlink" title="动态内存管理"></a>动态内存管理</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">calloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> nmemb, <span class="hljs-type">size_t</span> size)</span>; <span class="hljs-comment">// 分配n个size空间</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>; <span class="hljs-comment">// 分配size空间</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span>;<br><span class="hljs-type">void</span> *<span class="hljs-title function_">realloc</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> size)</span>; <span class="hljs-comment">// 重新分配空间</span><br></code></pre></td></tr></table></figure><p>原则：谁申请谁释放。</p><h2 id="函数传参相关问题"><a href="#函数传参相关问题" class="headerlink" title="函数传参相关问题"></a>函数传参相关问题</h2><ol><li>要么用二级指针</li><li>要么用返回值</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// void func(int **p, int n)</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     *p = malloc(n);</span><br><br><span class="hljs-comment">//     if (NULL == *p)</span><br><span class="hljs-comment">//         exit(1);</span><br><br><span class="hljs-comment">//     return;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span> *p, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    p = <span class="hljs-built_in">malloc</span>(n);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == p)<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span>  num = <span class="hljs-number">100</span>;<br>    <span class="hljs-type">int</span> *p   = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// func(&amp;p, num);</span><br><br>    p = func(p, num);<br><br>    <span class="hljs-built_in">free</span>(p);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="关于-free"><a href="#关于-free" class="headerlink" title="关于 free"></a>关于 free</h2><p><code>free</code>操作没有扣掉那块内存，没有改变那块内存的值，也没有改变指针的指向。</p><p>仅仅是让这个指针不在有操作那块内存的权力，所以如果依旧用这个指针，可能不会报错，依旧可以操作那块内存。但是这就是野指针了，这是十分危险的。</p><p>比较好的习惯是在<code>free</code>之后马上给指针赋值<code>NULL</code>，这样后续再操作这个指针，就会报段错误。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> *p = <span class="hljs-literal">NULL</span>;<br><br>    p = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == p)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc() error!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    *p = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p--&gt;%d\n&quot;</span>, *p);<br><br>    <span class="hljs-built_in">free</span>(p);<br>    p = <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">// !important</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p--&gt;%d\n&quot;</span>, *p);<br>    <span class="hljs-comment">// 0x5a677368 -- &gt; 1516729192</span><br><br>    *p = <span class="hljs-number">123</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p--&gt;%d\n&quot;</span>, *p);<br>    <span class="hljs-comment">// 0x7b -- &gt; 0</span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>李慧芹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32基础开发知识</title>
    <link href="/2024/04/15/STM32%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/04/15/STM32%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>编译器：Keil5，AC5</li><li>编辑器：VS Code，Embedded IDE，Cortex-Debug</li><li>调试器：Openocd，Arm GNU Toolchain</li><li>烧录器：ST-link V2</li></ul><p>必要的配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// settings.json</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;cortex-debug.armToolchainPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Program Files (x86)\\Arm GNU Toolchain arm-none-eabi\\12.3 Rel1\\bin&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cortex-debug.openocdPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;E:\\OpenOCD-20211118-0.11.0\\bin\\openocd.exe&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cortex-debug.gdbPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Program Files (x86)\\Arm GNU Toolchain arm-none-eabi\\12.3 Rel1\\bin\\arm-none-eabi-gdb&quot;</span> <span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;showDevDebugOutput&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;raw&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cortex-debug.gdbPath.windows&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Program Files (x86)\\Arm GNU Toolchain arm-none-eabi\\12.3 rel1\\bin\\arm-none-eabi-gdb.exe&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cortex-debug.stlinkPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\ST\\STM32CubeIDE_1.8.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltools.stlink-gdb-server.win32_2.0.100.202109301221\\tools\\bin\\ST-LINK_gdbserver.exe&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">// launch.json</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 使用 IntelliSense 了解相关属性。</span><br>    <span class="hljs-comment">// 悬停以查看现有属性的描述。</span><br>    <span class="hljs-comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Cortex Debug(STLink)&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cortex-debug&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;servertype&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;openocd&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;executable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/$&#123;workspaceFolderBasename&#125;/$&#123;workspaceFolderBasename&#125;.elf&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;runToEntryPoint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;main&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;configFiles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;E:\\OpenOCD-20211118-0.11.0\\share\\openocd\\scripts\\interface\\stlink-v2.cfg&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;E:\\OpenOCD-20211118-0.11.0\\share\\openocd\\scripts\\target\\stm32f4x.cfg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-comment">// &quot;gdbPath&quot;:&quot;C:\\Program Files (x86)\\Arm GNU Toolchain arm-none-eabi\\12.3 Rel1\\bin\\arm-none-eabi-gdb.exe&quot;,</span><br>            <span class="hljs-attr">&quot;objdumpPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Program Files (x86)\\Arm GNU Toolchain arm-none-eabi\\12.3 rel1\\bin\\arm-none-eabi-objdump.exe&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>使用<strong>STM32CUBEMX</strong>生成代码框架，在 VS Code 中进行编辑，编译，烧录，调试。</p><h2 id="ST-Link-烧录器管脚定义"><a href="#ST-Link-烧录器管脚定义" class="headerlink" title="ST-Link 烧录器管脚定义"></a>ST-Link 烧录器管脚定义</h2><img src="https://s2.loli.net/2024/04/15/nx5lcMBZJ98XWzT.png"/><h2 id="使用-printf-进行串口打印"><a href="#使用-printf-进行串口打印" class="headerlink" title="使用 printf 进行串口打印"></a>使用 printf 进行串口打印</h2><ol><li><p>在要使用<code>printf</code>的文件包含头文件<code>stdio.h</code>。</p></li><li><p>在<code>usart.c</code>文件中加入重定向，这里以串口 1 为例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*****************************************************************************</span><br><span class="hljs-comment"> * 【功  能】 printf函数重定向支持代码</span><br><span class="hljs-comment"> *           加入以下代码, 使用printf函数时, 不再需要选择use MicroLIB</span><br><span class="hljs-comment"> * 参  数：</span><br><span class="hljs-comment"> * 返回值：</span><br><span class="hljs-comment"> *****************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> import(__use_no_semihosting)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">FILE</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">int</span> handle;<br>&#125;;                               <span class="hljs-comment">// 标准库需要的支持函数</span><br>FILE __stdout;                   <span class="hljs-comment">// FILE 在stdio.h文件</span><br><span class="hljs-type">void</span> _sys_exit(<span class="hljs-type">int</span> x) &#123; x = x; &#125; <span class="hljs-comment">// 定义_sys_exit()以避免使用半主机模式</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">(<span class="hljs-type">int</span> ch, FILE *f)</span> <span class="hljs-comment">// 重定向fputc函数，使printf的输出，由fputc输出到UART,  这里使用串口1(USART1)</span><br>&#123;<br>  <span class="hljs-comment">// if(xFlag.PrintfOK == 0) return 0;  // 判断USART是否已配置，防止在配置前调用printf被卡死</span><br><br>  <span class="hljs-keyword">while</span> ((USART1-&gt;SR &amp; <span class="hljs-number">0X40</span>) == <span class="hljs-number">0</span>)<br>    ;                  <span class="hljs-comment">// 等待上一次串口数据发送完成</span><br>  USART1-&gt;DR = (<span class="hljs-type">uint8_t</span>)ch; <span class="hljs-comment">// 写DR,串口1将发送数据</span><br>  <span class="hljs-keyword">return</span> ch;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>进一步封装一个日志库，增加时间戳，文件名，行数，打印等级等功能。如果是在<code>FreeRTOS</code>下，还要考虑多个任务同时对串口 1 的使用互斥问题，这里有一个我封装好的日志库，<a href="https://github.com/sinlatansen/DBG">sinlatansen&#x2F;DBG: 一款线程安全的 FreeRTOS（cmsis_os2）的日志调试库，基于 STM32F4_HAL</a> 。</p></li></ol><h2 id="避开-HAL-Delay"><a href="#避开-HAL-Delay" class="headerlink" title="避开 HAL_Delay"></a>避开 HAL_Delay</h2><p>HAL 库这个延时函数，有 bug，建议自己实现延时函数，改用软件定时器实现。</p><p>这里我使用的 STM32F407VET6 主频 168MHz，其中我使用的 TIM6 所挂载的 AHB1 频率为 84MHz ，因此设置 PSC 为 83。</p><img src="https://s2.loli.net/2024/04/15/ea5SjYiOFBXnGwk.png"/><p>代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* delay.c */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;delay.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay_ns</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> ns)</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> ticks =<br>        (ns / <span class="hljs-number">11.9</span>) + <span class="hljs-number">1</span>;   <span class="hljs-comment">// 计算需要的时钟周期数，+1确保延时不会少于请求的ns</span><br><br>    TIM6-&gt;CNT = <span class="hljs-number">0</span>;                <span class="hljs-comment">// 重置计数器</span><br>    HAL_TIM_Base_Start(&amp;htim6);   <span class="hljs-comment">// 启动定时器</span><br><br>    <span class="hljs-keyword">while</span> (TIM6-&gt;CNT &lt; ticks)<br>        ;                        <span class="hljs-comment">// 等待计数器达到目标值</span><br><br>    HAL_TIM_Base_Stop(&amp;htim6);   <span class="hljs-comment">// 停止定时器</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay_us</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> us)</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> ticks =<br>        (<span class="hljs-number">84</span> * us) - <span class="hljs-number">1</span>;   <span class="hljs-comment">// 84时钟周期代表1微秒，-1确保延时不会少于请求的us</span><br><br>    TIM6-&gt;CNT = <span class="hljs-number">0</span>;                <span class="hljs-comment">// 重置计数器</span><br>    HAL_TIM_Base_Start(&amp;htim6);   <span class="hljs-comment">// 启动定时器</span><br><br>    <span class="hljs-keyword">while</span> (TIM6-&gt;CNT &lt; ticks)<br>        ;                        <span class="hljs-comment">// 等待计数器达到目标值</span><br><br>    HAL_TIM_Base_Stop(&amp;htim6);   <span class="hljs-comment">// 停止定时器</span><br>&#125;<br><br><span class="hljs-comment">// ms延时使用osDelay函数</span><br><br><br><br><span class="hljs-comment">/****************************************************************/</span><br><br><span class="hljs-comment">/* delay.h */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> DELAY_H_INCLUDED</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELAY_H_INCLUDED</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f4xx_hal.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;tim.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay_ns</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> ns)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay_us</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> us)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* DELAY_H_INCLUDED */</span></span><br><br></code></pre></td></tr></table></figure><h2 id="STM32CUBEMX-沙箱定义"><a href="#STM32CUBEMX-沙箱定义" class="headerlink" title="STM32CUBEMX 沙箱定义"></a>STM32CUBEMX 沙箱定义</h2><p>对于 CUBEMX 生成的代码，会有一套规范，通过注释提示了用户代码写在哪里，否则可能在下一次生成代码误删用户代码。</p><p>一般我倾向于把用户代码写在自己添加的 .c 文件，在<code>main.c</code>中进行调用，毕竟那些注释看着还是比较乱。</p><p>但是避免不了要在生成的代码中写内容时，还是遵循官方的风格与规范比较好。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c">* USER CODE END Header */<br><span class="hljs-comment">/* Includes ------------------------------------------------------------------*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gpio.h&quot;</span></span><br><span class="hljs-comment">/* Private includes 私有文件包含沙箱----------------------------------------------------------*/</span><br><span class="hljs-comment">/* USER CODE BEGIN Includes */</span><br>    这里存放定义的类型<br><span class="hljs-comment">/* USER CODE END Includes */</span><br><span class="hljs-comment">/* Private typedef 私有类型定义沙箱-----------------------------------------------------------*/</span><br><span class="hljs-comment">/* USER CODE BEGIN PTD */</span><br>    这里存放你的定义的结构体，枚举体，共用体等<br><span class="hljs-comment">/* USER CODE END PTD */</span><br><span class="hljs-comment">/* Private define 私有宏沙箱------------------------------------------------------------*/</span><br><span class="hljs-comment">/* USER CODE BEGIN PD */</span><br>    这里存放你定义的宏<br><span class="hljs-comment">/* USER CODE END PD */</span><br><span class="hljs-comment">/* Private macro 私有宏沙箱-------------------------------------------------------------*/</span><br><span class="hljs-comment">/* USER CODE BEGIN PM */</span><br>     这里存放你定义的宏<br><span class="hljs-comment">/* USER CODE END PM */</span><br><span class="hljs-comment">/* Private variables 私有变量沙箱---------------------------------------------------------*/</span><br><span class="hljs-comment">/* USER CODE BEGIN PV */</span><br>     这里存放你定义的变量<br><span class="hljs-comment">/* USER CODE END PV */</span><br><span class="hljs-comment">/* Private function prototypes 私有函数原型沙箱-----------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SystemClock_Config</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-comment">/* USER CODE BEGIN PFP */</span><br>    这里存放你的函数原型<br><span class="hljs-comment">/* USER CODE END PFP */</span><br><span class="hljs-comment">/* Private user code私有程序沙箱 ---------------------------------------------------------*/</span><br><span class="hljs-comment">/* USER CODE BEGIN 0 */</span><br><span class="hljs-comment">/* USER CODE END 0 */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  The application entry point.</span><br><span class="hljs-comment">  * @retval int</span><br><span class="hljs-comment">  */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN 1 */</span><br>  <span class="hljs-comment">/* USER CODE END 1 */</span><br>  <span class="hljs-comment">/* MCU Configuration--------------------------------------------------------*/</span><br>  <span class="hljs-comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span><br>  HAL_Init();<span class="hljs-comment">//整个HAL库初始化</span><br>  <span class="hljs-comment">/* USER CODE BEGIN Init */</span><br>  <span class="hljs-comment">/* USER CODE END Init */</span><br>  <span class="hljs-comment">/* Configure the system clock */</span><br>  SystemClock_Config();<span class="hljs-comment">//系统时钟初始化</span><br>  <span class="hljs-comment">/* USER CODE BEGIN SysInit */</span><br>  <span class="hljs-comment">/* USER CODE END SysInit */</span><br>  <span class="hljs-comment">/* Initialize all configured peripherals */</span><br>  MX_GPIO_Init();<span class="hljs-comment">//GPIO初始化</span><br>  <span class="hljs-comment">/* USER CODE BEGIN 2 */</span><br>  <span class="hljs-comment">/* USER CODE END 2 */</span><br>  <span class="hljs-comment">/* Infinite loop */</span><br>  <span class="hljs-comment">/* USER CODE BEGIN WHILE */</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>  &#123;<br>    <span class="hljs-comment">/* USER CODE END WHILE */</span><br>    <span class="hljs-comment">/* USER CODE BEGIN 3 */</span><br>  &#125;<br>  <span class="hljs-comment">/* USER CODE END 3 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CUBEMX-生成的工程在-keil5-中编译报错"><a href="#CUBEMX-生成的工程在-keil5-中编译报错" class="headerlink" title="CUBEMX 生成的工程在 keil5 中编译报错"></a>CUBEMX 生成的工程在 keil5 中编译报错</h2><p><a href="https://www.cnblogs.com/skullboyer/p/8677669.html">【转】Keil ARM 开发 error L6236E 错误解决 - 壹点灵异 - 博客园 (cnblogs.com)</a></p><h2 id="让-CUBEMX-生成-UTF-8-文件，避免中文乱码"><a href="#让-CUBEMX-生成-UTF-8-文件，避免中文乱码" class="headerlink" title="让 CUBEMX 生成 UTF-8 文件，避免中文乱码"></a>让 CUBEMX 生成 UTF-8 文件，避免中文乱码</h2><p>添加系统环境变量：</p><ul><li>变量名：<code>JAVA_TOOL_OPTIONS</code></li><li>值 ：<code>-Dfile.encoding=UTF-8</code></li></ul><h2 id="ASCIi-艺术字体生成"><a href="#ASCIi-艺术字体生成" class="headerlink" title="ASCIi 艺术字体生成"></a>ASCIi 艺术字体生成</h2><p>[Text to ASCII Art Generator (TAAG) — 文本到 ASCII 艺术生成器 (TAAG) (patorjk.com)](<a href="http://patorjk.com/software/taag/#p=display&f=ANSI">http://patorjk.com/software/taag/#p=display&amp;f=ANSI</a> Shadow&amp;t&#x3D;Hello BUAA!)</p><img src="https://s2.loli.net/2024/04/15/U9JPuB1aLsN4xlM.png"/><img src="https://s2.loli.net/2024/04/15/ZPW4zdthVYUcOKw.png"/><img src="https://s2.loli.net/2024/04/15/3oTZ7FOsGNEvBkY.png"/><img src="https://s2.loli.net/2024/04/15/qUpZFhS5D2esOtI.png"/><img src="https://s2.loli.net/2024/04/15/akTeCogitbZXq4s.png"/><img src="https://s2.loli.net/2024/04/15/bhdHsMQWEAo9qZt.png"/><img src="https://s2.loli.net/2024/04/15/GQn8iJb3ZfeYD41.png"/>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>vscode</tag>
      
      <tag>stm32</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下C语言教程-李慧芹老师-第八章</title>
    <link href="/2024/04/12/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%85%AB%E7%AB%A0/"/>
    <url>/2024/04/12/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%85%AB%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sinlatansen/Linux-C-Notes">配套代码笔记仓库</a>。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E6%9E%84%E9%80%A0%E7%B1%BB%E5%9E%8B">构造类型</a><ul><li><a href="#%E7%BB%93%E6%9E%84%E4%BD%93">结构体</a><ul><li><a href="#%E4%BA%A7%E7%94%9F%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E6%84%8F%E4%B9%89">产生的原因及意义</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%8F%8F%E8%BF%B0">类型的描述</a></li><li><a href="#%E5%B5%8C%E5%A5%97%E5%AE%9A%E4%B9%89">嵌套定义</a></li><li><a href="#%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E5%8F%98%E9%87%8F%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%8A%E6%88%90%E5%91%98%E5%BC%95%E7%94%A8">定义变量（变量，数组，指针），初始化及成员引用</a></li><li><a href="#%E7%BB%93%E6%9E%84%E4%BD%93%E5%8D%A0%E7%94%A8%E7%9A%84%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F">结构体占用的内存空间大小</a></li><li><a href="#%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E5%80%BC%E5%9C%B0%E5%9D%80">函数传参（值，地址）</a></li></ul></li><li><a href="#%E5%85%B1%E7%94%A8%E4%BD%93">共用体</a><ul><li><a href="#%E4%BA%A7%E7%94%9F%E5%8F%8A%E6%84%8F%E4%B9%89">产生及意义</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E6%8F%8F%E8%BF%B0">类型描述</a></li><li><a href="#%E5%B5%8C%E5%A5%97%E5%AE%9A%E4%B9%89-1">嵌套定义</a></li><li><a href="#%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E5%8F%98%E9%87%8F%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%8A%E6%88%90%E5%91%98%E5%BC%95%E7%94%A8-1">定义变量（变量，数组，指针），初始化及成员引用</a></li><li><a href="#%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F">占用内存大小</a></li><li><a href="#%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E5%80%BC%E5%9C%B0%E5%9D%80-1">函数传参（值，地址）</a></li><li><a href="#%E4%BD%8D%E5%9F%9F">位域</a></li></ul></li><li><a href="#%E6%9E%9A%E4%B8%BE">枚举</a></li></ul></li></ul><h1 id="构造类型"><a href="#构造类型" class="headerlink" title="构造类型"></a>构造类型</h1><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="产生的原因及意义"><a href="#产生的原因及意义" class="headerlink" title="产生的原因及意义"></a>产生的原因及意义</h3><p>存放不同类型的数据到一起。</p><h3 id="类型的描述"><a href="#类型的描述" class="headerlink" title="类型的描述"></a>类型的描述</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> 结构体名</span><br><span class="hljs-class">&#123;</span><br>    数据类型 成员<span class="hljs-number">1</span>；<br>    数据类型 成员<span class="hljs-number">2</span>；<br>    ......<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="嵌套定义"><a href="#嵌套定义" class="headerlink" title="嵌套定义"></a>嵌套定义</h3><h3 id="定义变量（变量，数组，指针），初始化及成员引用"><a href="#定义变量（变量，数组，指针），初始化及成员引用" class="headerlink" title="定义变量（变量，数组，指针），初始化及成员引用"></a>定义变量（变量，数组，指针），初始化及成员引用</h3><p>成员引用： 变量名. 成员名，指针-&gt;成员名，(*指针).成员名</p><h3 id="结构体占用的内存空间大小"><a href="#结构体占用的内存空间大小" class="headerlink" title="结构体占用的内存空间大小"></a>结构体占用的内存空间大小</h3><h3 id="函数传参（值，地址）"><a href="#函数传参（值，地址）" class="headerlink" title="函数传参（值，地址）"></a>函数传参（值，地址）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NAMESIZE 32</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span>   i;<br>    <span class="hljs-type">char</span>  ch;<br>    <span class="hljs-type">float</span> f;<br>&#125; a =<br>    &#123;<br>        <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&#x27;a&#x27;</span>,<br>&#125;,<br>  b, c, *p, *q;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">simp_st</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span>   i;<br>    <span class="hljs-type">char</span>  ch;<br>    <span class="hljs-type">float</span> f;<br>    <span class="hljs-comment">// char ch1;</span><br>&#125;;   <span class="hljs-comment">// __attribute__((packed));</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student_st</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span>  id;<br>    <span class="hljs-type">char</span> name[NAMESIZE];<br>    <span class="hljs-comment">// struct birthday_st birth;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">birthday_st</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-type">int</span> year;<br>        <span class="hljs-type">int</span> month;<br>        <span class="hljs-type">int</span> day;<br>    &#125; birth;<br>    <span class="hljs-type">int</span> math;<br>    <span class="hljs-type">int</span> chinese;<br>&#125;;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> simp_st *b)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(b));<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// TYPE NAME = VALUE;</span><br><br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">simp_st</span>  <span class="hljs-title">a</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">simp_st</span> *<span class="hljs-title">p</span> =</span> &amp;a;<br><br>    <span class="hljs-comment">// func(a);</span><br><br>    func(p);<br><br><br><br><br>    <span class="hljs-comment">// printf(&quot;sizeof(point) = %d\n&quot;, sizeof(p));</span><br>    <span class="hljs-comment">// printf(&quot;sizeof(struct) = %d\n&quot;, sizeof(a));</span><br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// sizeof(point) = 8</span><br>    <span class="hljs-comment">// sizeof(struct) = 12</span><br><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student_st</span>  <span class="hljs-title">stu</span>    =</span> &#123;<span class="hljs-number">10011</span>, <span class="hljs-string">&quot;Alan&quot;</span>, &#123;<span class="hljs-number">2011</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>&#125;, <span class="hljs-number">98</span>, <span class="hljs-number">97</span>&#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student_st</span> *<span class="hljs-title">p</span>      =</span> &amp;stu;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student_st</span>  <span class="hljs-title">arr</span>[2] =</span> &#123;&#123;.name = <span class="hljs-string">&quot;Alan&quot;</span>&#125;, &#123;.name = <span class="hljs-string">&quot;John&quot;</span>&#125;&#125;;<br><br>    p = &amp;arr[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-comment">// struct student_st stu = &#123;.math = 98, .chinese = 97&#125;;</span><br><br>    <span class="hljs-comment">// printf(&quot;%d %s %d-%d-%d %d %d\n&quot;,</span><br>    <span class="hljs-comment">//        stu.id,</span><br>    <span class="hljs-comment">//        stu.name,</span><br>    <span class="hljs-comment">//        stu.birth.year,</span><br>    <span class="hljs-comment">//        stu.birth.month,</span><br>    <span class="hljs-comment">//        stu.birth.day,</span><br>    <span class="hljs-comment">//        stu.math,</span><br>    <span class="hljs-comment">//        stu.chinese);</span><br><br>    <span class="hljs-comment">// printf(&quot;%d %s %d-%d-%d %d %d\n&quot;,</span><br>    <span class="hljs-comment">//        p-&gt;id,</span><br>    <span class="hljs-comment">//        p-&gt;name,</span><br>    <span class="hljs-comment">//        p-&gt;birth.year,</span><br>    <span class="hljs-comment">//        p-&gt;birth.month,</span><br>    <span class="hljs-comment">//        p-&gt;birth.day,</span><br>    <span class="hljs-comment">//        p-&gt;math,</span><br>    <span class="hljs-comment">//        p-&gt;chinese);</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++, p++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>, p-&gt;name);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">simp_st</span> <span class="hljs-title">a</span> =</span> &#123;<span class="hljs-number">123</span>, <span class="hljs-number">456.789</span>, <span class="hljs-string">&#x27;a&#x27;</span>&#125;;<br>    a.i = <span class="hljs-number">112233</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %f %c&quot;</span>, a.i, a.f, a.ch);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>跳过</p></blockquote><h2 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h2><h3 id="产生及意义"><a href="#产生及意义" class="headerlink" title="产生及意义"></a>产生及意义</h3><h3 id="类型描述"><a href="#类型描述" class="headerlink" title="类型描述"></a>类型描述</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> 共用体名</span><br><span class="hljs-class">&#123;</span><br>  数据类型 成员名<span class="hljs-number">1</span>;<br>  数据类型 成员名<span class="hljs-number">2</span>;<br>  ......<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="嵌套定义-1"><a href="#嵌套定义-1" class="headerlink" title="嵌套定义"></a>嵌套定义</h3><h3 id="定义变量（变量，数组，指针），初始化及成员引用-1"><a href="#定义变量（变量，数组，指针），初始化及成员引用-1" class="headerlink" title="定义变量（变量，数组，指针），初始化及成员引用"></a>定义变量（变量，数组，指针），初始化及成员引用</h3><h3 id="占用内存大小"><a href="#占用内存大小" class="headerlink" title="占用内存大小"></a>占用内存大小</h3><h3 id="函数传参（值，地址）-1"><a href="#函数传参（值，地址）-1" class="headerlink" title="函数传参（值，地址）"></a>函数传参（值，地址）</h3><h3 id="位域"><a href="#位域" class="headerlink" title="位域"></a>位域</h3><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> 标识符</span><br><span class="hljs-class">&#123;</span><br>  成员<span class="hljs-number">1</span>;<br>  成员<span class="hljs-number">2</span>;<br>  成员<span class="hljs-number">3</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>李慧芹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下C语言教程-李慧芹老师-第七章</title>
    <link href="/2024/04/12/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E4%B8%83%E7%AB%A0/"/>
    <url>/2024/04/12/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E4%B8%83%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sinlatansen/Linux-C-Notes">配套代码笔记仓库</a>。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E5%87%BD%E6%95%B0">函数</a><ul><li><a href="#%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89">函数的定义</a></li><li><a href="#%E5%87%BD%E6%95%B0%E7%9A%84%E4%BC%A0%E5%8F%82">函数的传参</a></li><li><a href="#%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8">函数的调用</a><ul><li><a href="#%E5%B5%8C%E5%A5%97%E8%B0%83%E7%94%A8">嵌套调用</a></li><li><a href="#%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8">递归调用</a></li></ul></li><li><a href="#%E5%87%BD%E6%95%B0%E4%B8%8E%E6%95%B0%E7%BB%84">函数与数组</a><ul><li><a href="#%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84">一维数组</a></li><li><a href="#%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84">二维数组</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84">字符数组</a></li></ul></li><li><a href="#%E5%87%BD%E6%95%B0%E4%B8%8E%E6%8C%87%E9%92%88">函数与指针</a><ul><li><a href="#%E6%8C%87%E9%92%88%E5%87%BD%E6%95%B0">指针函数</a></li><li><a href="#%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88">函数指针</a></li><li><a href="#%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84">函数指针数组</a></li><li><a href="#%E6%8C%87%E5%90%91%E6%8C%87%E9%92%88%E5%87%BD%E6%95%B0%E7%9A%84%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84">指向指针函数的函数指针数组</a></li></ul></li></ul></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>数据类型  函数名 （ 【数据类型 形参名，数据类型 形参，…】 ）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argc = %d\n&quot;</span>, argc);<br>    <span class="hljs-comment">// 输出传入参数的个数</span><br><br>    <span class="hljs-comment">// for (int i = 0; i &lt; argc; i++) puts(argv[i]);</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; argv[i] != <span class="hljs-literal">NULL</span>; i++) <span class="hljs-built_in">puts</span>(argv[i]);<br><br>    <span class="hljs-comment">// printf(&quot;Hello!\n&quot;);</span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_hello</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-comment">// 主调函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    print_hello();<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">// 被调函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_hello</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello world!\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数的传参"><a href="#函数的传参" class="headerlink" title="函数的传参"></a>函数的传参</h2><p>值传递</p><p>地址传递</p><p>全局变量传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">print_value</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, a, b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// void swap(int i, int j)</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     int tmp;</span><br><br><span class="hljs-comment">//     tmp = i;</span><br><span class="hljs-comment">//     i   = j;</span><br><span class="hljs-comment">//     j   = tmp;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *p, <span class="hljs-type">int</span> *q)</span><br>&#123;<br>    <span class="hljs-type">int</span> tmp;<br><br>    tmp = *p;<br>    *p  = *q;<br>    *q  = tmp;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">3</span>, j = <span class="hljs-number">5</span>;<br><br>    <span class="hljs-comment">// swap(i, j);</span><br>    <span class="hljs-comment">// 实际没有交换</span><br><br>    swap(&amp;i, &amp;j);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, i, j);<br><br><br>    <span class="hljs-comment">// print_value(i, j);</span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><h3 id="嵌套调用"><a href="#嵌套调用" class="headerlink" title="嵌套调用"></a>嵌套调用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span><br>&#123;<br>    <span class="hljs-type">int</span> tmp;<br>    tmp = a &gt; b ? a : b;<br><br>    <span class="hljs-keyword">return</span> tmp &gt; c ? tmp : c;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span><br>&#123;<br>    <span class="hljs-type">int</span> tmp;<br>    tmp = a &lt; b ? a : b;<br><br>    <span class="hljs-keyword">return</span> tmp &lt; c ? tmp : c;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">dist</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> max(a, b, c) - min(a, b, c);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">3</span>, b = <span class="hljs-number">5</span>, c = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;result = %d\n&quot;</span>, dist(a, b, c));<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">c</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]begin!\n&quot;</span>, __FUNCTION__);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]end!\n&quot;</span>, __FUNCTION__);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]begin!\n&quot;</span>, __FUNCTION__);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]call c()!\n&quot;</span>, __FUNCTION__);<br>    c();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]c() returned!\n&quot;</span>, __FUNCTION__);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]end!\n&quot;</span>, __FUNCTION__);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]begin!\n&quot;</span>, __FUNCTION__);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]call b()!\n&quot;</span>, __FUNCTION__);<br>    b();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]b() returned!\n&quot;</span>, __FUNCTION__);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]end!\n&quot;</span>, __FUNCTION__);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]begin!\n&quot;</span>, __FUNCTION__);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]call a()!\n&quot;</span>, __FUNCTION__);<br>    a();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]a() returned!\n&quot;</span>, __FUNCTION__);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]end!\n&quot;</span>, __FUNCTION__);<br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// [main]begin!</span><br>    <span class="hljs-comment">// [main]call a()!</span><br>    <span class="hljs-comment">// [a]begin!</span><br>    <span class="hljs-comment">// [a]call b()!</span><br>    <span class="hljs-comment">// [b]begin!</span><br>    <span class="hljs-comment">// [b]call c()!</span><br>    <span class="hljs-comment">// [c]begin!</span><br>    <span class="hljs-comment">// [c]end!</span><br>    <span class="hljs-comment">// [b]c() returned!</span><br>    <span class="hljs-comment">// [b]end!</span><br>    <span class="hljs-comment">// [a]b() returned!</span><br>    <span class="hljs-comment">// [a]end!</span><br>    <span class="hljs-comment">// [main]a() returned!</span><br>    <span class="hljs-comment">// [main]end!</span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数与数组"><a href="#函数与数组" class="headerlink" title="函数与数组"></a>函数与数组</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[N] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-type">int</span> *p = a;<br></code></pre></td></tr></table></figure><table><thead><tr><th>传参</th><th>类型</th></tr></thead><tbody><tr><td>a</td><td>int *</td></tr><tr><td>*a</td><td>int</td></tr><tr><td>a[0]</td><td>int</td></tr><tr><td>&amp;a[3]</td><td>int *</td></tr><tr><td>p[i]</td><td>int</td></tr><tr><td>p</td><td>int *</td></tr><tr><td>*p</td><td>int</td></tr><tr><td>p+1</td><td>int*</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_arr</span><span class="hljs-params">(<span class="hljs-type">int</span> *p, <span class="hljs-type">int</span> size)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s:%d\n&quot;</span>, __FUNCTION__, <span class="hljs-keyword">sizeof</span>(p));<br>    <span class="hljs-comment">// out: 8 指针</span><br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; size; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *(p + i));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span> *p, <span class="hljs-type">int</span> size)</span><br>&#123;<br>    <span class="hljs-type">int</span> *tmp;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size / <span class="hljs-number">2</span>; i++)<br>    &#123;<br>        *tmp                = *(p + i);<br>        *(p + i)            = *(p + size - <span class="hljs-number">1</span> - i);<br>        *(p + size - <span class="hljs-number">1</span> - i) = *tmp;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;;<br><br>    <span class="hljs-comment">// printf(&quot;%s:%d\n&quot;, __FUNCTION__, sizeof(a));</span><br>    <span class="hljs-comment">// out: 20 5*4</span><br><br>    <span class="hljs-comment">// print_arr(a, sizeof(a) / sizeof(*a));</span><br><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(*a); i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    func(a, <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(*a));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(*a); i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[M][N]=&#123;...&#125;;<br><br><span class="hljs-type">int</span> *p = *a;<br><span class="hljs-comment">// p 是指向数组第一行的第一个元素的指针，等价于 &amp;a[0][0]。</span><br><span class="hljs-comment">// 列指针</span><br><br><span class="hljs-type">int</span> (*q)[N] = a;<br><span class="hljs-comment">// q 是指向由 N 个 int 组成的数组的指针，即指向二维数组每一行的指针</span><br><span class="hljs-comment">// 行指针</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>传参</th><th>类型</th></tr></thead><tbody><tr><td><code>a[i][j]</code></td><td>int</td></tr><tr><td><code>*(a+i)+j</code></td><td>int *</td></tr><tr><td><code>a[i]+j</code>    等同于*(a+i)+j</td><td><del>int</del>  正确答案： int *</td></tr><tr><td><code>p[i]</code></td><td><del>int [N] *</del> 正确答案： int</td></tr><tr><td><code>*p</code></td><td><del>int [N] *</del> 正确答案： int</td></tr><tr><td><code>q[i][j]</code></td><td>int</td></tr><tr><td><code>*q</code></td><td><del>int [N] *</del>   正确答案： int *</td></tr><tr><td><code>q</code></td><td>int (*) [N]</td></tr><tr><td><code>p+3</code></td><td><del>int [N] *</del>  正确答案： int *</td></tr><tr><td><code>q+2</code></td><td><del>int [N] *</del>   正确答案： int (*) [N]</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> M 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 4</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_douarr</span><span class="hljs-params">(<span class="hljs-type">int</span> *p, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i, j;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *(p + i));<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// void print_douarr1(int (*p)[N], int m, int n)</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_douarr1</span><span class="hljs-params">(<span class="hljs-type">int</span> (*p)[N], <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(p)=%d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(p));<br><br>    <span class="hljs-type">int</span> i, j;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>        &#123;<br>            <span class="hljs-comment">// printf(&quot;%4d&quot;, *(*(p + i) + j));</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, p[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">float</span> <span class="hljs-title function_">average_score</span><span class="hljs-params">(<span class="hljs-type">int</span> *p, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">float</span> sum = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        sum += *(p + i);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> sum / n;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">find_num</span><span class="hljs-params">(<span class="hljs-type">int</span> (*p)[N], <span class="hljs-type">int</span> num)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *(*(p + num) + i));<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i, j;<br>    <span class="hljs-type">int</span> a[M][N] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>&#125;;<br><br>    <span class="hljs-type">float</span> ave;<br><br>    <span class="hljs-comment">// ave = average_score(*a, M * N);</span><br>    <span class="hljs-comment">// printf(&quot;ave = %f\n&quot;, ave);</span><br><br>    find_num(a, <span class="hljs-number">2</span>);<br><br><br>    <span class="hljs-comment">// print_douarr(&amp;a[0][0], M * N);</span><br><br>    <span class="hljs-comment">// printf(&quot;sizeof(a)=%d\n&quot;, sizeof(a));</span><br>    <span class="hljs-comment">// print_douarr1(a, M, N);</span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-type">char</span> *<span class="hljs-title function_">mystrcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src)</span><br>&#123;<br>    <span class="hljs-type">char</span> *ret = dest;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> != dest &amp;&amp; <span class="hljs-literal">NULL</span> != src)<br>        <span class="hljs-keyword">while</span> ((*dest++ = *src++) != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>            ;<br><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">char</span> *<span class="hljs-title function_">mystrncpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src, <span class="hljs-type">size_t</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n &amp;&amp; (dest[i] = src[i]); i++)<br>        ;<br><br>    <span class="hljs-keyword">for</span> (; i &lt; n; i++)<br>        dest[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    <span class="hljs-keyword">return</span> dest;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> str1[] = <span class="hljs-string">&quot;helloworld&quot;</span>;<br>    <span class="hljs-type">char</span> str2[<span class="hljs-number">128</span>];<br><br>    <span class="hljs-comment">// mystrcpy(str2, str1);</span><br><br>    mystrncpy(str2, str1, <span class="hljs-number">5</span>);<br><br>    <span class="hljs-built_in">puts</span>(str2);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数与指针"><a href="#函数与指针" class="headerlink" title="函数与指针"></a>函数与指针</h2><h3 id="指针函数"><a href="#指针函数" class="headerlink" title="指针函数"></a>指针函数</h3><p>是一个<strong>函数</strong>，返回值是<strong>指针</strong>。</p><p>返回值  *  函数名  （形参）</p><p>如：<code>int * fun(int);</code></p><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>是一个<strong>指针</strong>，指向<strong>函数</strong>。</p><p>类型  （* 指针名） （形参）</p><p>如： <code>int (*p)(int);</code></p><h3 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h3><p>由<strong>函数指针</strong>组成的数组。</p><p>类型  （*数组名【下标】） （形参）</p><p>如： <code>int (*arr[N])(int);</code></p><h3 id="指向指针函数的函数指针数组"><a href="#指向指针函数的函数指针数组" class="headerlink" title="指向指针函数的函数指针数组"></a>指向指针函数的函数指针数组</h3><p><code>int *(*funcp[N])(int)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> a - b;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">3</span>, b = <span class="hljs-number">5</span>;<br>    <span class="hljs-type">int</span> ret;<br>    <span class="hljs-comment">// int (*p)(int, int);</span><br>    <span class="hljs-comment">// int (*q)(int, int);</span><br><br>    <span class="hljs-type">int</span> (*funcp[<span class="hljs-number">2</span>])(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>);<br><br>    <span class="hljs-comment">// p = add;</span><br>    <span class="hljs-comment">// q = sub;</span><br><br>    funcp[<span class="hljs-number">0</span>] = add;<br>    funcp[<span class="hljs-number">1</span>] = sub;<br><br>    <span class="hljs-comment">// ret = p(a, b);</span><br>    <span class="hljs-comment">// ret = q(a, b);</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>    &#123;<br>        ret = funcp[i](a, b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret = %d\n&quot;</span>, ret);<br>    &#125;<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>李慧芹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下C语言教程-李慧芹老师-第六章</title>
    <link href="/2024/04/11/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%85%AD%E7%AB%A0/"/>
    <url>/2024/04/11/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%85%AD%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sinlatansen/Linux-C-Notes">配套代码笔记仓库</a>。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E6%8C%87%E9%92%88">指针</a><ul><li><a href="#%E5%8F%98%E9%87%8F%E4%B8%8E%E5%9C%B0%E5%9D%80">变量与地址</a></li><li><a href="#%E6%8C%87%E9%92%88%E4%B8%8E%E6%8C%87%E9%92%88%E5%8F%98%E9%87%8F">指针与指针变量</a></li><li><a href="#%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E4%B8%8E%E9%97%B4%E6%8E%A5%E8%AE%BF%E9%97%AE">直接访问与间接访问</a></li><li><a href="#%E7%A9%BA%E6%8C%87%E9%92%88%E4%B8%8E%E9%87%8E%E6%8C%87%E9%92%88">空指针与野指针</a></li><li><a href="#%E7%A9%BA%E7%B1%BB%E5%9E%8B">空类型</a></li><li><a href="#%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E4%B9%A6%E5%86%99%E8%A7%84%E5%88%99">定义与初始化的书写规则</a></li><li><a href="#%E6%8C%87%E9%92%88%E8%BF%90%E7%AE%97">指针运算</a></li><li><a href="#%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84">指针与数组</a><ul><li><a href="#%E6%8C%87%E9%92%88%E4%B8%8E%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84">指针与一维数组</a></li><li><a href="#%E6%8C%87%E9%92%88%E4%B8%8E%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84">指针与二维数组</a></li><li><a href="#%E6%8C%87%E9%92%88%E4%B8%8E%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84">指针与字符数组</a></li></ul></li><li><a href="#const-%E4%B8%8E%E6%8C%87%E9%92%88">const 与指针</a></li><li><a href="#%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E4%B8%8E%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88">指针数组与数组指针</a></li><li><a href="#%E5%A4%9A%E7%BA%A7%E6%8C%87%E9%92%88">多级指针</a></li></ul></li></ul><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="变量与地址"><a href="#变量与地址" class="headerlink" title="变量与地址"></a>变量与地址</h2><p><code>int i=100;</code></p><p><code>i</code>是变量名，也就是地址。</p><p><code>100</code>是存放在这个地址的变量的值。</p><h2 id="指针与指针变量"><a href="#指针与指针变量" class="headerlink" title="指针与指针变量"></a>指针与指针变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>   i = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span>  *p = &amp;i;<br><span class="hljs-type">int</span> **q = &amp;p;<br></code></pre></td></tr></table></figure><p>p是一个指针变量，他所存放的值是指针，指向另一个变量<code>i</code>的地址。</p><h2 id="直接访问与间接访问"><a href="#直接访问与间接访问" class="headerlink" title="直接访问与间接访问"></a>直接访问与间接访问</h2><p>同样对于上面那个存放值为<code>100</code>的变量，既可以通过<code>i</code>直接访问，也可以通过<code>*p, **q</code>来间接访问。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-type">int</span> *p = &amp;i;<br>    <span class="hljs-comment">// 相当于</span><br>    <span class="hljs-comment">// int *p;</span><br>    <span class="hljs-comment">// p = &amp;i;</span><br><br>    <span class="hljs-type">int</span> **q = &amp;p;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d\n&quot;</span>, i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;i = %d\n&quot;</span>, &amp;i);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p = %d\n&quot;</span>, p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;p = %d\n&quot;</span>, &amp;p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p = %d\n&quot;</span>, *p);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;q = %d\n&quot;</span>, q);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*q = %d\n&quot;</span>, *q);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;**q = %d\n&quot;</span>, **q);<br>    <span class="hljs-comment">// i = 1</span><br>    <span class="hljs-comment">// &amp;i = 1175115956</span><br>    <span class="hljs-comment">// p = 1175115956</span><br>    <span class="hljs-comment">// &amp;p = 1175115944</span><br>    <span class="hljs-comment">// *p = 1</span><br>    <span class="hljs-comment">// q = 1175115944</span><br>    <span class="hljs-comment">// *q = 1175115956</span><br>    <span class="hljs-comment">// **q = 1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-type">float</span>  *q;<br>    <span class="hljs-type">double</span> *d;<br>    <span class="hljs-type">char</span>   *c;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(i));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(p));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(q));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(d));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(c));<br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// 4</span><br>    <span class="hljs-comment">// 8</span><br>    <span class="hljs-comment">// 8</span><br>    <span class="hljs-comment">// 8</span><br>    <span class="hljs-comment">// 8</span><br>    <span class="hljs-comment">/* 指针在某一个平台所占的大小是一样的 */</span><br>    <span class="hljs-comment">/* 其指向的类型的空间的大小，由指针的类型决定 */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d\n&quot;</span>, i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;i = %d\n&quot;</span>, &amp;i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p = %d\n&quot;</span>, p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;p = %d\n&quot;</span>, &amp;p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p = %d\n&quot;</span>, *p);<br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// i = 1</span><br>    <span class="hljs-comment">// &amp;i = 1343894748</span><br>    <span class="hljs-comment">// p = 1343894748</span><br>    <span class="hljs-comment">// &amp;p = 1343894736</span><br>    <span class="hljs-comment">// *p = 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="空指针与野指针"><a href="#空指针与野指针" class="headerlink" title="空指针与野指针"></a>空指针与野指针</h2><ul><li>野指针：<code>int *p = 0x14532534</code>，不确定这个地址的情况，盲目的指过去，那么读或者写都是非法的。</li><li>空指针：<code>int *p = NULL</code>，避免野指针。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> *p;<br><br>    *p = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p --&gt; %d\n&quot;</span>, p, *p);<br>    <span class="hljs-comment">// 有的编译器报段错误，有的编译器能输出</span><br>    <span class="hljs-comment">// 0x7feb1910dad0 -- &gt; 420327424</span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="空类型"><a href="#空类型" class="headerlink" title="空类型"></a>空类型</h2><p><code>void *q</code></p><p>万能类型。</p><h2 id="定义与初始化的书写规则"><a href="#定义与初始化的书写规则" class="headerlink" title="定义与初始化的书写规则"></a>定义与初始化的书写规则</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *p;<br><span class="hljs-type">int</span>* p;<br></code></pre></td></tr></table></figure><h2 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h2><p><code>&amp;</code>    <code> *</code>     关系运算     <code>++</code>     <code>--</code></p><h2 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h2><h3 id="指针与一维数组"><a href="#指针与一维数组" class="headerlink" title="指针与一维数组"></a>指针与一维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// TYPE NAME = VALUE;</span><br><br><span class="hljs-comment">// a[i]value: a[i] = *(a+i) = *(p+i) = p[i]</span><br><span class="hljs-comment">// &amp;a[i]: &amp;a[i] = a+i = p+i = &amp;p[i]</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><br>    <span class="hljs-type">int</span>  a[] = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-type">int</span>  y;<br>    <span class="hljs-type">int</span> *p = &amp;a[<span class="hljs-number">1</span>];<br><br>    y = (*--p)++;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;y = %d\n&quot;</span>, y);         <span class="hljs-comment">// out: y = 5</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a[0] = %d\n&quot;</span>, a[<span class="hljs-number">0</span>]);   <span class="hljs-comment">// out: a[0] = 6</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-type">int</span> *p = (<span class="hljs-type">int</span>[<span class="hljs-number">3</span>])&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-comment">// 只是不要数组名了</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p --&gt; %d\n&quot;</span>, &amp;p[i], p[i]);<br>    &#125;<br>    <span class="hljs-comment">// 0x7ffd12681964 --&gt; 1</span><br>    <span class="hljs-comment">// 0x7ffd12681968 --&gt; 2</span><br>    <span class="hljs-comment">// 0x7ffd1268196c --&gt; 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-type">int</span>  a[<span class="hljs-number">3</span>];<br>    <span class="hljs-type">int</span> *p = a;<br>    <span class="hljs-type">int</span>  i;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(*a); i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p --&gt; %d\n&quot;</span>, &amp;a[i], a[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(*a); i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, p++);<br>    &#125;<br><br>    p = a;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(*a); i++, p++)<br>    &#123;<br>        <span class="hljs-comment">// printf(&quot;%d\n&quot;, *p++);</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p --&gt; %d\n&quot;</span>, p, *p);<br>    &#125;<br><br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// 0x7ffdad36c478 --&gt; -563487456</span><br>    <span class="hljs-comment">// 0x7ffdad36c47c --&gt; 32710</span><br>    <span class="hljs-comment">// 0x7ffdad36c480 --&gt; 0</span><br>    <span class="hljs-comment">// 1</span><br>    <span class="hljs-comment">// 2</span><br>    <span class="hljs-comment">// 3</span><br>    <span class="hljs-comment">// 0x7ffdad36c478 --&gt; 1</span><br>    <span class="hljs-comment">// 0x7ffdad36c47c --&gt; 2</span><br>    <span class="hljs-comment">// 0x7ffdad36c480 --&gt; 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-type">int</span> a[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-type">int</span> i;<br><br>    <span class="hljs-type">int</span> *p = a;<br><br>    p++;   <span class="hljs-comment">// p从a[0]挪到a[1]</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p,%p\n&quot;</span>, p, p + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// *a相当于*(a+0)相当于a[0]</span><br>    <span class="hljs-comment">// for (i = 0; i &lt; sizeof(a) / sizeof(a[0]); i++)</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(*a); i++)<br>    &#123;<br>        <span class="hljs-comment">// printf(&quot;%p--&gt; %d\n&quot;, &amp;a[i], a[i]);</span><br>        <span class="hljs-comment">// printf(&quot;%p--&gt; %d\n&quot;, a + i, a[i]);</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p--&gt; %d\n&quot;</span>, p + i, *(p + i));<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指针与二维数组"><a href="#指针与二维数组" class="headerlink" title="指针与二维数组"></a>指针与二维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span>  a[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br>    <span class="hljs-type">int</span>  i, j;<br>    <span class="hljs-type">int</span> *p     = *a;<br>    <span class="hljs-type">int</span>(*q)[<span class="hljs-number">3</span>] = a;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-comment">//(W) int *p = a;</span><br>    <span class="hljs-comment">// 报错，不兼容</span><br>    <span class="hljs-comment">// 因为a是行指针，不是int类型指针</span><br><br>    <span class="hljs-comment">// int *p = *a;</span><br>    *p = &amp;a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br><br>    <span class="hljs-comment">// for (i = 0; i &lt; 6; i++, p++)</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>    &#123;<br>        <span class="hljs-comment">// printf(&quot;%d &quot;, *p);</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 1</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p %p\n&quot;</span>, a, a + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p %p\n\n&quot;</span>, q, q + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)<br>        &#123;<br>            <span class="hljs-comment">// printf(&quot;%p --&gt; %d &quot;, &amp;a[i][j], a[i][j]);</span><br>            <span class="hljs-comment">// printf(&quot;%p --&gt; %d &quot;, *(a + i) + j, *(*(a + i) + j));</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p --&gt; %d &quot;</span>, *(q + i) + j, *(*(q + i) + j));<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指针与字符数组"><a href="#指针与字符数组" class="headerlink" title="指针与字符数组"></a>指针与字符数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><br>    <span class="hljs-type">char</span> *str = <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(str), <span class="hljs-built_in">strlen</span>(str));<br>    <span class="hljs-comment">// out: 8 5</span><br><br>    <span class="hljs-comment">//(F) strcpy(str, &quot;world&quot;);</span><br>    <span class="hljs-comment">// 这里企图把 &quot;world&quot; 覆盖 &quot;hello&quot;这个串常量</span><br><br>    str = <span class="hljs-string">&quot;world&quot;</span>;<br><br>    <span class="hljs-built_in">puts</span>(str);<br><br>    <span class="hljs-comment">// char str[] = &quot;hello&quot;;</span><br><br>    <span class="hljs-comment">// printf(&quot;%d %d\n&quot;, sizeof(str), strlen(str));</span><br>    <span class="hljs-comment">// out :6 5</span><br><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-comment">// str[6]</span><br><br>    <span class="hljs-comment">//(F) str = &quot;world&quot;;</span><br>    <span class="hljs-built_in">strcpy</span>(str, <span class="hljs-string">&quot;world&quot;</span>);<br><br>    <span class="hljs-built_in">puts</span>(str);<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;I love china!&quot;</span>;<br><br>    <span class="hljs-type">char</span> *p = str + <span class="hljs-number">7</span>;<br><br>    <span class="hljs-built_in">puts</span>(str);<br>    <span class="hljs-built_in">puts</span>(p);<br>    <span class="hljs-comment">// I love china!</span><br>    <span class="hljs-comment">// china!</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="const-与指针"><a href="#const-与指针" class="headerlink" title="const 与指针"></a>const 与指针</h2><ul><li><p>常量指针：<strong>指向常量的指针</strong></p><p>const修饰*p，指针指向的值不能变</p></li><li><p>指针常量：<strong>这个指针是一个常量</strong></p><p>const修饰指针，指针指向不能变</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *   const int a;</span><br><span class="hljs-comment"> *   int const a;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   常量指针</span><br><span class="hljs-comment"> *   const int *p;</span><br><span class="hljs-comment"> *   int const *p;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   指针常量</span><br><span class="hljs-comment"> *   int *const p;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   const int *const p;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PI 3.14</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">100</span>;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> *<span class="hljs-type">const</span> p = &amp;i;<br><br>    <span class="hljs-comment">//(F) p = &amp;j;</span><br><br>    <span class="hljs-comment">//(F) *p = 10;</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-type">int</span> *<span class="hljs-type">const</span> p = &amp;i;<br><br>    <span class="hljs-comment">//(T) *p = 10;</span><br><br>    <span class="hljs-comment">//(F) p = &amp;j;</span><br>    <span class="hljs-comment">// [main][~/workspace/Linux-C-Notes/Chapter6]$ make const</span><br>    <span class="hljs-comment">// cc     const.c   -o const</span><br>    <span class="hljs-comment">// const.c: In function ‘main’:</span><br>    <span class="hljs-comment">// const.c:29:7: error: assignment of read-only variable ‘p’</span><br>    <span class="hljs-comment">//    29 |     p = &amp;j;</span><br>    <span class="hljs-comment">//       |       ^</span><br>    <span class="hljs-comment">// make: *** [&lt;builtin&gt;: const] Error 1</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d\n&quot;</span>, *p);<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">// 常量指针</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> *p = &amp;i;<br><br>    <span class="hljs-comment">//(T) i = 2;</span><br>    <span class="hljs-comment">// 直接用i改还是可以改成功的</span><br><br>    <span class="hljs-comment">//(F) *p = 2;</span><br><br>    <span class="hljs-comment">//(T) p = &amp;j;</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d\n&quot;</span>, i);<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">float</span> pi = <span class="hljs-number">3.14</span>;<br>    <span class="hljs-comment">// const 将变量常量化，相比于宏，多了检查语法</span><br><br>    <span class="hljs-comment">//(F) pi = 3.14159;</span><br><br>    <span class="hljs-comment">// float *p = &amp;pi;</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">float</span> *p = &amp;pi;<br><br>    <span class="hljs-comment">// *p = 3.14159;</span><br>    <span class="hljs-comment">// [main][~/workspace/Linux-C-Notes/Chapter6]$ make const</span><br>    <span class="hljs-comment">// cc     const.c   -o const</span><br>    <span class="hljs-comment">// const.c: In function ‘main’:</span><br>    <span class="hljs-comment">// const.c:28:16: warning: initialization discards ‘const’ qualifier from</span><br>    <span class="hljs-comment">// pointer target type [-Wdiscarded-qualifiers]</span><br>    <span class="hljs-comment">//    28 |     float *p = &amp;pi;</span><br>    <span class="hljs-comment">//       |</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="指针数组与数组指针"><a href="#指针数组与数组指针" class="headerlink" title="指针数组与数组指针"></a>指针数组与数组指针</h2><ul><li><p>数组指针：指向数组的<strong>指针</strong>。</p><p>【存储类型】 数据类型 （*指针名）【下标】 &#x3D; 值</p><p>如：<code>int (*p)[3];</code>  看成  <code>int[3] *p;</code></p></li><li><p>指针数组：</p><p>【存储类型】 数据类型 * 数组名【长度】</p><p>如：<code>int *arr[3];</code> 看成 <code>int *[3] arr;</code></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> *name[<span class="hljs-number">5</span>] = &#123;<span class="hljs-string">&quot;Follow me&quot;</span>, <span class="hljs-string">&quot;Basic&quot;</span>, <span class="hljs-string">&quot;Great&quot;</span>, <span class="hljs-string">&quot;Fortran&quot;</span>, <span class="hljs-string">&quot;Computer&quot;</span>&#125;;<br>    <span class="hljs-comment">// 指针数组</span><br>    <span class="hljs-type">int</span>   i, j, k;<br>    <span class="hljs-type">char</span> *tmp;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span> - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        k = i;<br>        <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(name[k], name[j]) &gt; <span class="hljs-number">0</span>)<br>                k = j;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (k != j)<br>        &#123;<br>            tmp     = name[i];<br>            name[i] = name[k];<br>            name[k] = tmp;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(name[i]);<br>    &#125;<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h2>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>李慧芹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一款线程安全的FreeRTOS（cmsis_os2）的日志调试库</title>
    <link href="/2024/04/01/%E4%B8%80%E6%AC%BE%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84FreeRTOS%EF%BC%88cmsis_os2%EF%BC%89%E7%9A%84%E6%97%A5%E5%BF%97%E8%B0%83%E8%AF%95%E5%BA%93/"/>
    <url>/2024/04/01/%E4%B8%80%E6%AC%BE%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84FreeRTOS%EF%BC%88cmsis_os2%EF%BC%89%E7%9A%84%E6%97%A5%E5%BF%97%E8%B0%83%E8%AF%95%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="DBG"><a href="#DBG" class="headerlink" title="DBG"></a>DBG</h1><p>一款线程安全的 FreeRTOS（cmsis_os2）的日志调试库，基于 STM32F4_HAL。</p><p><a href="https://github.com/sinlatansen/DBG">仓库地址</a>。</p><img src="https://s2.loli.net/2024/04/01/Uj1gPw4F6oLcqzK.png"/><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><ol><li>在<code>uart.c</code>中重写<code>fputc</code>函数。</li><li>在系统初始化阶段调用<code>InitLogSystem();</code>。</li><li>在<code>DBG.h</code>中配置参数：<ul><li><code>COLOR</code>：是否开启彩色</li><li><code>CURRENT_LOG_LEVEL</code>：调整日志等级</li></ul></li><li>如同使用<code>printf</code>一样使用<code>DBG, DBGI, DBGW, DBGE</code>，Just enjoy it！: )</li></ol><p>[note type&#x3D;”info flat”]如果不想使用串口 1 或者是别的 STM32 型号，可以进行简单的修改。FreeRTOS 部分通用。[&#x2F;note]</p>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>stm32</tag>
      
      <tag>freertos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下C语言教程-李慧芹老师-第五章</title>
    <link href="/2024/04/01/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E4%BA%94%E7%AB%A0/"/>
    <url>/2024/04/01/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sinlatansen/Linux-C-Notes">配套代码笔记仓库</a>。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E6%95%B0%E7%BB%84">数组</a><ul><li><a href="#%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84">一维数组</a><ul><li><a href="#%E7%BB%83%E4%B9%A0%E9%83%A8%E5%88%86">练习部分</a><ul><li><a href="#%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E5%89%8D10%E9%A1%B9">斐波那契数列前10项</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E6%8E%92%E5%BA%8F">数据排序</a><ul><li><a href="#%E5%86%92%E6%B3%A1">冒泡</a></li><li><a href="#%E9%80%89%E6%8B%A9%E6%B3%95">选择法</a></li></ul></li><li><a href="#%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2">进制转换</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%B3%95%E6%B1%82%E8%B4%A8%E6%95%B0">删除法求质数</a></li></ul></li></ul></li><li><a href="#%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84">二维数组</a><ul><li><a href="#%E7%BB%83%E4%B9%A0%E9%83%A8%E5%88%86-1">练习部分</a><ul><li><a href="#%E8%A1%8C%E5%88%97%E4%BA%92%E6%8D%A2">行列互换</a></li><li><a href="#%E6%B1%82%E6%9C%80%E5%A4%A7%E5%80%BC%E5%8F%8A%E5%85%B6%E6%89%80%E5%9C%A8%E4%BD%8D%E7%BD%AE">求最大值及其所在位置</a></li><li><a href="#%E6%B1%82%E5%90%84%E8%A1%8C%E4%B8%8E%E5%90%84%E5%88%97%E7%9A%84%E5%92%8C">求各行与各列的和</a></li><li><a href="#%E7%9F%A9%E9%98%B5%E4%B9%98%E7%A7%AF">矩阵乘积</a></li></ul></li></ul></li><li><a href="#%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84">字符数组</a><ul><li><a href="#%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0">常用函数</a></li><li><a href="#%E7%BB%83%E4%B9%A0%E9%83%A8%E5%88%86-2">练习部分</a><ul><li><a href="#%E5%8D%95%E8%AF%8D%E8%AE%A1%E6%95%B0">单词计数</a></li></ul></li></ul></li><li><a href="#%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84">多维数组</a></li></ul></li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>构造类型之一，连续存放。</p><blockquote><p>[!warning]</p><p>时间关系，大量的练习题，没有做笔记，只记录了题目。自己思考加看课程足矣。</p></blockquote><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><ol><li><p>定义</p><p>【存储类型】 数据类型 标识符 【下标】</p></li><li><p>初始化</p><ul><li>不初始化</li><li>全部初始化</li><li>部分初始化</li><li><code>static</code></li></ul></li><li><p>元素引用</p><p>数组名【下标】</p></li><li><p>数组名</p><p>数组名是表示地址的<strong>常量</strong>，也是数组的起始位置。</p></li><li><p>数组越界</p></li></ol><h3 id="练习部分"><a href="#练习部分" class="headerlink" title="练习部分"></a>练习部分</h3><h4 id="斐波那契数列前10项"><a href="#斐波那契数列前10项" class="headerlink" title="斐波那契数列前10项"></a>斐波那契数列前10项</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">fibonacci</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> fib[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; <span class="hljs-keyword">sizeof</span>(fib) / <span class="hljs-keyword">sizeof</span>(fib[<span class="hljs-number">0</span>]); i++)<br>    &#123;<br>        fib[i] = fib[i - <span class="hljs-number">2</span>] + fib[i - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(fib) / <span class="hljs-keyword">sizeof</span>(fib[<span class="hljs-number">0</span>]); i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fib[%d] = %d\n&quot;</span>, i, fib[i]);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-keyword">sizeof</span>(fib) / <span class="hljs-keyword">sizeof</span>(fib[<span class="hljs-number">0</span>]) - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> tmp;<br><br>    <span class="hljs-keyword">while</span> (i &lt; j)<br>    &#123;<br>        tmp = fib[i];<br>        fib[i] = fib[j];<br>        fib[j] = tmp;<br><br>        i++;<br>        j--;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(fib) / <span class="hljs-keyword">sizeof</span>(fib[<span class="hljs-number">0</span>]); i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fib[%d] = %d\n&quot;</span>, i, fib[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="数据排序"><a href="#数据排序" class="headerlink" title="数据排序"></a>数据排序</h4><h5 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 10</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">sort1</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> a[N] = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">45</span>, <span class="hljs-number">30</span>, <span class="hljs-number">98</span>, <span class="hljs-number">67</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">68</span>, <span class="hljs-number">11</span>&#125;;<br>    <span class="hljs-type">int</span> tmp;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (N - <span class="hljs-number">1</span>); i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; N - <span class="hljs-number">1</span> - i; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[j] &gt; a[j + <span class="hljs-number">1</span>])<br>            &#123;<br>                tmp = a[j];<br>                a[j] = a[j + <span class="hljs-number">1</span>];<br>                a[j + <span class="hljs-number">1</span>] = tmp;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="选择法"><a href="#选择法" class="headerlink" title="选择法"></a>选择法</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">sort2</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> a[N] = &#123;<span class="hljs-number">23</span>, <span class="hljs-number">45</span>, <span class="hljs-number">90</span>, <span class="hljs-number">76</span>, <span class="hljs-number">13</span>, <span class="hljs-number">55</span>, <span class="hljs-number">76</span>, <span class="hljs-number">45</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>&#125;;<br>    <span class="hljs-type">int</span> i, j, k, tmp;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        k = i;<br>        <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt; N; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[j] &lt; a[k])<br>                k = j;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i != k)<br>        &#123;<br>            tmp = a[i];<br>            a[i] = a[k];<br>            a[k] = tmp;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">base_convert</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> num, base;<br>    <span class="hljs-type">int</span> n[<span class="hljs-number">128</span>];<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter the converted num:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter the base:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;base);<br><br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        n[i] = num % base;<br>        num = num / base;<br>        i++;<br>    &#125; <span class="hljs-keyword">while</span> (num != <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">for</span> (i--; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n[i] &gt;= <span class="hljs-number">10</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, n[i] - <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;A&#x27;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, n[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除法求质数"><a href="#删除法求质数" class="headerlink" title="删除法求质数"></a>删除法求质数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">primer</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> primer[<span class="hljs-number">1001</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> i, j;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">1001</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = i * <span class="hljs-number">2</span>; j &lt; <span class="hljs-number">1001</span>; j += i)<br>            primer[j] = <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">1001</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (primer[i] == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d is a primer.\n&quot;</span>, i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><ol><li><p>定义，初始化</p><p>【存储类型】 数据类型  标识符  【行下标】 【列下标】</p><blockquote><p>[!note]</p><p>初始化时，行号可省，列号不可省</p></blockquote></li><li><p>元素引用</p><p>数组名 【行标】【列标】</p></li><li><p>存储形式</p><p>顺序存储，按行存储</p></li><li><p>对于二维数组的深入理解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[M][N] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">int</span> i, j;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %p\n&quot;</span>, a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a+1 = %p\n&quot;</span>, a + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; M; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; N; j++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p --&gt; %d\n&quot;</span>, &amp;a[i][j], a[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">a = <span class="hljs-number">0x7ffcc2376f80</span><br>a+<span class="hljs-number">1</span> = <span class="hljs-number">0x7ffcc2376f8c</span><br><span class="hljs-number">0x7ffcc2376f80</span> --&gt; <span class="hljs-number">1</span><br><span class="hljs-number">0x7ffcc2376f84</span> --&gt; <span class="hljs-number">2</span><br><span class="hljs-number">0x7ffcc2376f88</span> --&gt; <span class="hljs-number">3</span><br><br><span class="hljs-number">0x7ffcc2376f8c</span> --&gt; <span class="hljs-number">4</span><br><span class="hljs-number">0x7ffcc2376f90</span> --&gt; <span class="hljs-number">5</span><br><span class="hljs-number">0x7ffcc2376f94</span> --&gt; <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><code>a+1</code>跨越了行而不是单个元素。</p></li></ol><h3 id="练习部分-1"><a href="#练习部分-1" class="headerlink" title="练习部分"></a>练习部分</h3><h4 id="行列互换"><a href="#行列互换" class="headerlink" title="行列互换"></a>行列互换</h4><h4 id="求最大值及其所在位置"><a href="#求最大值及其所在位置" class="headerlink" title="求最大值及其所在位置"></a>求最大值及其所在位置</h4><h4 id="求各行与各列的和"><a href="#求各行与各列的和" class="headerlink" title="求各行与各列的和"></a>求各行与各列的和</h4><h4 id="矩阵乘积"><a href="#矩阵乘积" class="headerlink" title="矩阵乘积"></a>矩阵乘积</h4><h2 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h2><ol><li><p>定义，初始化，存储特点</p><p>【存储类型】 数据类型  标识符 【下标】…</p><ul><li>单个字符初始化</li><li>用字符串常量初始化</li></ul></li><li><p>输入输出</p></li><li><p>常用函数</p></li></ol><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><ol><li><p><code>strlen</code>和<code>sizeof</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span>;<br><span class="hljs-comment">// strlen函数可以后去字符串的长度，不包括尾&#x27;\0&#x27;</span><br><span class="hljs-comment">// 以&#x27;\0&#x27;作为结束，所以对于&quot;hello\0abc&quot;，abc就不计入</span><br><br><span class="hljs-comment">// sizeof是完整的识别。</span><br><br><span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;hello\0abc&quot;</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">strlen</span>(str));<br><span class="hljs-comment">// out: 5</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(str));<br><span class="hljs-comment">// out: 6</span><br></code></pre></td></tr></table></figure></li><li><p><code>strcpy</code>与<code>strncpy</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src)</span>;<br><span class="hljs-comment">// 把src内容拷贝到dest，以&#x27;\0&#x27;结束，返回dest的地址</span><br><span class="hljs-comment">// 当src大于dest，造成越界</span><br><br><span class="hljs-type">char</span> *<span class="hljs-title function_">strncpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src, <span class="hljs-type">size_t</span> n)</span>;<br><span class="hljs-comment">// 把src内容拷贝n个字节到dest</span><br><br><span class="hljs-built_in">strcpy</span>(str, <span class="hljs-string">&quot;abcde&quot;</span>);<br><span class="hljs-built_in">puts</span>(str);<br><span class="hljs-comment">// out: abcde</span><br><br><span class="hljs-built_in">strncpy</span>(str, <span class="hljs-string">&quot;abcde&quot;</span>, STR_SIZE);<br><span class="hljs-built_in">puts</span>(str);<br><span class="hljs-comment">// out: abcde</span><br></code></pre></td></tr></table></figure></li><li><p><code>strcat</code>与<code>strncat</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">strcat</span><span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src)</span>;<br><span class="hljs-comment">// 把src补到dest后面</span><br><span class="hljs-comment">// 需要保证dest空间足够</span><br><br><span class="hljs-type">char</span> *<span class="hljs-title function_">strncat</span><span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src, <span class="hljs-type">size_t</span> n)</span>;<br><span class="hljs-comment">// 把src拿最多n个字符到dest</span><br><br><span class="hljs-built_in">strcat</span>(str1, <span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-built_in">strcat</span>(str1, <span class="hljs-string">&quot;world&quot;</span>);<br><span class="hljs-comment">// out:hello world</span><br><br><span class="hljs-built_in">strncat</span>(str, <span class="hljs-string">&quot; &quot;</span>, STR_SIZE);<br><span class="hljs-built_in">strncat</span>(str, <span class="hljs-string">&quot;world&quot;</span>, STR_SIZE);<br><span class="hljs-comment">// out:hello world</span><br></code></pre></td></tr></table></figure></li><li><p><code>strcmp</code>与<code>strncmp</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">strcmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s2)</span>;<br><span class="hljs-comment">// 返回两个字符串，ascii码的差值</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">strncmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> (s1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s2, <span class="hljs-type">size_t</span> n);</span><br><span class="hljs-params"><span class="hljs-comment">// 指定比较前5个字符</span></span><br></code></pre></td></tr></table></figure></li></ol><h3 id="练习部分-2"><a href="#练习部分-2" class="headerlink" title="练习部分"></a>练习部分</h3><h4 id="单词计数"><a href="#单词计数" class="headerlink" title="单词计数"></a>单词计数</h4><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>李慧芹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下C语言教程-李慧芹老师-第四章</title>
    <link href="/2024/04/01/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
    <url>/2024/04/01/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sinlatansen/Linux-C-Notes">配套代码笔记仓库</a>。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6">流程控制</a><ul><li><a href="#%E5%85%B3%E9%94%AE%E5%AD%97">关键字</a></li><li><a href="#%E8%AF%A6%E8%A7%A3%E9%80%89%E6%8B%A9">详解选择</a><ul><li><a href="#if-else"><code>if-else</code></a></li><li><a href="#switch-case"><code>switch-case</code></a></li></ul></li><li><a href="#%E8%AF%A6%E8%A7%A3%E5%BE%AA%E7%8E%AF">详解循环</a><ul><li><a href="#while"><code>while</code></a></li><li><a href="#do-while"><code>do-while</code></a></li><li><a href="#for"><code>for</code></a></li><li><a href="#goto"><code>goto</code></a></li><li><a href="#%E6%AD%BB%E5%BE%AA%E7%8E%AF">死循环</a></li><li><a href="#%E8%BE%85%E5%8A%A9%E6%8E%A7%E5%88%B6">辅助控制</a></li></ul></li><li><a href="#%E7%BB%83%E4%B9%A0%E4%B8%93%E9%A2%98">练习专题</a><ul><li><a href="#1">1</a></li><li><a href="#2">2</a></li><li><a href="#3">3</a></li><li><a href="#4">4</a></li><li><a href="#5">5</a></li><li><a href="#6">6</a></li><li><a href="#7">7</a></li><li><a href="#8">8</a></li><li><a href="#9">9</a></li><li><a href="#10">10</a></li><li><a href="#11">11</a></li><li><a href="#12">12</a></li></ul></li></ul></li></ul><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><ol><li>顺序，选择，循环</li><li>NS图，流程图（工具：Visio，Dia）</li><li>简单结构与复杂结构：自然流程</li></ol><ul><li>顺序：语句逐句执行</li><li>选择：出现了一种以上的情况</li><li>循环：在某个条件成立的情况下，重复执行某个动作</li></ul><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul><li>选择：<code>if-else</code>，<code>switch-case</code></li><li>循环：<code>while</code>，<code>do-while</code>，<code>for</code>，<code>if-goto</code></li><li>辅助控制：<code>continue</code>，<code>break</code></li></ul><h2 id="详解选择"><a href="#详解选择" class="headerlink" title="详解选择"></a>详解选择</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a><code>if-else</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 格式</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">exp</span>)<br>  cmd;<br><span class="hljs-comment">// 或者：</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">exp</span>)<br>  cmd1;<br><span class="hljs-keyword">else</span><br>  cmd2;<br></code></pre></td></tr></table></figure><blockquote><p><code>else</code>只与离它最近的<code>if</code>匹配</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  score [90-100] A</span><br><span class="hljs-comment"> *  score [80-90)  B</span><br><span class="hljs-comment"> *  score [70-80)  C</span><br><span class="hljs-comment"> *  score [60-70)  D</span><br><span class="hljs-comment"> *  score [0-60)   E</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 闰年的判断：能被4整除但不能被100整除，或者能被400整除</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><br>    <span class="hljs-type">int</span> year;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;year);<br><br>    <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d is leap year.\n&quot;</span>, year);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d is not leap year\n.&quot;</span>, year);<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-type">int</span> score;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter a score:[0,100]:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;score);<br><br>    <span class="hljs-keyword">if</span> (score &lt; <span class="hljs-number">0</span> || score &gt; <span class="hljs-number">100</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Input error!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">90</span>)<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">80</span>)<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;B&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">70</span>)<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;C&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">60</span>)<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;D&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;E&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-keyword">if</span> (score &lt;= <span class="hljs-number">100</span> &amp;&amp; score &gt;= <span class="hljs-number">90</span>)<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>    <span class="hljs-keyword">if</span> (score &lt;= <span class="hljs-number">90</span> &amp;&amp; score &gt;= <span class="hljs-number">80</span>)<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;B&quot;</span>);<br>    <span class="hljs-keyword">if</span> (score &lt;= <span class="hljs-number">80</span> &amp;&amp; score &gt;= <span class="hljs-number">70</span>)<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;C&quot;</span>);<br>    <span class="hljs-keyword">if</span> (score &lt;= <span class="hljs-number">70</span> &amp;&amp; score &gt;= <span class="hljs-number">60</span>)<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;D&quot;</span>);<br>    <span class="hljs-keyword">if</span> (score &lt;= <span class="hljs-number">60</span> &amp;&amp; score &gt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;E&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">1</span>,c=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (a == b)<br>        <span class="hljs-keyword">if</span>(b==c)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a==b\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a!=b\n&quot;</span>)<br>    注意：<span class="hljs-keyword">else</span>看的是最近的<span class="hljs-keyword">if</span>！！！<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-type">int</span> a = <span class="hljs-number">9</span>, b = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">if</span> (b++ &lt; a)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d,b=%d\n&quot;</span>, a, b);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (++b &lt; a, ++a, b++));<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch-case"></a><code>switch-case</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 格式</span><br><span class="hljs-keyword">switch</span>(<span class="hljs-built_in">exp</span>)<br>&#123;<br>  <span class="hljs-keyword">case</span> 常量或常量表达式:<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> 常量或常量表达式:<br>    <span class="hljs-keyword">break</span>;<br>  ......<br>  <span class="hljs-keyword">default</span>:<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>最好的是考虑到所有的情况写出来，在default进行报错，而不是省略一个情况放到default里。</li><li><code>case</code>后面要的是<strong>常量或常量表达式</strong>，例如放<code>score/10 &gt;= 9</code>就是不行的。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> ch;<br><br>    ch = getchar();<br><br>    <span class="hljs-keyword">switch</span> (ch)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Ant\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;B&#x27;</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Butterfly\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Cobra\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Input error&quot;</span>);<br>        <span class="hljs-comment">// break;</span><br>        <span class="hljs-comment">// default可以不用</span><br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-type">int</span> score;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;score);<br><br>    <span class="hljs-keyword">if</span> (score &lt; <span class="hljs-number">0</span> || score &gt; <span class="hljs-number">100</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;EINVAL\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">switch</span> (score / <span class="hljs-number">10</span>)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;B&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;C&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;D&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;E&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="详解循环"><a href="#详解循环" class="headerlink" title="详解循环"></a>详解循环</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a><code>while</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 最少执行0次</span><br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">exp</span>)<br>  loop;<br></code></pre></td></tr></table></figure><h3 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a><code>do-while</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 最少执行1次</span><br><span class="hljs-keyword">do</span><br>&#123;<br>  loop;<br>&#125;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">exp</span>);<br><br></code></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="for"></a><code>for</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 最少执行0次</span><br><span class="hljs-keyword">for</span>(exp1;exp2;exp3)<br>  loop;<br></code></pre></td></tr></table></figure><h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a><code>goto</code></h3><ul><li>慎重使用<code>if-goto</code></li><li><code>goto</code>实现的是 无条件的跳转，且不能跨函数跳转</li></ul><h3 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(;;);<br></code></pre></td></tr></table></figure><p><code>ctrl + c</code>杀掉死循环。</p><h3 id="辅助控制"><a href="#辅助控制" class="headerlink" title="辅助控制"></a>辅助控制</h3><p><code>break</code>，<code>continue</code></p><h2 id="练习专题"><a href="#练习专题" class="headerlink" title="练习专题"></a>练习专题</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><blockquote><p>A以每年10%的单利息投资了100美元，B以每年5%的复合利息投资了100美元。</p><p>求需要多少年，B的投资总额超过A，并且输出当时各自的资产总额</p></blockquote><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><blockquote><p>从终端读入数据，直到输入0为止，计算出其中的偶数的个数和平均值，奇数的个数和平均值</p></blockquote><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><blockquote><p>从终端输入若干字符，统计元音字母</p></blockquote><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><blockquote><p>写出fibonacci数列的前40项，不能用数组</p><p>1, 1, 2, 3, 4, 5, 8, …</p></blockquote><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><blockquote><p>输出九九乘法表</p></blockquote><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><blockquote><p>百钱买百鸡，公鸡5元，母鸡3元，鸡仔1元，算出来买的各自多少只</p></blockquote><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><blockquote><p>输出1000内的水仙花数：</p><p>153: 1+125+27 &#x3D;153</p></blockquote><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><blockquote><p>求出1000以内的所有的质数</p><p>2， 3， 5， 7， 11， 13， 17</p></blockquote><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><blockquote><p>在终端实现如下输出</p><p>ABCDEF</p><p>BCDEF</p><p>CDEF</p><p>DEF</p><p>EF</p><p>F</p></blockquote><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><blockquote><p>包括钻石型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"> *<br> * *<br>* * * <br> * * <br>  *<br></code></pre></td></tr></table></figure></blockquote><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><blockquote><p>从终端输入N个数，以字母Q&#x2F;q作为终止，求和。</p></blockquote><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><blockquote><p>从半径为1开始，输出圆的面积，直到面积大于100为止</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>李慧芹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacOS配置与软件推荐</title>
    <link href="/2024/03/25/MacOS%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <url>/2024/03/25/MacOS%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<p>之前 Macbook 一直用的<code>Monterey</code>系统，偶尔会有插着充电器不充电，和蓝牙耳机失灵的情况，一气之下想换个<code>Linux</code>发行版玩一玩，但是试了几个已经算是硬件驱动比较完善的发行版之后，发现我这台电脑的 wifi 网卡和休眠几乎是绝症，网上能找到的驱动也只有五六十分的水平，而且还非常麻烦，续航完全不行，没有更好的解决办法，最终还是要回到<code>Monterey</code>。</p><p>由于之前是完全抹除了 MacOS 系统，所以没办法在线恢复了，只能制作镜像引导 U 盘，安装，除了百度网盘下载速度比较蛋疼之外，安装过程还是比较顺利。</p><p>敢这么折腾的原因也是因为我的重要文件全部在<code>OneDrive</code>和另外一台拯救者上，MacBook 上没有任何必须的文件。我的移动硬盘有时间机器备份，不过我打算重新安装一遍，可能我就是喜欢这个开荒的过程。</p><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><p>我这款机型的官方最新支持到了<code>Ventura</code>，我刚拿到手的时候是<code>Catalina</code>。其实我挺喜欢怀旧风格的，但是<code>Catalina</code>居然连接不了果子自家的<code>Airpods 3</code>，然后<code>Microsoft 365</code>也用不了，实在是没办法。我就<code>Ventura</code>和<code>Monterey</code>都尝试了一下，感觉后者兼顾了软件的支持和机型的适配，最终还是选择了在<code>Monterey</code>养老。如果以后连<code>Monterey</code>都不支持日常的软件的话，这款机器就只能作为连接网线的 24 小时开机的台式机了，可以刷个<code>Linux Server</code>做个家庭小服务器。</p><h3 id="系统偏好设置"><a href="#系统偏好设置" class="headerlink" title="系统偏好设置"></a>系统偏好设置</h3><h4 id="触碰板"><a href="#触碰板" class="headerlink" title="触碰板"></a>触碰板</h4><p>开启 <strong>轻点来点按</strong> 。</p><h4 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h4><p>这里的强调色只有默认 9 种，其实可以通过一条命令开启更多，可以参考这篇博客，<a href="https://blog.zebedy.com/post/c59c6467.html">更改 macOS 强调色 | Undefined (zebedy.com)</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">defaults write -g NSColorSimulateHardwareAccent -bool YES<br>defaults write -g NSColorSimulatedHardwareEnclosureNumber -int 5<br><span class="hljs-comment"># 个人喜欢蓝色</span><br></code></pre></td></tr></table></figure><h4 id="程序坞与菜单栏"><a href="#程序坞与菜单栏" class="headerlink" title="程序坞与菜单栏"></a>程序坞与菜单栏</h4><p>我个人喜欢缩小一点，关闭一些动态效果。</p><blockquote><p>[!note]</p><p>不是不喜欢这些动效，单纯机器性能不够用，需要省着点。</p></blockquote><h4 id="辅助功能"><a href="#辅助功能" class="headerlink" title="辅助功能"></a>辅助功能</h4><p>指针控制&#x3D;&gt;触控板选项，启用 <strong>三指拖移窗口</strong> 。</p><p>键盘&#x3D;&gt;导航&#x3D;&gt; <strong>全键盘控制</strong> 。</p><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> scutil --<span class="hljs-built_in">set</span> HostName MacBookPro<br></code></pre></td></tr></table></figure><h3 id="修改-dock-动画"><a href="#修改-dock-动画" class="headerlink" title="修改 dock 动画"></a>修改 dock 动画</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置启动坞动画时间设置为 0.5 秒</span><br>defaults write com.apple.dock autohide-time-modifier -<span class="hljs-built_in">float</span> 0.5 &amp;&amp; killall Dock<br><br><span class="hljs-comment"># 恢复启动坞默认动画时间</span><br>defaults delete com.apple.dock autohide-time-modifier &amp;&amp; killall Dock<br><br><span class="hljs-comment"># 设置启动坞响应时间最短</span><br>defaults write com.apple.dock autohide-delay -int 0 &amp;&amp; killall Dock<br><br><span class="hljs-comment"># 恢复默认启动坞响应时间</span><br>defaults delete com.apple.Dock autohide-delay &amp;&amp; killall Dock<br></code></pre></td></tr></table></figure><h3 id="适配-2K-屏幕"><a href="#适配-2K-屏幕" class="headerlink" title="适配 2K 屏幕"></a>适配 2K 屏幕</h3><p>MacOS 对 2k 屏的缩放不是很友好，需要开启<code>hidpi</code>，使用<a href="https://github.com/xzhih/one-key-hidpi">one-key-hidpi</a>这一工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs bash">╭─lzy@lzy-MacBookPro ~<br>╰─$ bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/xzhih/one-key-hidpi/master/hidpi.sh)</span>&quot;</span><br>  _    _   _____   _____    _____    _____<br> | |  | | |_   _| |  __ \  |  __ \  |_   _|<br> | |__| |   | |   | |  | | | |__) |   | |<br> |  __  |   | |   | |  | | |  ___/    | |<br> | |  | |  _| |_  | |__| | | |       _| |_<br> |_|  |_| |_____| |_____/  |_|      |_____|<br><br>============================================<br>Password:<br><br>                      显示器<br>--------------------------------------------------------<br>   序号   |   供应商ID   |   产品ID   |   显示器名称<br>--------------------------------------------------------<br>    1    |    0610    |     a033    |  Apple Display<br>    2    |    2163    |     2716    |  0���&gt;<br><br>--------------------------------------------------------<br>选择显示器: 2<br>您的显示器 供应商ID:产品ID: 2163:2716<br><br>(1) 开启HIDPI<br>(2) 开启HIDPI(同时注入EDID)<br>(3) 关闭HIDPI<br><br>输入你的选择 [1~3]: 1<br>curl: (35) error:02FFF036:system library:func(4095):Connection reset by peer<br><br>-------------------------------------<br>|********** 选择显示器ICON ***********|<br>-------------------------------------<br><br>(1) iMac<br>(2) MacBook<br>(3) MacBook Pro<br>(4) LG 显示器<br>(5) Pro Display XDR<br>(6) 保持原样<br><br>输入你的选择 [1~6]: 6<br><br>------------------------------------------<br>|********** 选择分辨率配置 ***********|<br>------------------------------------------<br>(1) 1920x1080 显示屏<br>(2) 1920x1080 显示屏 (使用 1424x802 分辨率，修复睡眠唤醒后的屏幕缩小问题)<br>(3) 1920x1200 显示屏<br>(4) 2560x1440 显示屏<br>(5) 3000x2000 显示屏<br>(6) 手动输入分辨率<br><br>输入你的选择: 4<br>开启成功，重启生效<br>首次重启开机logo会变得巨大，之后就不会了<br></code></pre></td></tr></table></figure><hr><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><h3 id="允许任意来源的软件。"><a href="#允许任意来源的软件。" class="headerlink" title="允许任意来源的软件。"></a>允许任意来源的软件。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> spctl --master-disable<br></code></pre></td></tr></table></figure><h3 id="付费软件下载站"><a href="#付费软件下载站" class="headerlink" title="付费软件下载站"></a>付费软件下载站</h3><p>免费软件可以在各自的官网下载或者<code>homebrew</code>，付费软件<a href="https://xclient.info/">精品 MAC 应用分享 (xclient.info)</a>一个网站足矣。</p><h3 id="Ohmyzsh"><a href="#Ohmyzsh" class="headerlink" title="Ohmyzsh"></a>Ohmyzsh</h3><p><a href="https://lzyyyyyy.fun/index.php/archives/20/">oh-my-zsh 配置，插件，美化记录 - fugu 的小站 (lzyyyyyy.fun)</a></p><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span><br><span class="hljs-comment"># 换源</span><br><span class="hljs-built_in">export</span> HOMEBREW_INSTALL_FROM_API=1<br><span class="hljs-built_in">export</span> HOMEBREW_API_DOMAIN=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api&quot;</span><br><span class="hljs-built_in">export</span> HOMEBREW_BOTTLE_DOMAIN=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&quot;</span><br><span class="hljs-built_in">export</span> HOMEBREW_BREW_GIT_REMOTE=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;</span><br><span class="hljs-built_in">export</span> HOMEBREW_CORE_GIT_REMOTE=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;</span><br></code></pre></td></tr></table></figure><h3 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install iterm2<br></code></pre></td></tr></table></figure><p>另出一篇单独介绍。</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install git<br>git config --global user.name <span class="hljs-string">&quot;name&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email&quot;</span><br><br>ssh-keygen -t ed25519<br><br>git config --global http.proxy http://127.0.0.1:7890<br>git config --global https.proxy http://127.0.0.1:7890<br></code></pre></td></tr></table></figure><p>校园网 22 端口好像被墙了，怎么弄都失败，改为 https。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ~/.ssh/config</span><br>Host github.com<br>  User git<br>  Hostname ssh.github.com<br>  Port 443<br>  PreferredAuthentications publickey<br>  IdentityFile <span class="hljs-string">&quot;~/.ssh/id_ed25519&quot;</span><br></code></pre></td></tr></table></figure><p>全局忽略<code>.DS_Store</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> .DS_Store &gt;&gt; ~/.gitignore_global<br>git config --global core.excludesfile ~/.gitignore_global<br></code></pre></td></tr></table></figure><h3 id="nerdfonts"><a href="#nerdfonts" class="headerlink" title="nerdfonts"></a>nerdfonts</h3><p><a href="https://notes.lzwang.ltd/macOS/brew_install_nerd_fonts/?h=#nerd-font">macOS 批量安装 Nerd Font - Cloud Notes (lzwang.ltd)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew tap homebrew/cask-fonts<br>brew search nerd-font &gt; brew-nerd-fonts.txt<br><br><span class="hljs-built_in">touch</span> install-fonts.sh<br><br><span class="hljs-comment">########################</span><br><span class="hljs-comment">#!/bin/sh</span><br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> `<span class="hljs-built_in">cat</span> ~/brew-nerd-fonts.txt`<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Installing font:  <span class="hljs-variable">$line</span>&quot;</span><br>    brew install <span class="hljs-variable">$line</span><br><span class="hljs-keyword">done</span><br><span class="hljs-comment">########################</span><br><br>./install-fonts.sh<br></code></pre></td></tr></table></figure><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">error: externally-managed-environment<br><br>× This environment is externally managed<br>╰─&gt; To install Python packages system-wide, try brew install<br>    xyz, <span class="hljs-built_in">where</span> xyz is the package you are trying to<br>    install.<br><br>    If you wish to install a non-brew-packaged Python package,<br>    create a virtual environment using python3 -m venv path/to/venv.<br>    Then use path/to/venv/bin/python and path/to/venv/bin/pip.<br><br>    If you wish to install a non-brew packaged Python application,<br>    it may be easiest to use pipx install xyz, <span class="hljs-built_in">which</span> will manage a<br>    virtual environment <span class="hljs-keyword">for</span> you. Make sure you have pipx installed.<br><br>note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.<br>hint: See PEP 668 <span class="hljs-keyword">for</span> the detailed specification.<br></code></pre></td></tr></table></figure><p>新版强制要求不污染系统环境，取消这一限制，删除 EXTERNALLY-MANAGED 这个文件即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 根据实际python版本修改</span><br><span class="hljs-built_in">rm</span> /usr/local/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/EXTERNALLY-MANAGED<br></code></pre></td></tr></table></figure><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><p>开启 vim 模式之后无法连按</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="Raycast"><a href="#Raycast" class="headerlink" title="Raycast"></a>Raycast</h3><p>也是这次重装系统的契机，换掉了<code>Alfred5</code>，尝试了一下<code>Raycast</code>，结果只能说真香了，算是本次最大收获。</p><h3 id="Snipaste"><a href="#Snipaste" class="headerlink" title="Snipaste"></a>Snipaste</h3><p>一款免费跨平台的截图工具，功能很齐全。</p><h3 id="stow"><a href="#stow" class="headerlink" title="stow"></a>stow</h3><p>一款管理<code>dotfiles</code>的小工具，具体使用方法见<a href="https://lzyyyyyy.fun/index.php/archives/58/">通过 stow 集中管理你的 dotfiles - fugu 的小站 (lzyyyyyy.fun)</a>。</p><h3 id="Karabiner-elements"><a href="#Karabiner-elements" class="headerlink" title="Karabiner-elements"></a>Karabiner-elements</h3><p>一款键盘自定义工具，功能很多，我目前只是使用它替换了<code>CapLocks</code>和<code>Command</code>键。</p><h3 id="lsd"><a href="#lsd" class="headerlink" title="lsd"></a>lsd</h3><p>加上了好看图标的<code>ls</code>。</p><p><a href="https://smms.app/image/szbxZJY3U2EXOn7" target="_blank"><img src="https://s2.loli.net/2024/03/24/szbxZJY3U2EXOn7.png" ></a></p><h3 id="thefuck"><a href="#thefuck" class="headerlink" title="thefuck"></a>thefuck</h3><p>这个可以让你手误的时候 fuck 一下，我设置了<code>f</code>的 alias。</p><p><a href="https://smms.app/image/a3zuSGs2pBPeIvo" target="_blank"><img src="https://s2.loli.net/2024/03/24/a3zuSGs2pBPeIvo.png" ></a></p><h3 id="neofetch"><a href="#neofetch" class="headerlink" title="neofetch"></a>neofetch</h3><p>用来欣赏自己把时间都浪费到了哪里。</p><p><a href="https://smms.app/image/IqiQ9xADGu73obH" target="_blank"><img src="https://s2.loli.net/2024/03/24/IqiQ9xADGu73obH.png" ></a></p><h3 id="bob"><a href="#bob" class="headerlink" title="bob"></a>bob</h3><p>很小巧的 OCR 工具，支持翻译功能，我用的自己的百度翻译 API，免费额度够用。（图标很可爱，令人印象深刻</p><p><a href="https://smms.app/image/WD1vHuOjnlXLfeA" target="_blank"><img src="https://s2.loli.net/2024/03/24/WD1vHuOjnlXLfeA.png" ></a></p><h3 id="IINA"><a href="#IINA" class="headerlink" title="IINA"></a>IINA</h3><p>强大的播放器，界面也挺简洁的。像 win 端就用 potplayer。</p><h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><p>终端会话复用器，现在已经是离不开它了，详细说明见<a href="https://lzyyyyyy.fun/index.php/archives/48/">tmux 终端复用器安装及简单配置 - fugu 的小站 (lzyyyyyy.fun)</a>。</p><h3 id="Monitor-Control"><a href="#Monitor-Control" class="headerlink" title="Monitor Control"></a>Monitor Control</h3><p>用于控制亮度，可以很好的控制外接显示器。有一个叫<code>better display</code>的软件功能更强但是大部分功能要收费，这个够用了。</p><p><a href="https://smms.app/image/ATS9ejGcLEmDYy6" target="_blank"><img src="https://s2.loli.net/2024/03/24/ATS9ejGcLEmDYy6.png" ></a></p><h3 id="duf"><a href="#duf" class="headerlink" title="duf"></a>duf</h3><p>一个更好的查看磁盘状态的命令行工具。</p><p><a href="https://smms.app/image/J2MLUhTwkVD7GCn" target="_blank"><img src="https://s2.loli.net/2024/03/24/J2MLUhTwkVD7GCn.png" ></a></p><h3 id="gtop"><a href="#gtop" class="headerlink" title="gtop"></a>gtop</h3><p>高颜值系统监视器。</p><p><a href="https://smms.app/image/ZCvoFsaY3Tp6hIr" target="_blank"><img src="https://s2.loli.net/2024/03/24/ZCvoFsaY3Tp6hIr.png" ></a></p><h3 id="fortune"><a href="#fortune" class="headerlink" title="fortune"></a>fortune</h3><p>可以输出一句冷笑话或者名言之类的，挺有意思。</p><h3 id="pokemonsay"><a href="#pokemonsay" class="headerlink" title="pokemonsay"></a>pokemonsay</h3><p>可以每次都出现一只宝可梦。</p><img src="https://s2.loli.net/2024/03/25/R6JQcMCa9Dz48Wn.png"/><h3 id="mos"><a href="#mos" class="headerlink" title="mos"></a>mos</h3><p>macos 默认的滚轮方向与 win 是反着来的，这个小工具可以反转并且开启平滑滚动。</p><h3 id="easy-move-resize"><a href="#easy-move-resize" class="headerlink" title="easy-move-resize"></a>easy-move-resize</h3><p>可以设置为<code>alt</code>加鼠标左键，点击任意地方拖动窗口。<code>alt</code>加鼠标右键，点击任意地方缩放窗口。</p><h3 id="ALDente"><a href="#ALDente" class="headerlink" title="ALDente"></a>ALDente</h3><p>可以控制系统电量只充电到指定电量，比如 85%。比系统自带的充电更智能一些。有内购，但是免费版就够用了。</p><h3 id="NEOVIM"><a href="#NEOVIM" class="headerlink" title="NEOVIM"></a>NEOVIM</h3><p>终端编辑器。</p><p>这个就水太深了，我也只是基于<code>LAZYVIM</code>简单配置了一下。VS Code 的 ssh 插件固然好用，但是对于我那个跑了一堆 docker 的小服务器而言，再多跑一饿<code>vscode server</code>还是不堪重负了，经常连接不稳定，我这边也反应慢。所以不是很复杂的问题，就在终端使用 nvim 搞定。</p><p>熟悉了全键盘操作只能说太香了，现在能多敲几个字母搞定的事，手就不想碰鼠标。vscode 的 vim 插件与之相比体验还是有差别，最后就是二者换着用，常常换换口味。</p><p><a href="https://smms.app/image/l81LbxdenjKzgIp" target="_blank"><img src="https://s2.loli.net/2024/03/24/l81LbxdenjKzgIp.png" ></a></p><h3 id="Yabai"><a href="#Yabai" class="headerlink" title="Yabai"></a>Yabai</h3><p><a href="https://www.josean.com/posts/yabai-setup">如何在 Mac 上设置和使用 Yabai Tiling Window Manager — How To Setup And Use The Yabai Tiling Window Manager On Mac (josean.com)</a>。</p><h3 id="Sketchybar"><a href="#Sketchybar" class="headerlink" title="Sketchybar"></a>Sketchybar</h3><p>暂时抄的人家的配置，开箱即用，好看就完事了。<br><a href="https://smms.app/image/tHqfaCWAhizldMP" target="_blank"><img src="https://s2.loli.net/2024/03/25/tHqfaCWAhizldMP.png" ></a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>微信、QQ、Edge、Visual studio code、迅雷、滴答清单、自动切换输入法</p>]]></content>
    
    
    <categories>
      
      <category>geek</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我开发了一款属于自己的Typora主题！</title>
    <link href="/2024/03/23/%E6%88%91%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E6%AC%BE%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84Typora%E4%B8%BB%E9%A2%98%EF%BC%81/"/>
    <url>/2024/03/23/%E6%88%91%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E6%AC%BE%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84Typora%E4%B8%BB%E9%A2%98%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h1 id="关于-typora-theme-Fugu"><a href="#关于-typora-theme-Fugu" class="headerlink" title="关于 typora-theme-Fugu"></a>关于 typora-theme-Fugu</h1><p>接触<strong>markdown</strong>好像有一年多了，我的所有的笔记和包括论文的草稿都是先使用<strong>markdown</strong>书写，只需要简单的符号就可以获得非常有条理的目录，列表以及好看的代码高亮，我已经完全离不开他。</p><p>而<strong>typora</strong>这一款好看的编辑器也是凭颜值拿下了我，它的所见即所得相比于实时预览体验更好。我也是当时就付费了正版。</p><p>使用了不少主题，他们各有特色，风格迥异，可以根据自己书写的内容选择合适的主题，而对我而言使用频率最高的还是学习笔记，会大量的使用代码块。</p><p><strong>Lapis</strong>、<strong>Next</strong>、<strong>Zj</strong>、<strong>Vue</strong>等，都是我非常喜欢的主题，但是有一些个人不太喜欢的点，毕竟每个人的审美都不一样，最终，我基于<strong>Lapis</strong>，根据自己的喜好，diy 了这款属于自己的主题。</p><p>更多介绍和最新版本下载，请到<a href="https://github.com/sinlatansen/typora-theme-Fugu">Github 地址</a>，[Gitee 地址](<a href="https://gitee.com/lzy-buaa-jdi/typora-theme-Fugu">typora-theme-Fugu: 一款基于 Lapis 的 Typora 主题 (gitee.com)</a>)。</p><img src="https://s2.loli.net/2024/03/23/KCXuoTjD7pBSZFY.png"/><h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><p>开发过程也有一点值得记录的事情，官方给出的开发者文档中提到，由于<strong>typora</strong>本身版本更新可能更改元素名，所以其开发工具<a href="https://github.com/typora/typora-theme-toolkit">typora&#x2F;typora-theme-toolkit</a>已经停止维护了，建议开发者使用<strong>typora</strong>内部的调试工具，获取最新的元素结构。这样就导致，无法使用<code>live-server</code>的<code>html</code>实时开发插件。即便更改了主题文件夹内的文件内容，<strong>typora</strong>只有重启才会加载效果，这样非常不便。</p><blockquote><p>不知道是不是我没有找对方法，我已经开启了调试模式。</p></blockquote><p>最终我找到了办法，首先，基于<a href="https://markdown-it.github.io/">Markdown-it 演示 — markdown-it demo</a>的内容，我得到了一个覆盖所有语法元素的<strong>markdown</strong>文档，然后将他复制进<strong>typora</strong>，导出为<code>html</code>格式，得到的文件使用<code>vscode-live-server</code>插件就可以愉快的开发了。</p><p>对于喜欢的主题想要学习每个样式的写法，则可以直接在<strong>typora</strong>的调试工具，看到元素的属性，配合主题文件夹下的源码，效果更佳。</p>]]></content>
    
    
    <categories>
      
      <category>geek</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
      <tag>typora</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下C语言教程-李慧芹老师-第三章</title>
    <link href="/2024/03/20/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
    <url>/2024/03/20/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sinlatansen/Linux-C-Notes">配套代码笔记Github地址</a>。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E4%B8%93%E9%A2%98">第三章 输入输出专题</a><ul><li><a href="#%E5%86%85%E5%AE%B9">内容</a></li><li><a href="#%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0">格式化输入输出函数</a><ul><li><a href="#printf"><code>printf</code></a></li><li><a href="#scanf"><code>scanf</code></a></li></ul></li><li><a href="#%E5%AD%97%E7%AC%A6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0">字符输入输出函数</a></li></ul></li></ul><h1 id="第三章-输入输出专题"><a href="#第三章-输入输出专题" class="headerlink" title="第三章 输入输出专题"></a>第三章 输入输出专题</h1><p>input &amp; output -&gt; I&#x2F;O(标准IO，文件IO)</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ol><li>格式化输入输出函数：<code>scanf</code>, <code>printf</code></li><li>字符输入输出函数：<code>getchar</code>, <code>putchar</code></li><li>字符串输入输出函数：<code>gets(!)</code>,<code>puts</code></li></ol><h2 id="格式化输入输出函数"><a href="#格式化输入输出函数" class="headerlink" title="格式化输入输出函数"></a>格式化输入输出函数</h2><p><img src="https://s2.loli.net/2024/03/18/OMiu6CUDZy5RH3P.png" alt="标准输出格式字符"></p><p><img src="https://s2.loli.net/2024/03/18/Z6gVaw1AOJ87Uil.png" alt="标准输出修饰符"></p><h3 id="printf"><a href="#printf" class="headerlink" title="printf"></a><code>printf</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">printf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span>;<br>format: <span class="hljs-string">&quot;%【修饰符】格式字符&quot;</span>，参照图片标准输出修饰符和格式字符<br></code></pre></td></tr></table></figure><ul><li>有关<code>l</code>修饰符的提醒</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    FILE *fp;<br>    <span class="hljs-type">long</span> a = <span class="hljs-number">11</span>;<br><br>    fp = fopen();<br><br>    <span class="hljs-comment">// 可行，a定义了long型，与函数要求一致</span><br>    func(fp, a);<br><br>    <span class="hljs-comment">// 早期的编译器不认可，这个12没有单位，不同编译器默认类型不同</span><br>    <span class="hljs-comment">// 需要加上L修饰符</span><br>    func(fp, <span class="hljs-number">12</span>);<br>    func(fp, <span class="hljs-number">12L</span>);<br>    <span class="hljs-comment">// 对于func(FILE *fp, long long i)</span><br>    func(fp, <span class="hljs-number">12LL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>传输一个5G的文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">5LL</span>*<span class="hljs-number">1204LL</span>*<span class="hljs-number">1204LL</span>*<span class="hljs-number">1204LL</span><br></code></pre></td></tr></table></figure><p>定义一个宏，表示一年有多少秒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 定义一年有多少秒</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEC_YEAR (60LL * 60LL * 24LL * 365LL)</span><br></code></pre></td></tr></table></figure><ul><li><p>函数 变参与定参重载的区别</p><ul><li><p>变参：编译器只报警告，函数自己都不知道自己有多少个参数</p></li><li><p>定参重载：编译报错</p></li></ul></li><li><p><code>\n</code>的作用</p></li></ul><p>强制刷新缓冲区，以死循环调试举例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 不加\n，before while()存入了缓冲区，故不输出</span><br><span class="hljs-comment">// printf(&quot;[%s:%d]before while().&quot;, __FUNCTION__, __LINE__);</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s:%d]before while().\n&quot;</span>, __FUNCTION__, __LINE__);<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>&#125;<br><span class="hljs-comment">// printf(&quot;[%s:%d]after while().&quot;, __FUNCTION__, __LINE__);</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s:%d]after while().\n&quot;</span>, __FUNCTION__, __LINE__);<br></code></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * printf(&quot;%[修饰符]格式字符&quot;, 输出表项);</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STRSIZE 10</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// printf(&quot;hello world\n&quot;);</span><br><br>    <span class="hljs-comment">// char ch = 65;</span><br>    <span class="hljs-comment">// printf(&quot;%c\n&quot;, ch);</span><br>    <span class="hljs-comment">// out: A</span><br><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">255</span>;<br>    <span class="hljs-type">float</span> f = <span class="hljs-number">123.45678</span>;<br>    <span class="hljs-type">char</span> str[STRSIZE] = <span class="hljs-string">&quot;helloworld&quot;</span>;<br>    <span class="hljs-type">double</span> dou = <span class="hljs-number">123.456</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> l = <span class="hljs-number">123456</span>;<br>    <span class="hljs-comment">// 不加\n，before while()存入了缓冲区，故不输出</span><br>    <span class="hljs-comment">// printf(&quot;[%s:%d]before while().&quot;, __FUNCTION__, __LINE__);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s:%d]before while().\n&quot;</span>, __FUNCTION__, __LINE__);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>    &#125;<br>    <span class="hljs-comment">// printf(&quot;[%s:%d]after while().&quot;, __FUNCTION__, __LINE__);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s:%d]after while().\n&quot;</span>, __FUNCTION__, __LINE__);<br>    <span class="hljs-comment">// printf(&quot;f = %8.1f\n&quot;, f);</span><br>    <span class="hljs-comment">// out:f =    123.5</span><br>    <span class="hljs-comment">// printf(&quot;i = %2d\n&quot;, i);</span><br>    <span class="hljs-comment">// out: i = 123</span><br><br>    <span class="hljs-comment">// printf(&quot;%-10.5s[over]\n&quot;, str);</span><br>    <span class="hljs-comment">// printf(&quot;%+10.5s[over]\n&quot;, str);</span><br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// hello     [over]</span><br>    <span class="hljs-comment">//      hello[over]</span><br><br>    <span class="hljs-comment">// 同样对于i进行八进制核对十六进制的输出</span><br>    <span class="hljs-comment">//  printf(&quot;i = %#o\n&quot;, i);</span><br>    <span class="hljs-comment">//  out: i = 0377</span><br>    <span class="hljs-comment">//  printf(&quot;i = %#x\n&quot;, i);</span><br>    <span class="hljs-comment">//  out: i = 0xff</span><br><br>    <span class="hljs-comment">// printf(&quot;dou = %lf\n&quot;, dou);</span><br>    <span class="hljs-comment">// printf(&quot;l = %ld\n&quot;, l);</span><br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// dou = 123.456000</span><br>    <span class="hljs-comment">// l = 123456</span><br><br>    <span class="hljs-comment">// printf(&quot;hello world!\n&quot;);</span><br>    <span class="hljs-comment">// 实参过多或者过少都会警告</span><br>    <span class="hljs-comment">// printf(&quot;#d #e\n&quot;, i);</span><br>    <span class="hljs-comment">// printf(&quot;#d #e\n&quot;, i, f, l);</span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>func(FILE *fp, <span class="hljs-type">long</span> i)<br>&#123;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    FILE *fp;<br>    <span class="hljs-type">long</span> a = <span class="hljs-number">11</span>;<br><br>    fp = fopen();<br><br>    <span class="hljs-comment">// 可行，a定义了long型，与函数要求一致</span><br>    func(fp, a);<br><br>    <span class="hljs-comment">// 早期的编译器不认可，这个12没有单位，不同编译器默认类型不同</span><br>    <span class="hljs-comment">// 需要加上L修饰符</span><br>    func(fp, <span class="hljs-number">12</span>);<br>    func(fp, <span class="hljs-number">12L</span>);<br>    <span class="hljs-comment">// 对于func(FILE *fp, long long i)</span><br>    func(fp, <span class="hljs-number">12LL</span>);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// 定义一年有多少秒</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEC_YEAR (60LL * 60LL * 24LL * 365LL)</span><br></code></pre></td></tr></table></figure><h3 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a><code>scanf</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">scanf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, 地址表)</span>;<br>format:抑制符*<br>%s非常危险，因为不知道储存空间的大小<br>放在循环结构中时要注意能否接收到正常内容<br></code></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  int scanf(const char *format, 地址表);</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// #define STRSIZE 32</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STRSIZE 3</span><br><span class="hljs-comment">// 除掉尾0占一个</span><br><span class="hljs-comment">// 相当于只能两个字符</span><br><span class="hljs-comment">// 但是这时候运行输入hello，不会报错</span><br><span class="hljs-comment">// 实际上是越界了</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">float</span> f;<br>    <span class="hljs-type">char</span> str[STRSIZE];<br>    <span class="hljs-type">int</span> ret;<br>    <span class="hljs-type">char</span> ch;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter:\n&quot;</span>);<br><br>    <span class="hljs-comment">// scanf(&quot;%d&quot;, &amp;i);</span><br>    <span class="hljs-comment">// ch = getchar();</span><br><br>    <span class="hljs-comment">// printf(&quot;i = %d, ch = %c\n&quot;, i, ch);</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    out:</span><br><span class="hljs-comment">    Please enter:</span><br><span class="hljs-comment">    4 h</span><br><span class="hljs-comment">    i = 4, ch =</span><br><span class="hljs-comment">    ch被吞掉了</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">// scanf(&quot;%d&quot;, &amp;i);</span><br>    <span class="hljs-comment">// scanf(&quot;%*c%c&quot;, &amp;ch);</span><br>    <span class="hljs-comment">// 用 &#x27;%*c&#x27; 吃掉回车</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    out:</span><br><span class="hljs-comment">    Please enter:</span><br><span class="hljs-comment">    5</span><br><span class="hljs-comment">    h</span><br><span class="hljs-comment">    i = 5, ch = h</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d, ch = %c\n&quot;</span>, i, ch);<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-comment">// 输入a直接卡死，scanf直接放在循环中很危险</span><br>    <span class="hljs-comment">// 需要加入校验，用ret接收scanf返回值</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-comment">// scanf(&quot;%d&quot;, &amp;i);</span><br><br>        ret = <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;i);<br>        <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter Error!\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d\n&quot;</span>, i);<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">// printf(&quot;Please enter fot str:\n&quot;);</span><br>    <span class="hljs-comment">// 这种情况下，不能有任何间隔符</span><br>    <span class="hljs-comment">// 输入hello world，只会得到hello</span><br>    <span class="hljs-comment">// 对于scanf，不建议&#x27;%s&#x27;</span><br>    <span class="hljs-comment">// scanf(&quot;%s&quot;, str);</span><br>    <span class="hljs-comment">// printf(&quot;%s\n&quot;, str);</span><br><br>    <span class="hljs-comment">// printf(&quot;Please enter for i[int]:\n&quot;);</span><br>    <span class="hljs-comment">// 这里两个数字之间有&#x27;,&#x27;，输入就一定要有&#x27;,&#x27;</span><br>    <span class="hljs-comment">// 最好不加，空格符可以是空格 回车 tab</span><br>    <span class="hljs-comment">// scanf(&quot;%d,%f&quot;, &amp;i, &amp;f);</span><br>    <span class="hljs-comment">// printf(&quot;i = %d\n&quot;, i);</span><br>    <span class="hljs-comment">// printf(&quot;f = %f\n&quot;, f);</span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符输入输出函数"><a href="#字符输入输出函数" class="headerlink" title="字符输入输出函数"></a>字符输入输出函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">getchar</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-comment">// 返回int型是考虑出错的情况</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">putchar</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>; <br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> ch;<br>    ch = getchar();<br>    <span class="hljs-built_in">putchar</span>(ch);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串输入输出函数"><a href="#字符串输入输出函数" class="headerlink" title="字符串输入输出函数"></a>字符串输入输出函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">gets</span><span class="hljs-params">(<span class="hljs-type">char</span> *s)</span>;<br><span class="hljs-comment">// 从标准输入读到内容放到s指针指向的缓冲区</span><br><span class="hljs-comment">// 停止条件：换行或者EOF</span><br><span class="hljs-comment">// 尾部会追加&#x27;\0&#x27;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">puts</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span>;<br><span class="hljs-comment">// 将s指针缓冲区内容往外写</span><br><span class="hljs-comment">// 以换行符中止</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STRSIZE 32</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> str[STRSIZE];<br>    gets(str);<br>    <span class="hljs-built_in">puts</span>(str);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>gets</code>非常危险，不会检查是否越界。使用的话用<code>fgets</code>来代替。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">fgets</span><span class="hljs-params">(<span class="hljs-type">char</span> *s, <span class="hljs-type">int</span> size, FILE *stream)</span>;<span class="hljs-comment">// 最多读到&#x27;size-1&#x27;个</span><br></code></pre></td></tr></table></figure><p><code>getline</code>是<code>GNU libc</code>的方言，可以动态内存保证读取一整行。</p><h2 id="练习专题"><a href="#练习专题" class="headerlink" title="练习专题"></a>练习专题</h2><h3 id="夸脱水"><a href="#夸脱水" class="headerlink" title="夸脱水"></a>夸脱水</h3><blockquote><p>一个水分子3.0e-23g，一夸脱水约950g。</p><p>变成，输入水的夸脱数，输出其包含的水分子质量。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">water</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">float</span> num;<br>    <span class="hljs-type">float</span> sum;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input for num:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;num);<br><br>    sum = num * KQ / WEIGHT;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Total = %e\n&quot;</span>, sum);<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三角形面积"><a href="#三角形面积" class="headerlink" title="三角形面积"></a>三角形面积</h3><blockquote><p>输入三角形的三边长，求三角形面积。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">area</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">float</span> a, b, c;<br>    <span class="hljs-type">float</span> s, area;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f%f%f&quot;</span>, &amp;a, &amp;b, &amp;c);<br>    <span class="hljs-comment">// 对scanf做好校验是好习惯</span><br>    <span class="hljs-keyword">if</span> (a + b &lt;= c || b + c &lt;= a || a + c &lt;= b)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;EINVAL!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %f\n&quot;</span>, a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b = %f\n&quot;</span>, b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c = %f\n&quot;</span>, c);<br><br>    <span class="hljs-comment">// s = 1 / 2 * (a + b + c);</span><br>    s = <span class="hljs-number">1.0</span> / <span class="hljs-number">2</span> * (a + b + c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s = %f\n&quot;</span>, s);<br>    <span class="hljs-comment">// s=0.000000</span><br>    <span class="hljs-comment">// 1 / 2是int型计算，得到的是商0余1</span><br><br>    area = <span class="hljs-built_in">sqrt</span>(s * (s - a) * (s - b) * (s - c));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;area = %f\n&quot;</span>, area);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>编译需要<code>-lm</code>。<code>makefile</code>如下，千万要注意<code>makefile</code>要使用<strong>制表符</strong>缩进，而非空格。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs makefile">CC=cc<br>CFLAGS=<br>LDFLAGS=-lm<br>TARGET=test<br>SRC=test.c<br>OBJ=$(SRC:.c=.o)<br><br><span class="hljs-variable">$(TARGET)</span>: <span class="hljs-variable">$(OBJ)</span><br><span class="hljs-variable">$(CC)</span> -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$^</span> <span class="hljs-variable">$(LDFLAGS)</span><br><br><span class="hljs-section">%.o: %.c</span><br><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CFLAGS)</span> -c <span class="hljs-variable">$&lt;</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">clean:</span><br>rm -f <span class="hljs-variable">$(TARGET)</span> <span class="hljs-variable">$(OBJ)</span><br></code></pre></td></tr></table></figure><h3 id="求根公式"><a href="#求根公式" class="headerlink" title="求根公式"></a>求根公式</h3><blockquote><p>ax^2^ + bx + c &#x3D; 0，假设b^2^ - 4ac &gt;0</p><p>x<del>1</del> &#x3D; (-b + sqrt( b*b - 4ac )) &#x2F; 2a</p><p>x<del>2</del> &#x3D; (-b - sqrt( b*b - 4ac )) &#x2F; 2a</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">root</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">float</span> a, b, c;<br>    <span class="hljs-type">float</span> disc;<br>    <span class="hljs-type">float</span> p, q;<br>    <span class="hljs-type">float</span> x1, x2;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input :\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f%f%f&quot;</span>, &amp;a, &amp;b, &amp;c);<br><br>    <span class="hljs-keyword">if</span> (b * b - <span class="hljs-number">4</span> * a * c &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;EINVAL\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    disc = b * b - <span class="hljs-number">4</span> * a * c;<br>    p = -b / <span class="hljs-number">2</span> * a;<br>    q = <span class="hljs-built_in">sqrt</span>(disc) / <span class="hljs-number">2</span> * a;<br><br>    x1 = p + q;<br>    x2 = p - q;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x1 = %f\n&quot;</span>, x1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x2 = %f\n&quot;</span>, x2);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>李慧芹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过stow集中管理你的dotfiles</title>
    <link href="/2024/03/15/%E9%80%9A%E8%BF%87stow%E9%9B%86%E4%B8%AD%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84dotfiles/"/>
    <url>/2024/03/15/%E9%80%9A%E8%BF%87stow%E9%9B%86%E4%B8%AD%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84dotfiles/</url>
    
    <content type="html"><![CDATA[<p>自己的类<code>unix</code>系统也有好几个了，算上 MacBook Pro，wsl2 和云服务器就是三个，所以需要同步一些配置文件，这样各种快捷键在不同的设备上比较顺手。</p><h1 id="Stow"><a href="#Stow" class="headerlink" title="Stow"></a>Stow</h1><p><code>GNU Stow</code>是一个开源符号连接管理器，可以轻松的帮助我们将散落各地的 dotfiles 组织到一个文件夹，然后维护这个文件夹到 Github 仓库就可以实现轻松的版本管理，备份和多设备同步。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>MacOS 可以通过包管理器<code>homebrew</code>来安装，<code>brew install stow</code>。</li><li>Ubuntu 可以通过<code>sudo apt install stow</code>来安装。</li></ul><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p>假如你希望将<code>$HOME/.zshrc</code>在<code>$HOME/dotfiles/</code>这个目录下进行管理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> ~/.zshrc ~/.zshrc.bak<br><span class="hljs-built_in">mv</span> ~/.zshrc ~/dotfiles/zsh<br><span class="hljs-built_in">cd</span> ~/dotfiles<br>stow zsh<br><span class="hljs-comment"># 确认无误可以删除备份</span><br><span class="hljs-built_in">rm</span> ~/.zshrc.bak<br></code></pre></td></tr></table></figure><p>这时就会发现已经成功进行了软连接，所有的更改都将同步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">╭─lzy@MBP2017 ~<br>╰─$ <span class="hljs-built_in">cd</span> ~ &amp;&amp; <span class="hljs-built_in">ls</span> -al | grep zshrc<br>lrwxr-xr-x lzy  staff  19 B  Fri Mar 15 00:36:25 2024 .zshrc ⇒ dotfiles/zsh/.zshrc<br></code></pre></td></tr></table></figure><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><ul><li>假如你想管理 nvim，它的 dotfile 在<code>$HOME/.config/</code>下，并且你不打算在<code>~/dotfiles/</code>下维护，而是在<code>~/onedrive/dotfiles/</code>这种别的路径，就需要指定一些参数，详情可搜索官方文档或者<code>man stow</code>。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -r ~/.config/nvim ~/.config/nvim.bak<br><span class="hljs-built_in">mv</span> ~/.config/nvim ~/onedrive/dotfiles/<br><span class="hljs-built_in">mkdir</span> ~/.config/nvim<br><span class="hljs-built_in">cd</span> ~/onedrive/dotfiles/<br>stow --target=<span class="hljs-variable">$HOME</span>/.config/ nvim<br><span class="hljs-comment"># 成功了可以删除备份</span><br><span class="hljs-built_in">rm</span> -rf ~/.config/nvim.bak<br></code></pre></td></tr></table></figure><ul><li><p>如果希望删除某个链接，可以通过<code>-D</code>来删除。</p></li><li><p>虽说链接过的双方内容是同步的，但是如果新增或者删除了文件，就会有多余或缺失的链接，这时候可以通过<code>-R</code>，它会进行取消链接，重新链接的更新过程。</p></li><li><p>对于不确定的操作，可以通过<code>-n</code>或者<code>--simulate</code>来进行模拟，它会告诉你即将进行的操作，但是不实际进行。</p></li></ul><h2 id="设置自己的一键更新脚本"><a href="#设置自己的一键更新脚本" class="headerlink" title="设置自己的一键更新脚本"></a>设置自己的一键更新脚本</h2><p>当你在多设备之间切换时，<code>git</code>可以帮助你更新好配置文件，而已经存在的链接如果内容变化都是同步的。但是如果配置文件增加或者减少了，就需要<code>-R</code>参数重新链接，这个过程可以写成脚本自动运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 创建必要的配置目录</span><br><span class="hljs-built_in">mkdir</span> -p ~/.config/nvim<br><span class="hljs-built_in">mkdir</span> -p ~/.config/neofetch<br><span class="hljs-built_in">mkdir</span> -p ~/.config/tmux-powerline<br><br><span class="hljs-comment"># 切换到 dotfiles 目录</span><br><span class="hljs-built_in">cd</span> ~/dotfiles<br><br><span class="hljs-comment"># 使用 stow 链接配置</span><br>stow -R zsh<br>stow -R tmux<br>stow -R --target=<span class="hljs-variable">$HOME</span>/.config/nvim nvim<br>stow -R --target=<span class="hljs-variable">$HOME</span>/.config/neofetch neofetch<br>stow -R --target=<span class="hljs-variable">$HOME</span>/.config/tmux-powerline tmux-powerline<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Configurations have been stowed.&quot;</span><br></code></pre></td></tr></table></figure><p>综上，将所有的配置文件放到一个文件夹，再链接回原处，这样子管理起来就比较方便啦。</p><h1 id="dotfiles-多设备兼容性问题"><a href="#dotfiles-多设备兼容性问题" class="headerlink" title="dotfiles 多设备兼容性问题"></a>dotfiles 多设备兼容性问题</h1><p>对于同样是 zshrc 配置，不同的系统，有一些自然是可以共用的，但是有一些是某个系统特有的，或者说同一个命令具体参数不同，这里有两种方法。</p><h2 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h2><p>可以在<code>.zshrc</code>中放各个系统共同的配置，而不同的系统则放在同文件夹下<code>.zshrc_mac</code>这种文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 检测操作系统类型</span><br>OS_TYPE=$(<span class="hljs-built_in">uname</span>)<br><br><span class="hljs-comment"># 根据操作系统类型加载特定配置</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$OS_TYPE</span>&quot;</span> <span class="hljs-keyword">in</span><br>    Linux)<br>        [[ -f ~/.zshrc_linux ]] &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc_linux<br>        ;;<br>    Darwin)<br>        [[ -f ~/.zshrc_mac ]] &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc_mac<br>        ;;<br>    CYGWIN*|MINGW32*|MSYS*|MINGW*)<br>        [[ -f ~/.zshrc_windows ]] &amp;&amp; <span class="hljs-built_in">source</span> ~/.zshrc_windows<br>        ;;<br>    *)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Unknown OS type: <span class="hljs-variable">$OS_TYPE</span>&quot;</span><br>        ;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><h2 id="主机名判断"><a href="#主机名判断" class="headerlink" title="主机名判断"></a>主机名判断</h2><p>也可以把它们就放在同一个文件，通过主机名写判断逻辑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Welcome message</span><br><span class="hljs-keyword">if</span> [[ $(hostname) == <span class="hljs-string">&quot;MBP2017&quot;</span> ]]; <span class="hljs-keyword">then</span><br>  figlet -c -f larry3d Welcome!<br><span class="hljs-keyword">elif</span> [[ $(hostname) == <span class="hljs-string">&quot;Cloud&quot;</span> ]]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span><br>  <span class="hljs-built_in">echo</span><br>  figlet -c Hello Ubuntu!<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>我个人更倾向于后者，不同的部分大多数也是相似的命令，只是参数不同，摆在一起会比较好整理。</p><p>综上，多台设备也可以无感切换了，<code>stow</code>真是个好东西，感谢作者。</p>]]></content>
    
    
    <categories>
      
      <category>geek</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>macos</tag>
      
      <tag>stow</tag>
      
      <tag>dotfiles</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下C语言教程-李慧芹老师-第二章</title>
    <link href="/2024/03/12/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <url>/2024/03/12/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sinlatansen/Linux-C-Notes">配套代码笔记Github地址</a>。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F">第二章 数据类型，运算符和表达式</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型（基本数据类型）</a></li><li><a href="#%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F">常量与变量</a><ul><li><a href="#%E5%B8%B8%E9%87%8F">常量</a><ul><li><a href="#%E5%AE%9A%E4%B9%89">定义</a></li><li><a href="#%E5%88%86%E7%B1%BB">分类</a></li></ul></li><li><a href="#%E5%8F%98%E9%87%8F">变量</a><ul><li><a href="#%E5%AE%9A%E4%B9%89-1">定义</a></li><li><a href="#%E5%8F%98%E9%87%8F%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8E%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4">变量的生命周期与作用范围</a></li></ul></li><li><a href="#%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F">运算符和表达式</a><ul><li><a href="#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E8%AF%AD%E5%8F%A5%E7%9A%84%E5%8C%BA%E5%88%AB">表达式和语句的区别</a></li><li><a href="#%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81">运算符相关代码</a></li></ul></li></ul></li></ul></li></ul><h1 id="第二章-数据类型，运算符和表达式"><a href="#第二章-数据类型，运算符和表达式" class="headerlink" title="第二章 数据类型，运算符和表达式"></a>第二章 数据类型，运算符和表达式</h1><h2 id="数据类型（基本数据类型）"><a href="#数据类型（基本数据类型）" class="headerlink" title="数据类型（基本数据类型）"></a>数据类型（基本数据类型）</h2><blockquote><p>数据类型所占字节数随机器硬件不同而不同，以<code>int</code>为基准，<code>char</code>比它小，<code>float</code>和<code>double</code>比它大。</p></blockquote><ol><li><p>所占字节数</p></li><li><p>存储区别</p></li><li><p>不同类型的数据间转换（隐式和<strong>显式</strong>&#x3D;&gt;强制类型转换）</p></li><li><p>特殊性</p><ol><li><p>布尔型（<code>bool</code>）：</p><p><code>false</code>：<code>0</code>，<code>true</code>：非零值。</p></li><li><p><code>float</code>类型，不够精确，其实是一个小范围。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">float</span> f)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (f &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-comment">// else if (f == 0)</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(f - <span class="hljs-number">0</span>) &lt;= <span class="hljs-number">1e-6</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>char</code>型是否有符号，未定义</p></li><li><p>不同形式的零值</p><p><code>0</code>，<code>&#39;0&#39;</code>，<code>&quot;0&quot;</code>，<code>&#39;\0&#39;</code>，<code>NULL</code></p></li><li><p>数据类型得与后续代码的输入输入相匹配（自相矛盾）</p></li></ol></li></ol><h2 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h2><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>在程序执行过程中值不会发生变化的量。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li><p>整型常量：1，790，76</p></li><li><p>实型常量：3.14，5.26</p></li><li><p>字符常量：由单引号引起来的单个字符或转义字符，如<code>&#39;a&#39;</code>，<code>&#39;X&#39;</code>，<code>&#39;\n&#39;</code>，<code>&#39;\ddd&#39;</code>（d可以是<code>0-7</code>，三位八进制，例如<code>&#39;\015&#39;</code>），<code>&#39;\xhh&#39;</code>（h可以是<code>0-F</code>，二位十六进制，<code>&#39;\x7f&#39;</code>）</p></li><li><p>字符串常量：由双引号引起来的一个或多个字符组成的序列（特殊情况，空串），如：<code>&quot;&quot;</code>，<code>&quot;a&quot;</code>，<code>&quot;abXYZ&quot;</code>，<code>&quot;abc\n\021\018&quot;</code>（注意这个字符串，<code>\n</code>，<code>\021</code>都是算单个字符，<code>\018</code>又不算）</p></li></ul><blockquote><p>我问gpt，”\018”在C语言几个字符。<br>在C语言中，字符串是以字符数组的形式表示，而每个字符串的末尾都有一个特殊的字符<code>&#39;\0&#39;</code>（空字符），用于标识字符串的结束。当你提到的<code>&quot;\018&quot;</code>在C语言中出现时，它表示一个包含特殊字符的字符串字面量。</p><p>具体来说，<code>\0</code>在C语言中是一个转义字符，用于表示字符串的结束符（null terminator）。该符号用于标记字符串的结束，确保字符串处理函数如<code>printf</code>、<code>strcpy</code>等知道在哪里停止处理。</p><p>在<code>&quot;\018&quot;</code>中，<code>\0</code>表示字符串的结束，后面跟的<code>18</code>并不会作为字符串的一部分来处理。因此，如果你在C语言中使用<code>&quot;\018&quot;</code>，它实际上会被视为只包含一个空字符（<code>\0</code>）的字符串。这意味着，尽管看起来字符串中有更多的字符，但由于<code>\0</code>的存在，它实际上在C语言处理中表示一个空字符串。</p><p>总结来说，在C语言中<code>&quot;\018&quot;</code>实际上会被看作一个包含单一结束字符（null terminator）的字符串，而不是包含多个字符。这种处理方式是因为C语言使用空字符来标记字符串的结束。</p></blockquote><ul><li><p>标识常量：<code>#define</code></p><p>特点：完整的用宏体替换宏名，<strong>不做任何检查</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PI 3.14</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADD 2 + 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADD1 (2 + 3)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX(a, b) (a &gt; b ? a : b)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX1(a, b) ((a) &gt; (b) ? (a) : (b))</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;, ADD * ADD);</span><br>    <span class="hljs-comment">// 相当于 2+3*2+3</span><br>    <span class="hljs-comment">// 故输出11而不是25</span><br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;, ADD1 * ADD1);</span><br>    <span class="hljs-comment">// 相当于(2+3)*(2+3)</span><br>    <span class="hljs-comment">// 正常输出25</span><br><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">5</span>, j = <span class="hljs-number">3</span>;<br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;, MAX(i, j));</span><br>    <span class="hljs-comment">// 输出5</span><br><br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;, MAX(i, j * 2));</span><br>    <span class="hljs-comment">// 输出6</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%d\tj=%d\n&quot;</span>, i, j);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, MAX1(i++, j++));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%d\tj=%d\n&quot;</span>, i, j);<br>    <span class="hljs-comment">// 输出：</span><br>    <span class="hljs-comment">// i = 5 j = 3</span><br>    <span class="hljs-comment">// 6</span><br>    <span class="hljs-comment">// i = 7 j = 4</span><br>    <span class="hljs-comment">// 为什么i自增了两次？</span><br>    <span class="hljs-comment">// 预处理结果</span><br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;, ((i++) + (j++) ? (i++) : (j++)));</span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>解决办法：</p><ol><li>使用函数：函数与宏的区别在于，一个占用编译时间，一个占用运行时间。在<code>linux</code>内核中多用宏。</li><li>在宏中进行变量保存，这种写法超出标准C，属于<code>GNU C</code>的扩展部分，只能在支持的编译器（如<code>gcc</code>）中使用，在<code>linux</code>内核中非常常用。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX2(a, b)               \</span><br><span class="hljs-meta">    (&#123;                           \</span><br><span class="hljs-meta">        int A = a, B = b;        \</span><br><span class="hljs-meta">        ((A) &gt; (B) ? (A) : (B)); \</span><br><span class="hljs-meta">    &#125;)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX3(a, b)               \</span><br><span class="hljs-meta">    (&#123;                           \</span><br><span class="hljs-meta">        typeof(a) A = a, B = b;  \</span><br><span class="hljs-meta">        ((A) &gt; (B) ? (A) : (B)); \</span><br><span class="hljs-meta">    &#125;)</span><br><br></code></pre></td></tr></table></figure></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>用来保存一些特定内容，并且在程序执行过程中值<strong>随时会发生变化</strong>的量。</p><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><table><thead><tr><th align="center">[存储类型]</th><th align="center">数据类型</th><th align="center">标识符</th><th align="center">&#x3D;</th><th align="center">值</th></tr></thead><tbody><tr><td align="center"></td><td align="center">TYPE</td><td align="center">NAME</td><td align="center">&#x3D;</td><td align="center">VALUE</td></tr></tbody></table><ul><li>标识符：由字母，数字，下划线组成且不能以数字开头的一个标识序列。拟定时尽量做到见名知义。</li><li>数据类型：基本数据类型、构造类型</li><li>值：注意匹配</li><li>存储类型：<code>auto</code>，<code>static</code>，<code>register</code>，<code>extern</code>（说明型）<ul><li><code>auto</code>：默认，自动分配空间，自动回收空间。</li><li><code>register</code>：（建议型，编译器不一定采用）寄存器类型，只能定义局部变量，不能定义全局变量；大小有定义，只能定义32位大小的数据类型，如<code>double</code>就不可以；集尘器没有地址，所以一个寄存器类型的变量无法打印出地址查看或使用。</li><li><code>static</code>：静态型，自动初始化为0值或空值，并且变量的值有继承性。另外，常用来修饰一个变量和函数，防止其对外扩散。</li><li><code>extern</code>：说明型，意味着不能改变被说明的变量的值或类型。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br>    x = x + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p-&gt;%d\n&quot;</span>, &amp;x, x);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">func1</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br>    x = x + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p-&gt;%d\n&quot;</span>, &amp;x, x);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><br>    <span class="hljs-comment">// auto int i;</span><br>    <span class="hljs-comment">// printf(&quot;i=%d\n&quot;, i);</span><br>    <span class="hljs-comment">// out:i=21915，每次都不一样</span><br><br>    <span class="hljs-comment">// static int i;</span><br>    <span class="hljs-comment">// printf(&quot;i=%d\n&quot;, i);</span><br>    <span class="hljs-comment">// out:i=1</span><br><br>    <span class="hljs-comment">// func();</span><br>    <span class="hljs-comment">// func();</span><br>    <span class="hljs-comment">// func();</span><br>    <span class="hljs-comment">// out:：</span><br>    <span class="hljs-comment">// 0x7ffc3c4ca4f4-&gt;1</span><br>    <span class="hljs-comment">// 0x7ffc3c4ca4f4-&gt;1</span><br>    <span class="hljs-comment">// 0x7ffc3c4ca4f4-&gt;1</span><br>    <span class="hljs-comment">// 三次地址看着一样</span><br>    <span class="hljs-comment">// 但是是每次函数开始取用，结束销毁的</span><br>    <span class="hljs-comment">// 只是gcc刚好都取的栈上同一块地址</span><br><br>    func1();<br>    func1();<br>    func1();<br>    <span class="hljs-comment">// out:：</span><br>    <span class="hljs-comment">// 0x55fd83c96014-&gt;1</span><br>    <span class="hljs-comment">// 0x55fd83c96014-&gt;2</span><br>    <span class="hljs-comment">// 0x55fd83c96014-&gt;3</span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br><span class="hljs-type">int</span> i = <span class="hljs-number">100</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%d\n&quot;</span>, i);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">3</span>;<br><br>    <span class="hljs-comment">// printf(&quot;i=%d\n&quot;, i);</span><br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// i=3</span><br><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     printf(&quot;i=%d\n&quot;, i);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// i=3</span><br><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     i = 5;</span><br>    <span class="hljs-comment">//     printf(&quot;i=%d\n&quot;, i);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// i=5</span><br><br>    <span class="hljs-comment">// func(i);</span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_star</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]i=%d\n&quot;</span>, __FUNCTION__, i);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>        print_star();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// *****</span><br>    <span class="hljs-comment">// [print_star] i = 5</span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="变量的生命周期与作用范围"><a href="#变量的生命周期与作用范围" class="headerlink" title="变量的生命周期与作用范围"></a>变量的生命周期与作用范围</h4><ol><li>全局变量和局部变量</li><li>局部变量和局部变量</li><li>参考图片存储类型比较</li></ol><p><img src="https://s2.loli.net/2024/03/12/y8pMEXS3LBIDAuc.png" alt="存储类型比较"></p><blockquote><p>这一块具体讲解见代码仓库<code>/Chapter2/变量/</code>。</p></blockquote><p>在<code>minproj</code>例子中，如果在<code>proj.c</code>和<code>proj.h</code>中<code>static</code>定义<code>func</code>函数，而在<code>main.c</code>中调用<code>func</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[main][~/LinuxC/Chapter2/Section5/minproj]$ gcc *.c<br>In file included from main.c:4:<br>proj.h:4:13: warning: ‘func’ used but never defined<br>    4 | static void func(void);<br>      |             ^~~~<br>/usr/bin/ld: /tmp/ccQ2317U.o: <span class="hljs-keyword">in</span> <span class="hljs-keyword">function</span> `main<span class="hljs-string">&#x27;:</span><br><span class="hljs-string">main.c:(.text+0x2f): undefined reference to `func&#x27;</span><br>collect2: error: ld returned 1 <span class="hljs-built_in">exit</span> status<br></code></pre></td></tr></table></figure><h3 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="运算符和表达式"></a>运算符和表达式</h3><h4 id="表达式和语句的区别"><a href="#表达式和语句的区别" class="headerlink" title="表达式和语句的区别"></a>表达式和语句的区别</h4><ul><li><p>运算符部分</p><p><img src="https://s2.loli.net/2024/03/12/3MkPpF5anv7eEGu.png" alt="运算符"></p><ul><li><p>每个运算符所需要的参与运算的操作数个数</p></li><li><p>结合性</p></li><li><p>优先级</p></li><li><p>运算符的特殊用法</p><p>如：<code>%</code>（要求左右两边都是整形），<code>=</code>与<code>==</code>，逻辑运算(<code>&amp;&amp;</code>和<code>||</code>)的短路特性</p></li><li><p>位运算的重要性</p><p><code>&lt;&lt;  &gt;&gt;  ~  |  ^  &amp;</code></p><ol><li><p>将操作数中第n位置1，其他位不变：<code>num = num | 1 &lt;&lt; n;</code></p></li><li><p>将操作数中第n位清0，其他位不变：<code>num = num &amp; ~(1 &lt;&lt; n);</code></p></li><li><p>测试第n位：<code>if(num &amp; 1 &lt;&lt; n)</code></p></li><li><p>从一个指定宽度的数中取出某几位：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 假设取一个32位整数的第10位到第15位</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> number;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mask = ((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">6</span>) - <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">9</span>; <span class="hljs-comment">// 6 是位数（15-10+1），9 是起始位置（10-1）</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> result = number &amp; mask;<br>    result = result &gt;&gt; <span class="hljs-number">9</span>;<br></code></pre></td></tr></table></figure></li></ol></li></ul></li></ul><h4 id="运算符相关代码"><a href="#运算符相关代码" class="headerlink" title="运算符相关代码"></a>运算符相关代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>i++相当于i=i+<span class="hljs-number">1</span><br>i--相当于i=i<span class="hljs-number">-1</span><br><br><span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>i++;表达式值为<span class="hljs-number">1</span>，i值为<span class="hljs-number">2</span><br>++i;表达式值为<span class="hljs-number">2</span>，i值为<span class="hljs-number">2</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">10</span>, value;<br><br>    <span class="hljs-comment">// value = i++ + ++j;</span><br>    <span class="hljs-comment">// 相当于</span><br>    <span class="hljs-comment">// j = j + 1;</span><br>    <span class="hljs-comment">// value = i + j;</span><br>    <span class="hljs-comment">// i = i + 1;</span><br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// i = 0 j = 11 value = 10</span><br><br>    <span class="hljs-comment">// value = --i + j++;</span><br>    <span class="hljs-comment">// i = i - 1;</span><br>    <span class="hljs-comment">// value = i + j;</span><br>    <span class="hljs-comment">// j = j + 1;</span><br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// i = 1 j = 12 value = 12</span><br><br>    <span class="hljs-comment">// value = i++ + ++i - i-- + --i;</span><br>    <span class="hljs-comment">// 避免单个变量多次自增或者自减</span><br>    <span class="hljs-comment">// 不同编译器可能结果不同，也难为自己和他人</span><br><br>    <span class="hljs-comment">// printf(&quot;i=%d\n&quot;, i);</span><br>    <span class="hljs-comment">// printf(&quot;j=%d\n&quot;, j);</span><br>    <span class="hljs-comment">// printf(&quot;value=%d\n&quot;, value);</span><br><br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;, i &gt; j);</span><br><br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>, c = <span class="hljs-number">3</span>, d = <span class="hljs-number">4</span>;<br>    <span class="hljs-type">int</span> m = <span class="hljs-number">1</span>, n = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// (m = a &gt; b) &amp;&amp; (n = c &gt; d);</span><br>    <span class="hljs-comment">// printf(&quot;m = %d\nn = %d\n&quot;, m, n);</span><br>    <span class="hljs-comment">// a&gt;b为假，所以左边为0，右边直接不判断了，n依旧为1而不是0！</span><br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// m = 0</span><br>    <span class="hljs-comment">// n = 1</span><br><br>    (m = a &gt; b) || (n = c &gt; d);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;m = %d\nn = %d\n&quot;</span>, m, n);<br>    <span class="hljs-comment">// a&gt;b为假，所以左边为0，右边继续判断</span><br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// m = 0</span><br>    <span class="hljs-comment">// n = 0</span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">10</span>, value;<br><br>    <span class="hljs-comment">// int a = 6;</span><br>    <span class="hljs-comment">// a -= a *= a += 3;</span><br>    <span class="hljs-comment">// a -=..   81-81=0</span><br>    <span class="hljs-comment">//  a *=.. 9*9=81给上面</span><br>    <span class="hljs-comment">//    a += 3; 6+3=9给上面</span><br>    <span class="hljs-comment">// 故a=0</span><br><br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;, sizeof(int));</span><br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;, sizeof(double));</span><br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// 4</span><br>    <span class="hljs-comment">// 8</span><br><br>    <span class="hljs-comment">// int a = 3;</span><br>    <span class="hljs-comment">// float f = 3.9;</span><br>    <span class="hljs-comment">// a = f;</span><br>    <span class="hljs-comment">// printf(&quot;a=%d\n&quot;, a);</span><br>    <span class="hljs-comment">// printf(&quot;f=%f\n&quot;, f);</span><br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// a=3</span><br>    <span class="hljs-comment">// f=3.900000</span><br><br>    <span class="hljs-comment">// int a = 3;</span><br>    <span class="hljs-comment">// float f = 3.9;</span><br>    <span class="hljs-comment">// a = (int)f; // 这个过程不改变f本身的地址和值</span><br>    <span class="hljs-comment">// printf(&quot;a=%d\n&quot;, a);</span><br>    <span class="hljs-comment">// printf(&quot;f=%f\n&quot;, f);</span><br>    <span class="hljs-comment">// out:</span><br>    <span class="hljs-comment">// a=3</span><br>    <span class="hljs-comment">// f=3.900000</span><br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>李慧芹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下C语言教程-李慧芹老师-第一章</title>
    <link href="/2024/03/10/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2024/03/10/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-%E6%9D%8E%E6%85%A7%E8%8A%B9%E8%80%81%E5%B8%88-%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sinlatansen/Linux-C-Notes">配套代码笔记Github地址</a>。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%BB%AA%E8%AE%BA">第一章 绪论</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E8%8A%82">第一节</a><ul><li><a href="#c%E8%AF%AD%E8%A8%80%E5%8F%91%E5%B1%95%E5%8F%B2">C语言发展史</a></li><li><a href="#c%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9">C语言特点</a></li><li><a href="#c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE">C语言学习建议</a></li><li><a href="#%E8%AF%BE%E7%A8%8B%E6%80%9D%E8%B7%AF">课程思路</a></li><li><a href="#%E8%AF%BE%E7%A8%8B%E5%B9%B3%E5%8F%B0">课程平台</a></li></ul></li><li><a href="#%E7%AC%AC%E4%BA%8C%E8%8A%82">第二节</a><ul><li><a href="#%E7%A5%9E%E4%B8%80%E8%88%AC%E7%9A%84hello-world">神一般的<code>Hello world!</code></a></li><li><a href="#%E6%BA%90%E6%96%87%E4%BB%B6%E5%88%B0%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6">源文件到可执行文件</a><ul><li><a href="#gcc">gcc</a></li><li><a href="#make">make</a></li></ul></li><li><a href="#vim">vim</a></li></ul></li><li><a href="#%E7%AC%AC%E4%B8%89%E8%8A%82">第三节</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">基本概念</a><ul><li><a href="#%E4%BB%A5hello-world%E4%B8%BA%E4%BE%8B%E5%AF%B9%E5%86%99%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%80%9D%E8%B7%AF%E6%8F%90%E5%87%BA%E5%A6%82%E4%B8%8B%E8%A6%81%E6%B1%82">以<code>Hello world</code>为例对写程序的思路提出如下要求</a><ul><li><a href="#1-%E5%A4%B4%E6%96%87%E4%BB%B6%E6%AD%A3%E7%A1%AE%E5%8C%85%E5%90%AB%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7">1. 头文件正确包含的重要性</a></li><li><a href="#2-%E4%BB%A5%E5%87%BD%E6%95%B0%E4%B8%BA%E5%8D%95%E4%BD%8D%E6%9D%A5%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99">2. 以函数为单位来进行程序编写</a></li><li><a href="#3-%E5%A3%B0%E6%98%8E%E9%83%A8%E5%88%86%E5%AE%9E%E7%8E%B0%E9%83%A8%E5%88%86">3. 声明部分+实现部分</a></li><li><a href="#4-return-0exit0">4. <code>return 0/exit(0)</code></a></li><li><a href="#5-%E5%A4%9A%E7%94%A8%E7%A9%BA%E6%A0%BC%E7%A9%BA%E8%A1%8C">5. 多用空格空行</a></li><li><a href="#6-%E6%B7%BB%E5%8A%A0%E6%B3%A8%E9%87%8A">6. 添加注释</a></li></ul></li><li><a href="#%E7%AE%97%E6%B3%95">算法</a></li><li><a href="#%E7%A8%8B%E5%BA%8F">程序</a></li><li><a href="#%E8%BF%9B%E7%A8%8B">进程</a></li><li><a href="#%E9%98%B2%E6%AD%A2%E5%86%99%E8%B6%8A%E7%95%8C%E9%98%B2%E6%AD%A2%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E8%B0%81%E6%89%93%E5%BC%80%E8%B0%81%E5%85%B3%E9%97%AD%E8%B0%81%E7%94%B3%E8%AF%B7%E8%B0%81%E9%87%8A%E6%94%BE">防止写越界，防止内存泄漏，谁打开谁关闭，谁申请谁释放</a></li></ul></li></ul></li></ul></li></ul><h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><p>课程地址，<a href="https://www.bilibili.com/video/BV18p4y167Md/?spm_id_from=333.999.0.0&vd_source=4e03f52e94cfa281cde032856b1f93a7">史上最强最细腻的linux嵌入式C语言学习教程【李慧芹老师】_哔哩哔哩_bilibili</a>。</p><h2 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h2><h3 id="C语言发展史"><a href="#C语言发展史" class="headerlink" title="C语言发展史"></a>C语言发展史</h3><table><thead><tr><th>时间</th><th>发展</th></tr></thead><tbody><tr><td>1960</td><td>原型A语言-&gt;ALGOL语言</td></tr><tr><td>1963</td><td>CPL语言</td></tr><tr><td>1967</td><td>BCPL</td></tr><tr><td>1967</td><td>B语言</td></tr><tr><td>1973</td><td>C语言</td></tr></tbody></table><h3 id="C语言特点"><a href="#C语言特点" class="headerlink" title="C语言特点"></a>C语言特点</h3><ol><li>基础性语言</li><li>语法间接、紧凑、方便、灵活</li><li>运算符，数据结构丰富</li><li>结构化，模块化编程</li><li>移植性好，执行效率高</li><li>允许直接对硬件操作</li></ol><h3 id="C语言学习建议"><a href="#C语言学习建议" class="headerlink" title="C语言学习建议"></a>C语言学习建议</h3><ol><li>概念的正确性</li><li>动手能力</li><li>阅读优秀的程序段</li><li>大量练习，面试题</li></ol><h3 id="课程思路"><a href="#课程思路" class="headerlink" title="课程思路"></a>课程思路</h3><ol><li>基础概念</li><li>数据类型，运算符和表达式</li><li>输入输出专题</li><li>流程控制</li><li>数组</li><li>指针</li><li>函数</li><li>构造类型</li><li>动态内存管理</li><li>调试工具（gdb，make)</li><li>常用库函数</li></ol><h3 id="课程平台"><a href="#课程平台" class="headerlink" title="课程平台"></a>课程平台</h3><ul><li>老师：64位的<code>redhat6</code>，<code>vim</code>，<code>gcc4.4.6(make)</code></li><li>本人：<code>WSL-debian</code>，<code>vscode(remote ssh)</code>，<code>gcc12.2.0(make)</code>，<code>ohmyzsh(theme:eastwood)</code></li></ul><p>我的<code>gcc</code>版本比较新，所以很多提示比较完善，老师这个课程是很早的课，那个时候的gcc提示没有现在厉害，所以还是要结合老师的视频的思路，在当时提示不完善的时候是如何手撕代码分析出来的。</p><h2 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h2><h3 id="神一般的Hello-world"><a href="#神一般的Hello-world" class="headerlink" title="神一般的Hello world!"></a>神一般的<code>Hello world!</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//hello.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span>;<span class="hljs-comment">// char *argv[]</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello world!\n&quot;</span>);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>用那种<code>main</code>得看编译器环境，目前在<code>linux</code>的<code>gcc</code>下，<code>int main(void);</code>常用，需要传参用<code>int main(int argc, char **argv);</code>。</p><h3 id="源文件到可执行文件"><a href="#源文件到可执行文件" class="headerlink" title="源文件到可执行文件"></a>源文件到可执行文件</h3><h4 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h4><p>C源文件&#x3D;&gt;预处理&#x3D;&gt;编译&#x3D;&gt;汇编&#x3D;&gt;链接&#x3D;&gt;可执行文件</p><blockquote><p>所有<code>#</code>后面的代码都在预处理解决</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 单步执行</span><br>gcc -E hello.c &gt; hello.i <span class="hljs-comment"># 预处理生成hello.i</span><br>gcc -S hello.i <span class="hljs-comment"># 编译生成hello.s</span><br>gcc -c hello.s <span class="hljs-comment"># 汇编生成hello.o</span><br>gcc hello.o -o hello <span class="hljs-comment"># 链接生成hello</span><br>./hello <span class="hljs-comment"># 运行</span><br>Hello world!<br><br><span class="hljs-comment"># 一次到位</span><br>gcc hello.c <span class="hljs-comment"># 得到a.out可执行文件</span><br><span class="hljs-comment"># 指定名字</span><br>gcc hello.c -o myhello <span class="hljs-comment"># 得到myhello可执行文件</span><br></code></pre></td></tr></table></figure><h4 id="make"><a href="#make" class="headerlink" title="make"></a>make</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ make hello<br>cc  hello.c  -o hello<br><span class="hljs-comment"># cc就是make选择的编译器，这里是gcc</span><br>$ <span class="hljs-built_in">ls</span><br>hello hello.c<br></code></pre></td></tr></table></figure><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>老师对于常用的<code>.vimrc</code>做了一些介绍，笔者建议<code>vscode</code>的<code>remote-ssh</code>插件，可以在win的vscode编辑器享受linux的环境。</p><h2 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="以Hello-world为例对写程序的思路提出如下要求"><a href="#以Hello-world为例对写程序的思路提出如下要求" class="headerlink" title="以Hello world为例对写程序的思路提出如下要求"></a>以<code>Hello world</code>为例对写程序的思路提出如下要求</h4><h5 id="1-头文件正确包含的重要性"><a href="#1-头文件正确包含的重要性" class="headerlink" title="1. 头文件正确包含的重要性"></a>1. 头文件正确包含的重要性</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> *p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> i;<br>    p = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello world!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我的gcc版本比较新，所以和老师的不一致，总之老师的意思就是</p><blockquote><p> 不要忽略gcc的警告！！！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 通过 -Wall 参数让gcc显示全部警告</span><br><span class="hljs-comment"># 注意&#x27;W&#x27;要大写</span><br>$ gcc hello.c -Wall<br>hello.c: In <span class="hljs-keyword">function</span> ‘main’:<br>hello.c:7:9: warning: implicit declaration of <span class="hljs-keyword">function</span> ‘malloc’ [-Wimplicit-function-declaration]<br>    7 |     p = malloc(sizeof(int));<br>      |         ^~~~~~<br>hello.c:2:1: note: include ‘&lt;stdlib.h&gt;’ or provide a declaration of ‘malloc’<br>    1 | <span class="hljs-comment">#include &lt;stdio.h&gt;</span><br>  +++ |+#include &lt;stdlib.h&gt;<br>    2 | <br>hello.c:7:9: warning: incompatible implicit declaration of built-in <span class="hljs-keyword">function</span> ‘malloc’ [-Wbuiltin-declaration-mismatch]<br>    7 |     p = malloc(sizeof(int));<br>      |         ^~~~~~<br>hello.c:7:9: note: include ‘&lt;stdlib.h&gt;’ or provide a declaration of ‘malloc’<br>hello.c:6:9: warning: unused variable ‘i’ [-Wunused-variable]<br>    6 |     int i;<br>      |         ^<br><br></code></pre></td></tr></table></figure><ul><li>例如说这个变量<code>i</code>定义了但是没用上，就是你清楚来龙去脉可以忽略的警告。</li><li>而<code>malloc</code>那个警告就是在告诉你<code>malloc</code>所属的<code>stdlib.h</code>库未引入。</li><li>C语言程序往往如果能把警告都消除，错误也能解决。例如：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    FILE *fp;<br><br>    fp = fopen(<span class="hljs-string">&quot;tmp&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fopen():%s\n&quot;</span>, strerror(errno));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ok!&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序运行报段错误，这个时候，查看一下警告就是问题所在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./a<br>[1]    1960 segmentation fault  ./a<br><br>$ gcc a.c -Wall    <br>a.c: In <span class="hljs-keyword">function</span> ‘main’:<br>a.c:12:41: warning: implicit declaration of <span class="hljs-keyword">function</span> ‘strerror’; did you mean ‘perror’? [-Wimplicit-function-declaration]<br>   12 |         fprintf(stderr, <span class="hljs-string">&quot;fopen():%s\n&quot;</span>, strerror(errno));<br>      |                                         ^~~~~~~~<br>      |                                         perror<br>a.c:12:35: warning: format ‘%s’ expects argument of <span class="hljs-built_in">type</span> ‘char *’, but argument 3 has <span class="hljs-built_in">type</span> ‘int’ [-Wformat=]<br>   12 |         fprintf(stderr, <span class="hljs-string">&quot;fopen():%s\n&quot;</span>, strerror(errno));<br>      |                                  ~^     ~~~~~~~~~~~~~~~<br>      |                                   |     |<br>      |                                   |     int<br>      |                                   char *<br>      |                                  %d<br></code></pre></td></tr></table></figure><p>用<code>%s</code>需要的类型是<code>char *</code>，但是<code>strerror(errno)</code>的类型是<code>int</code>，它是所以是<code>int</code>，是因为C语言对没有找到原型的函数返回值都是<code>int</code>，所以根源在于<code>strerror</code>函数没有原型，没有引入需要的<code>string.h</code>库。加入这个库重新运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[main][~/LinuxC/Chapter1/Section3]$ make a<br>cc     a.c   -o a<br>[main][~/LinuxC/Chapter1/Section3]$ ./a     <br>fopen():No such file or directory<br></code></pre></td></tr></table></figure><h5 id="2-以函数为单位来进行程序编写"><a href="#2-以函数为单位来进行程序编写" class="headerlink" title="2. 以函数为单位来进行程序编写"></a>2. 以函数为单位来进行程序编写</h5><p>main&#96;是特殊的定义，其实就是一个正在运行的线程。其实对于内核而言，是只有进程的概念，且与我们理解的进程、线程不一样。</p><h5 id="3-声明部分-实现部分"><a href="#3-声明部分-实现部分" class="headerlink" title="3. 声明部分+实现部分"></a>3. 声明部分+实现部分</h5><p>早期的编译器要求变量先定义后使用。</p><h5 id="4-return-0-exit-0"><a href="#4-return-0-exit-0" class="headerlink" title="4. return 0/exit(0)"></a>4. <code>return 0/exit(0)</code></h5><p>结束当前进程，是给父进程看的。</p><p>对于带有<code>return 0</code>的程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[main][~/LinuxC/Chapter1/Section3]$ ./hello<br>Hello world!<br>[main][~/LinuxC/Chapter1/Section3]$ <span class="hljs-built_in">echo</span> $?<br>0<br></code></pre></td></tr></table></figure><p>如果不带<code>return 0</code>：</p><p>老师演示的返回值是13，是<code>printf</code>的返回的<code>Hello world!\n</code>的长度。</p><p>在我本地无法复现，新版本可能改了。</p><h5 id="5-多用空格空行"><a href="#5-多用空格空行" class="headerlink" title="5. 多用空格空行"></a>5. 多用空格空行</h5><h5 id="6-添加注释"><a href="#6-添加注释" class="headerlink" title="6. 添加注释"></a>6. 添加注释</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//单行注释</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 多行注释</span><br><span class="hljs-comment"> * 多行注释</span><br><span class="hljs-comment"> * 多行注释</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//大段的注释</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>func()&#123;<br>  <br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>解决问题的方法。（流程图，NS图，FSM有限状态机）</p><h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><p>用某种语言实现算法</p><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><h4 id="防止写越界，防止内存泄漏，谁打开谁关闭，谁申请谁释放"><a href="#防止写越界，防止内存泄漏，谁打开谁关闭，谁申请谁释放" class="headerlink" title="防止写越界，防止内存泄漏，谁打开谁关闭，谁申请谁释放"></a>防止写越界，防止内存泄漏，谁打开谁关闭，谁申请谁释放</h4>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>李慧芹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm报错：OpenSSL版本错误</title>
    <link href="/2024/03/07/npm%E6%8A%A5%E9%94%99%EF%BC%9AOpenSSL%E7%89%88%E6%9C%AC%E9%94%99%E8%AF%AF/"/>
    <url>/2024/03/07/npm%E6%8A%A5%E9%94%99%EF%BC%9AOpenSSL%E7%89%88%E6%9C%AC%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<p>问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm -v<br>node: /usr/local/lighthouse/softwares/openssl/lib/libcrypto.so.1.1: version `OPENSSL_1_1_1e<span class="hljs-string">&#x27; not found (required by /lib64/libnode.so.93)</span><br></code></pre></td></tr></table></figure><p><code>npm</code>报错，发现<code>openssl</code>版本有问题。</p><p>进入<code>openssl</code>目录发现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ openssl version<br>OpenSSL 1.1.1e  17 Mar 2020 (Library: OpenSSL 1.1.1d  10 Sep 2019)<br></code></pre></td></tr></table></figure><p><code>openssl</code>的版本和库的版本不一致。</p><p>处理办法：删除<code>1.1.1d</code>。</p><p>在<code>/usr/local/lighthouse/softwares/openssl/lib</code>和<code>/usr/local/lib64</code>都有<code>openssl</code>的库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">strings /usr/local/lib64/libcrypto.so.1.1 | grep <span class="hljs-string">&quot;OpenSSL&quot;</span><br></code></pre></td></tr></table></figure><p>通过这个命令找到<code>openssl</code>字符串所在行，里面就找到了版本号，发现<code>/usr/local/lighthouse/softwares/openssl/lib是1.1.1d</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /backup/openssl<br><span class="hljs-built_in">cp</span> -R /usr/local/lighthouse/softwares/openssl /backup/openssl/<br><span class="hljs-built_in">rm</span> -rf /usr/local/lighthouse/softwares/openssl/lib/*<br></code></pre></td></tr></table></figure><p>备份且删除即可，删除之后发现一切正常了，即可删除备份。</p>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
      <tag>openssl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过nginx实现对web应用的js注入和在线人数限制</title>
    <link href="/2024/03/06/%E9%80%9A%E8%BF%87nginx%E5%AE%9E%E7%8E%B0%E5%AF%B9web%E5%BA%94%E7%94%A8%E7%9A%84js%E6%B3%A8%E5%85%A5%E5%92%8C%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0%E9%99%90%E5%88%B6/"/>
    <url>/2024/03/06/%E9%80%9A%E8%BF%87nginx%E5%AE%9E%E7%8E%B0%E5%AF%B9web%E5%BA%94%E7%94%A8%E7%9A%84js%E6%B3%A8%E5%85%A5%E5%92%8C%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0%E9%99%90%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>通过<code>docker</code>运行的<code>cogpt</code>和<code>chatgpt next web</code>不太好改源码，无法从后端或者前端限制人数。只能曲线救国，通过<code>nginx</code>进行 js 注入<code>umami</code>跟踪代码，然后加一个 php 中转界面进行鉴定是否跳转。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nginxconf配置文件</span><br>server &#123;<br>        listen 80; <span class="hljs-comment"># 或者443如果你使用SSL</span><br>        server_name gpt.lzyyyyyy.fun;<br>        root /var/gpt-boss;<br><br>        <span class="hljs-comment"># 所有其他请求都重定向到boss.php，包括 /api 和 /guest</span><br>        location / &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$http_cookie</span> !~* <span class="hljs-string">&quot;auth=&quot;</span>) &#123;<br>                rewrite ^/(.*)$ /boss.php last;<br>            &#125;<br>            proxy_pass http://localhost:3000;<br>            proxy_set_header Host <span class="hljs-variable">$host</span>;<br>            proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>            proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>            proxy_set_header X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br><br>        &#125;<br><br><br>        location /api/ &#123;<br>           proxy_pass http://localhost:3000;<br>           proxy_set_header Host <span class="hljs-variable">$host</span>;<br>           proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>           proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>           proxy_set_header X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>        &#125;<br><br><br>        location /admin &#123;<br>            <span class="hljs-comment"># 当访问 /admin 时，直接跳转到 localhost:3000</span><br>            proxy_pass http://localhost:3000/;<br>            proxy_set_header Host <span class="hljs-variable">$host</span>;<br>            proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>            proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>            proxy_set_header X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>        &#125;<br><br>        location /guest &#123;<br>            <span class="hljs-comment"># 检查是否存在通过验证的 cookie</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$http_cookie</span> !~* <span class="hljs-string">&quot;auth&quot;</span>) &#123;<br>                <span class="hljs-comment"># return 302 /boss.php;</span><br>                rewrite ^/(.*)$ /boss.php last;<br>            &#125;<br>            proxy_pass http://localhost:3000/;<br>            proxy_set_header Host <span class="hljs-variable">$host</span>;<br>            proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>            proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>            proxy_set_header X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br><br>            <span class="hljs-comment"># 开启响应内容替换</span><br>            sub_filter_once on;<br>            <span class="hljs-comment"># sub_filter_types text/html;</span><br>            sub_filter <span class="hljs-string">&#x27;&lt;/head&gt;&#x27;</span> <span class="hljs-string">&#x27;&lt;script async src=&quot;http://umami.lzyyyyyy.fun/script.js&quot; data-website-id=&quot;cd2c9621-98e6-440b-9e10-fb5269721d31&quot;&gt;&lt;/script&gt;&lt;/head&gt;&#x27;</span>;<br><br>            <span class="hljs-comment"># 以下配置确保内容长度正确</span><br>            proxy_set_header Accept-Encoding <span class="hljs-string">&quot;&quot;</span>;<br>            sub_filter_last_modified on;<br>        &#125;<br><br>        location /_next/ &#123;<br>            proxy_pass http://localhost:3000;<br>            proxy_set_header Host <span class="hljs-variable">$host</span>;<br>            proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>            proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>            proxy_set_header X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>        &#125;<br><br><br>        <span class="hljs-comment"># 为 PHP 文件添加新的 location 块</span><br>        location ~ .*\.php(/.*)*$ &#123;<br>            include fastcgi.conf;<br>            fastcgi_pass   127.0.0.1:9000;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>然后是<code>boss.php</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// 读取 config.json 文件内容</span><br><span class="hljs-variable">$jsonString</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;config.json&#x27;</span>);<br><br><span class="hljs-comment">// 解析 JSON 数据为 PHP 数组</span><br><span class="hljs-variable">$config</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$jsonString</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-variable">$loginUrl</span> = <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;loginUrl&#x27;</span>];<br><span class="hljs-variable">$activeUsersUrl</span> = <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;activeUsersUrl&#x27;</span>];<br><br><span class="hljs-comment">// Function to perform a cURL request</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curlRequest</span>(<span class="hljs-params"><span class="hljs-variable">$url</span>, <span class="hljs-variable">$postFields</span> = <span class="hljs-literal">null</span>, <span class="hljs-variable">$headers</span> = []</span>) </span>&#123;<br>    <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$postFields</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_POST, <span class="hljs-literal">true</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_POSTFIELDS, <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$postFields</span>));<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$headers</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HTTPHEADER, <span class="hljs-variable">$headers</span>);<br>    &#125;<br>    <span class="hljs-variable">$response</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>    <span class="hljs-comment">// echo $response;</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">curl_errno</span>(<span class="hljs-variable">$ch</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$response</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-comment">// 生成一个随机的字符串作为 cookie 值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateRandomString</span>(<span class="hljs-params"><span class="hljs-variable">$length</span> = <span class="hljs-number">50</span></span>) </span>&#123;<br>    <span class="hljs-variable">$characters</span> = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;<br>    <span class="hljs-variable">$charactersLength</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$characters</span>);<br>    <span class="hljs-variable">$randomString</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$length</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$randomString</span> .= <span class="hljs-variable">$characters</span>[<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">0</span>, <span class="hljs-variable">$charactersLength</span> - <span class="hljs-number">1</span>)];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$randomString</span>;<br>&#125;<br><br><br><span class="hljs-comment">// Get authentication token</span><br><span class="hljs-variable">$authResponse</span> = <span class="hljs-title function_ invoke__">curlRequest</span>(<span class="hljs-variable">$loginUrl</span>, [<span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-variable">$username</span>, <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-variable">$password</span>], [<span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span>]);<br><span class="hljs-variable">$token</span> = <span class="hljs-variable">$authResponse</span>[<span class="hljs-string">&#x27;token&#x27;</span>] ?? <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$token</span>) &#123;<br>    <span class="hljs-comment">// Fetch active users</span><br>    <span class="hljs-comment">// Fetch active users</span><br>    <span class="hljs-variable">$activeUsersData</span> = <span class="hljs-title function_ invoke__">curlRequest</span>(<span class="hljs-variable">$activeUsersUrl</span>, <span class="hljs-literal">null</span>, [<span class="hljs-string">&#x27;Authorization: Bearer &#x27;</span> . <span class="hljs-variable">$token</span>]);<br>    <span class="hljs-comment">// 假设我们只关心第一个元素的 &#x27;x&#x27; 值</span><br>    <span class="hljs-variable">$activeUsers</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$activeUsersData</span>[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;x&#x27;</span>]) ? <span class="hljs-variable">$activeUsersData</span>[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;x&#x27;</span>] : <span class="hljs-string">&#x27;Unavailable&#x27;</span>;<br><br>    <span class="hljs-comment">//支持最多&#123;&#123;people+1&#125;&#125;人同时使用</span><br>    <span class="hljs-variable">$people</span>=<span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">// 根据在线用户数显示不同的消息</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-variable">$activeUsers</span> &gt; <span class="hljs-variable">$people</span> ?  <span class="hljs-string">&quot;抱歉，当前在线用户数已达到限制。&quot;</span>: <span class="hljs-string">&quot;在线用户数少于指定人数，欢迎访问。&quot;</span>;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">    &lt;html&gt;</span><br><span class="hljs-string">    &lt;head&gt;</span><br><span class="hljs-string">        &lt;title&gt;LZY&#x27;s GPT 在线用户检查&lt;/title&gt;</span><br><span class="hljs-string">        &lt;style&gt;</span><br><span class="hljs-string">            body &#123;</span><br><span class="hljs-string">                font-family: &#x27;Arial&#x27;, sans-serif;</span><br><span class="hljs-string">                margin: 0;</span><br><span class="hljs-string">                padding: 0;</span><br><span class="hljs-string">                background-color: #f4f4f4;</span><br><span class="hljs-string">                color: #333;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">            .container &#123;</span><br><span class="hljs-string">                max-width: 600px;</span><br><span class="hljs-string">                margin: 50px auto;</span><br><span class="hljs-string">                padding: 20px;</span><br><span class="hljs-string">                background-color: #fff;</span><br><span class="hljs-string">                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">            h1 &#123;</span><br><span class="hljs-string">                color: #0066cc;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">            p &#123;</span><br><span class="hljs-string">                line-height: 1.6;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">            .alert &#123;</span><br><span class="hljs-string">                padding: 20px;</span><br><span class="hljs-string">                background-color: #f44336; /* Red */</span><br><span class="hljs-string">                color: white;</span><br><span class="hljs-string">                margin-bottom: 15px;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">            .info &#123;</span><br><span class="hljs-string">                padding: 20px;</span><br><span class="hljs-string">                background-color: #2196F3; /* Blue */</span><br><span class="hljs-string">                color: white;</span><br><span class="hljs-string">                margin-bottom: 15px;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">            a &#123;</span><br><span class="hljs-string">                color: #2196F3;</span><br><span class="hljs-string">                text-decoration: none;</span><br><span class="hljs-string">                font-weight: bold;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &lt;/style&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$activeUsers</span> &lt; <span class="hljs-variable">$people</span>+<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-variable">$randomString</span> = <span class="hljs-title function_ invoke__">generateRandomString</span>(); <span class="hljs-comment">// 默认长度为 50</span><br>        <span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&quot;auth&quot;</span>, <span class="hljs-variable">$randomString</span>, <span class="hljs-title function_ invoke__">time</span>() + <span class="hljs-number">1800</span>); <span class="hljs-comment">// 设置 cookie，有效期为 30 分钟</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;meta http-equiv=&#x27;refresh&#x27; content=&#x27;3; url=http://gpt.lzyyyyyy.fun/guest&#x27;&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/head&gt;</span><br><span class="hljs-string">    &lt;body&gt;</span><br><span class="hljs-string">        &lt;div class=&#x27;container&#x27;&gt;</span><br><span class="hljs-string">            &lt;h1&gt;欢迎使用LZY&#x27;s GPT。&lt;/h1&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$activeUsers</span> &lt; <span class="hljs-variable">$people</span>+<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;div class=&#x27;info&#x27;&gt;<span class="hljs-subst">&#123;$message&#125;</span>&lt;/div&gt;</span><br><span class="hljs-string">            &lt;p&gt;三秒后将自动跳转...&lt;/p&gt;&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;div class=&#x27;alert&#x27;&gt;<span class="hljs-subst">&#123;$message&#125;</span>&lt;/div&gt;</span><br><span class="hljs-string">            &lt;p&gt;这会使用人数有点多噢，不如去 &lt;a href=&#x27;https://lzyyyyyy.fun&#x27;&gt;fugu&#x27;s 博客&lt;/a&gt;逛逛叭~&lt;/p&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;    &lt;/div&gt;</span><br><span class="hljs-string">    &lt;/body&gt;</span><br><span class="hljs-string">    &lt;/html&gt;&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Handle error in getting auth token</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;div class=&#x27;container&#x27;&gt;</span><br><span class="hljs-string">                &lt;div class=&#x27;alert&#x27;&gt;无法认证，请检查配置。&lt;/div&gt;</span><br><span class="hljs-string">            &lt;/div&gt;&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>实现了中转鉴定。然后通过设置<code>cookie</code>避免短时间内多次鉴定。</p><hr><p>后来发现登陆界面<code>/#/auth</code>无法正常跳转，关键点：</p><ol><li>对 cookie 进行鉴定，避免再次到达 boss 界面。</li><li>这种包含<code>#</code>的路径，是前端内部路由，对于服务器而言依旧是<code>/</code>路径，需要正确转发到<code>3000</code>端口，否则页面请求资源会到<code>root /var/gpt-boss</code>这个路径下请求了，而不会进入容器内部。</li></ol>]]></content>
    
    
    <categories>
      
      <category>geek</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过Edge开发工具在iPhone真机Safari中调试网页</title>
    <link href="/2024/02/28/%E9%80%9A%E8%BF%87Edge%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%9C%A8iPhone%E7%9C%9F%E6%9C%BASafari%E4%B8%AD%E8%B0%83%E8%AF%95%E7%BD%91%E9%A1%B5/"/>
    <url>/2024/02/28/%E9%80%9A%E8%BF%87Edge%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%9C%A8iPhone%E7%9C%9F%E6%9C%BASafari%E4%B8%AD%E8%B0%83%E8%AF%95%E7%BD%91%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<p>有关响应式布局的问题，虽然 edge 开发者工具可以提供各种尺寸来模拟，但是我的背景图片模拟的时候是正常的，到手机上就是不正常，实在是找不出问题，不得不真机进行调试。</p><h1 id="win10-端安装相关工具"><a href="#win10-端安装相关工具" class="headerlink" title="win10 端安装相关工具"></a>win10 端安装相关工具</h1><p>我的电脑端早就安装了<code>scroop</code>和<code>nodejs</code>，所以安装起来很简单。</p><p>[note type&#x3D;”warning flat”]需要以管理员方式打开终端才能正常使用 npm。[&#x2F;note]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">scoop install ios-webkit-debug-proxy<br>npm install vs-libimobile -g<br>npm install remotedebug-ios-webkit-adapter -g<br></code></pre></td></tr></table></figure><h1 id="准备好-iPhone"><a href="#准备好-iPhone" class="headerlink" title="准备好 iPhone"></a>准备好 iPhone</h1><ol><li>将 iPhone 通过数据线连接到电脑，打开爱思助手或者<code>iTunes</code>（如果有什么问题，就全部都打开），信任此电脑。</li><li>进入 iPhone-&gt;设置-&gt;safari 浏览器-&gt;高级，将网页检查器和<code>JavaScript</code>打开。</li></ol><h1 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h1><ul><li>终端开启调试监听端口<code>9222</code>。网上教程都是用的默认端口是<code>9000</code>，一直报错，最后在<code>Github</code>的一篇<code>issue</code>找到解决办法，改用<code>9222</code>端口即可。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 找到你的node安装路径</span><br><span class="hljs-built_in">cd</span> E:/NODE/node_global<br>remotedebug_ios_webkit_adapter --port=9222<br></code></pre></td></tr></table></figure><ul><li><code>edge</code>浏览器进入<code>edge://inspect/#devices</code>，理论上来讲要输入<code>localhost:9222</code>连接一下，但是我的连接不上。iPhone 直接在<code>safari</code>浏览网页，下面就出现了，<code>inspect</code>进去就可以调试啦。</li></ul><h1 id="依旧存在的问题"><a href="#依旧存在的问题" class="headerlink" title="依旧存在的问题"></a>依旧存在的问题</h1><p>现在能进入调试界面，但是只能查看元素，无法进行一些改动。一改动就报错，导致调试断开。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># remotedebug_ios_webkit_adapter --port=9222</span><br>remotedebug-ios-webkit-adapter is listening on port 9222<br>node:internal/process/promises:289<br>            triggerUncaughtException(err, <span class="hljs-literal">true</span> /* fromPromise */);<br>            ^<br><br>[UnhandledPromiseRejection: This error originated either by throwing inside of an async <span class="hljs-keyword">function</span> without a catch block,<br>or by rejecting a promise <span class="hljs-built_in">which</span> was not handled with .catch(). The promise rejected with the reason <span class="hljs-string">&quot;#&lt;Object&gt;&quot;</span>.] &#123;<br>  code: <span class="hljs-string">&#x27;ERR_UNHANDLED_REJECTION&#x27;</span><br>&#125;<br><br>Node.js v20.11.0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>edge</tag>
      
      <tag>safari</tag>
      
      <tag>ios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tmux终端复用器安装及简单配置</title>
    <link href="/2024/02/26/tmux%E7%BB%88%E7%AB%AF%E5%A4%8D%E7%94%A8%E5%99%A8%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/02/26/tmux%E7%BB%88%E7%AB%AF%E5%A4%8D%E7%94%A8%E5%99%A8%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>有时候一个终端命令需要运行很久，如果中途 ssh 断掉的话，就会丢失会话。<code>tmux</code>可以很好的解决这一个痛点。</p><ol><li>安装<br>　　<code>CentOS7</code>的<code>yum</code>软件仓库实在是老旧，直接<code>yum install</code>下载的居然是<em>1.8</em>版本。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更新仓库</span><br>yum install http://galaxy4.net/repo/galaxy4-release-7-current.noarch.rp<br>yum install tmux<br><span class="hljs-comment"># 检查版本</span><br>tmux -V<br></code></pre></td></tr></table></figure><ol start="2"><li>配置<br>　　参考 b 站<strong>TheCW</strong>大佬的<a href="https://www.bilibili.com/video/BV1ML411h7tF/?p=1">视频</a>，加入了一些简单的配置。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建配置文件</span><br>vim ~/.tmux.conf<br><br><span class="hljs-comment"># 加载配置文件（在tmux外）</span><br>tmux source-file ~/.tmux.conf<br><br><span class="hljs-comment">########################</span><br><span class="hljs-comment"># 配置文件如下</span><br><br><span class="hljs-comment"># 鼠标支持</span><br><span class="hljs-built_in">set</span> -g mouse on<br><br><span class="hljs-comment"># -- prefix</span><br>unbind C-b<br><span class="hljs-built_in">set</span> -g prefix <span class="hljs-string">&#x27;C-j&#x27;</span><br><br><span class="hljs-comment"># 窗口间切换</span><br><span class="hljs-comment"># bind -r是指可以在一次前缀键后多次切换</span><br><span class="hljs-built_in">bind</span> -r C-p previous-window<br><span class="hljs-built_in">bind</span> -r C-n next-window<br><br><span class="hljs-comment"># pane间切换</span><br><span class="hljs-comment"># M是指alt键</span><br><span class="hljs-built_in">bind</span> -n M-h select-pane -L<br><span class="hljs-built_in">bind</span> -n M-j select-pane -D<br><span class="hljs-built_in">bind</span> -n M-k select-pane -U<br><span class="hljs-built_in">bind</span> -n M-l select-pane -R<br><br><span class="hljs-comment"># window分割</span><br><span class="hljs-built_in">bind</span> | split-window -h  <span class="hljs-comment"># 水平分割窗口</span><br><span class="hljs-built_in">bind</span> - split-window -v  <span class="hljs-comment"># 垂直分割窗口</span><br>unbind <span class="hljs-string">&#x27;&quot;&#x27;</span><br>unbind %<br><br><span class="hljs-comment"># 自动窗口重新编号</span><br><span class="hljs-built_in">set</span> -g renumber-windows on<br><br><span class="hljs-comment"># 自定义状态栏</span><br><span class="hljs-built_in">set</span> -g status-right <span class="hljs-string">&#x27;Session: #S | Window: #I | Pane: #P | %d %b %Y %H:%M&#x27;</span><br><span class="hljs-built_in">set</span> -g status-interval 60  <span class="hljs-comment"># 状态栏刷新间隔</span><br><br><span class="hljs-comment"># 使用快捷键r重新读取配置文件</span><br><span class="hljs-built_in">bind</span> r source-file ~/.tmux.conf\; display <span class="hljs-string">&quot;Reloaded!&quot;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>系统默认快捷键<br>　　参考另外两篇文章。 1. <a href="https://blog.csdn.net/web_snail/article/details/108390645">tmux 常用配置与快捷键使用</a>。 2. <a href="https://zhuanlan.zhihu.com/p/137715607">Tmux 的常用快捷键</a>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>geek</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tmux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（本地部署+Vercel部署）Umami开源网站统计分析工具</title>
    <link href="/2024/02/21/%EF%BC%88%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2+Vercel%E9%83%A8%E7%BD%B2%EF%BC%89Umami%E5%BC%80%E6%BA%90%E7%BD%91%E7%AB%99%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
    <url>/2024/02/21/%EF%BC%88%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2+Vercel%E9%83%A8%E7%BD%B2%EF%BC%89Umami%E5%BC%80%E6%BA%90%E7%BD%91%E7%AB%99%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<p>之前了解过有 51la 这种第三方的网站统计分析工具，不想用，偶然看到这个开源自部署的，就弄了一个，<a href="https://umami.is/">umami 官网</a>。<br>　　<a href="http://%E3%80%80%E3%80%80https://hub.docker.com/r/elestio/umami">dockerhub 地址</a>，用的这个老哥的镜像，跟着说明来就完事了。</p><ol><li>老朋友 docker-compose 启动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">version: <span class="hljs-string">&#x27;3&#x27;</span><br>services:<br>  umami:<br>    image: ghcr.io/umami-software/umami:postgresql-latest<br>    ports:<br>      - <span class="hljs-string">&quot;3956:3000&quot;</span><br>    environment:<br>      DATABASE_URL: postgresql://umami:<span class="hljs-variable">$&#123;ADMIN_PASSWORD&#125;</span>@db:5432/umami<br>      DATABASE_TYPE: postgresql<br>      APP_SECRET: <span class="hljs-variable">$&#123;SECRET_KEY_BASE&#125;</span><br>    depends_on:<br>      - db<br>    restart: always<br>    networks:<br>      - umami-network<br>    container_name: umami_app<br>  db:<br>    image: postgres:15-alpine<br>    environment:<br>      POSTGRES_DB: umami<br>      POSTGRES_USER: umami<br>      POSTGRES_PASSWORD: <span class="hljs-variable">$&#123;ADMIN_PASSWORD&#125;</span><br>    volumes:<br>      - ./umami-db-data:/var/lib/postgresql/data<br>    restart: always<br>    networks:<br>      - umami-network<br>    container_name: umami_db<br><br>networks:<br>  umami-network:<br></code></pre></td></tr></table></figure><p>里面<code>$&#123;XXX&#125;</code>的变量你可以写在同目录<code>.env</code>文件更安全，也可以直接写进 docker-compose。<br>　　<code>docker-compose up -d</code>启动，这个过程有点慢，忘记开全局魔法了。成功启动之后，访问端口<code>3956</code>即可，初始账号<code>admin</code>，初始密码<code>umami</code>，进去可以改成中文然后改一下密码。</p><ol start="2"><li>链接到自己的网站。<br>　　在管理界面添加网站绑定域名，即可获得一个<code>script</code>脚本，添加到网页的<code>header</code>部分即可。<br>　　我平时自己开发网站的主题是直接服务器上改的，所以会不停的刷新网页，这样会导致浏览量会加太多，都是自己刷的，没有意义。所以加入了一个 cookie 验证的办法。<br>　　首先，<code>F12</code>进入 edge 浏览器开发者工具，在<strong>应用程序</strong>的<code>Cookies</code>栏添加一个<code>cookie</code>，名称就是<code>disableUmami</code>，值可以设置为<code>true</code>或任何非空字符串。将路径设置为<code>/</code>。<br>　　然后网页头部的脚本套上一个判断，这样访客基本都是货真价实的啦。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-comment">// 检查 Cookie 是否设置了 disableUmami</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkCookie</span>(<span class="hljs-params">name</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;;&#x27;</span>).<span class="hljs-title function_">some</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>        <span class="hljs-keyword">return</span> item.<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">startsWith</span>(name + <span class="hljs-string">&#x27;=&#x27;</span>);<br>      &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">checkCookie</span>(<span class="hljs-string">&#x27;disableUmami&#x27;</span>)) &#123;<br>      <span class="hljs-comment">// 如果没有禁用 Umami，动态加载跟踪脚本</span><br>      <span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br>      script.<span class="hljs-property">async</span> = <span class="hljs-literal">true</span>;<br>      script.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;http://&#123;&#123;你的umami域名&#125;&#125;/script.js&quot;</span>;<br>      script.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;data-website-id&quot;</span>, <span class="hljs-string">&quot;&#123;&#123;你的网站id&#125;&#125;&quot;</span>);<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(script);<br>    &#125;<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>调用 API 前台显示<br>　　目前这个样子只是在<code>umami</code>后台可以看到统计数据，如果有些数据想展示到前端，<code>umami</code>提供了 API，文档很详细。不过要注意的是请求数据之前首先要请求<code>TOKEN</code>，下面是一个获取网站在线人数的脚本，这个只在网页刷新时更新，目前还没有做实时更新。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">webinfo</span>-<span class="hljs-title">item</span>&quot;&gt;</span><br><span class="hljs-class">    &lt;?<span class="hljs-title">php</span></span><br><span class="hljs-class">    // <span class="hljs-title">Umami</span> <span class="hljs-title">API</span> 的基本信息</span><br><span class="hljs-class">    $<span class="hljs-title">loginUrl</span> = &#x27;<span class="hljs-title">http</span>://</span>&#123;&#123;你的umami域名&#125;&#125;/api/auth/login<span class="hljs-string">&#x27;; // 登录端点</span><br><span class="hljs-string">    $activeUsersUrl = &#x27;</span>http:<span class="hljs-comment">//&#123;&#123;你的umami域名&#125;&#125;/api/websites/&#123;&#123;你的网站ID&#125;&#125;/active&#x27;; // 获取在线用户数的端点</span><br>    <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;&#123;&#123;Umami 用户名&#125;&#125;&#x27;</span>;<br>    <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;&#123;&#123;Umami 密码&#125;&#125;&#x27;</span>;<br><br>    <span class="hljs-comment">// 使用 cURL 获取授权令牌</span><br>    <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$loginUrl</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_POST, <span class="hljs-literal">true</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_POSTFIELDS, <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-variable">$username</span>, <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-variable">$password</span>)));<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-literal">true</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HTTPHEADER, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span>));<br><br>    <span class="hljs-variable">$response</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">curl_errno</span>(<span class="hljs-variable">$ch</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;登录请求错误：&#x27;</span> . <span class="hljs-title function_ invoke__">curl_error</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 解码 JSON 响应以获取令牌</span><br>    <span class="hljs-variable">$authResponse</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$response</span>, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$authResponse</span>[<span class="hljs-string">&#x27;token&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;无法获取授权令牌&#x27;</span>;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br>    <span class="hljs-variable">$token</span> = <span class="hljs-variable">$authResponse</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><br>    <span class="hljs-comment">// 使用授权令牌获取当前在线用户数</span><br>    <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$activeUsersUrl</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-literal">true</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HTTPHEADER, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;Authorization: Bearer &#x27;</span> . <span class="hljs-variable">$token</span>));<br><br>    <span class="hljs-variable">$response</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">curl_errno</span>(<span class="hljs-variable">$ch</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;获取在线用户数请求错误：&#x27;</span> . <span class="hljs-title function_ invoke__">curl_error</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><br>    <span class="hljs-comment">// 展示在线用户数</span><br>    <span class="hljs-variable">$activeUsers</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$response</span>, <span class="hljs-literal">true</span>);<br>    <span class="hljs-meta">?&gt;</span><br><br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">item</span>-<span class="hljs-title">name</span>&quot;&gt;当前在线用户数 :&lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">item</span>-<span class="hljs-title">count</span>&quot;&gt;</span><br><span class="hljs-class">        &lt;?<span class="hljs-title">php</span></span><br><span class="hljs-class">        <span class="hljs-title">if</span> (<span class="hljs-title">isset</span>($<span class="hljs-title">activeUsers</span>[0][&#x27;<span class="hljs-title">x</span>&#x27;])) </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$activeUsers</span>[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;x&#x27;</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果响应中没有 &#x27;x&#x27; 键，可以输出一个错误消息或者一个默认值</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;无法获取&quot;</span>;<br>        &#125;<br>        <span class="hljs-meta">?&gt;</span><br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><hr><p>后来发现自己服务器 2G 内存好像不是很够用，umami 的 app 容器居然就占了 200 多 M，于是把 app 改为部署到 vercel 了，毕竟网站统计只是给自己看的。好在之前 umami_db 的数据是挂载到本地的，这次迁移几乎不会丢失之前的数据。</p><ol><li>关闭本地两个容器，重启 db 容器。<br>　　原来本地两个容器只有他们之间可以通信，没有暴露端口到宿主机，现在需要部署在 vercel 的 app 层和在我服务器的 db 层通信，所以重启 db 容器，暴露端口，命令如下。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>  --name umami_db \<br>  -e POSTGRES_DB=umami \<br>  -e POSTGRES_USER=umami \<br>  -e POSTGRES_PASSWORD=<span class="hljs-string">&#x27;&#123;&#123;密码&#125;&#125;&#x27;</span> \<br>  -v ./umami-db-data:/var/lib/postgresql/data \<br>  -p &#123;&#123;自己设一个端口&#125;&#125;:5432 \<br>  --restart always \<br>  postgres:15-alpine<br></code></pre></td></tr></table></figure><ol start="2"><li>部署 app 层到 vercel。<br>　　官方给出了一键部署，很方便，<a href="https://vercel.com/new/clone?repository-url=https://github.com/umami-software/umami&env=DATABASE_URL">点击这里</a>。<br>　　登录自己的 github 账号，新建一个 umami 仓库。<br>　　关键在于配置这个环境变量，其中包含的变量来自上面拆创建 db 容器时的数据库相关参数。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DATABASE_URL:postgres://&#123;&#123;POSTGRES_USER&#125;&#125;:&#123;&#123;POSTGRES_PASSWORD&#125;&#125;@&#123;&#123;你的服务器IP地址&#125;&#125;:&#123;&#123;db容器端口&#125;&#125;/&#123;&#123;POSTGRES_DB&#125;&#125;<br></code></pre></td></tr></table></figure><p>如果<code>DATABASE_URL</code>配置正确，vercel 就会编译部署成功，登录进去就可以继续访问 db 数据库的数据啦。</p>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>umami</tag>
      
      <tag>api</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新春小记，在武汉冻雨卷土重来的这一天</title>
    <link href="/2024/02/20/%E6%96%B0%E6%98%A5%E5%B0%8F%E8%AE%B0%EF%BC%8C%E5%9C%A8%E6%AD%A6%E6%B1%89%E5%86%BB%E9%9B%A8%E5%8D%B7%E5%9C%9F%E9%87%8D%E6%9D%A5%E7%9A%84%E8%BF%99%E4%B8%80%E5%A4%A9/"/>
    <url>/2024/02/20/%E6%96%B0%E6%98%A5%E5%B0%8F%E8%AE%B0%EF%BC%8C%E5%9C%A8%E6%AD%A6%E6%B1%89%E5%86%BB%E9%9B%A8%E5%8D%B7%E5%9C%9F%E9%87%8D%E6%9D%A5%E7%9A%84%E8%BF%99%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<p>年前去南方亲戚家的那一天正是武汉开始下冻雨的时候，当时在高铁站等着晚点了半小时，还在是成功发车了，有的车次就因为天气原因完全停掉了。<br>　　一直到大年初三才回到了武汉这边，度过了最冷的一段日子。但是好景不长，今天又开始下了。听说武汉有一些高校推迟了开学，还挺好的。毕竟那么多冰锥，不是闹着好玩的，有的树压倒了会砸到车，人走在路上也要小心。<br>　　在南方总共呆了一周多，主要是想去陪伴一下爷爷奶奶，年纪大了。有的时候挺羡慕堂哥的，爷爷奶奶八十多岁的时候，他已经三十多岁了，可是我才二十出头。我羡慕他可以在自己有能力的时候，可以让老人看着他，还有机会回报，而我却要和时间赛跑。<br><img style="zoom:60%;" src="https://s2.loli.net/2024/02/20/gDUewyxokiJAbzR.png"/><br>　　久违地陪奶奶上街，我就拿手机偷偷录像，摄像头，出列！此时不用，更待何时，开启 4K60 帧，拍一拍人，也拍一拍沿路的风景。去的是小超市和菜市场，很有广式人文风情，和《狂飙》里面高启强卖鱼摊那个场景差不多。虽然视频体积超大，但是真的很清晰，是最值得存储的东西。<br>　　年前那几天也是一直下雨，没怎么出门，一直到除夕才晴天，然后年初那几天就每天出去溜溜，年初一的晚上和表弟看了《热辣滚烫》，我是认为不谈别的，作为喜剧片，能让观众笑出来，就是不错的电影。<br>&lt;img style&#x3D;”zoom:40%;”src&#x3D;”<a href="https://s2.loli.net/2024/02/20/qR4dFabPmiSjtfZ.jpg%22/%3E">https://s2.loli.net/2024/02/20/qR4dFabPmiSjtfZ.jpg&quot;/&gt;</a><br>　　藕夹还是自己家的做的最好吃，感觉武汉还是有很多吃的很吸引我的。<br>&lt;img style&#x3D;”zoom:40%;”src&#x3D;”<a href="https://s2.loli.net/2024/02/20/emdECGKUsyAVOol.jpg%22/%3E">https://s2.loli.net/2024/02/20/emdECGKUsyAVOol.jpg&quot;/&gt;</a><br>　　可是肠粉也是 very 的 good。图里面这个，不是我挑的，怎么会有青菜，异端。睡懒觉了是亲戚买回来吃的，不然必须鸡蛋肠！要在肠粉和热干面之间做选择的话真的好难。<br>&lt;img style&#x3D;”zoom:40%;”src&#x3D;”<a href="https://s2.loli.net/2024/02/20/l9B6GRWznE1Z8cC.jpg%22/%3E">https://s2.loli.net/2024/02/20/l9B6GRWznE1Z8cC.jpg&quot;/&gt;</a><br>　　表弟从广州一家小店订购空运的冰淇淋，咱就是跟着富哥尝尝。<br>&lt;img style&#x3D;”zoom:40%;”src&#x3D;”<a href="https://s2.loli.net/2024/02/20/c6IXV2df4vYtGZs.jpg%22/%3E">https://s2.loli.net/2024/02/20/c6IXV2df4vYtGZs.jpg&quot;/&gt;</a><br>　　金色的坤汤，也是来广东这边才喝的得到的，湖北的坤坤还是比不了这边的坤坤鲜嫩，狂喝 3 大碗。但是话又说回来，湖北的藕汤也是我生命中重要的角色。<br>&lt;img style&#x3D;”zoom:30%;”src&#x3D;”<a href="https://s2.loli.net/2024/02/20/EhVafHeK8w4GYF5.jpg%22/%3E">https://s2.loli.net/2024/02/20/EhVafHeK8w4GYF5.jpg&quot;/&gt;</a><br>&lt;img style&#x3D;”zoom:30%;”src&#x3D;”<a href="https://s2.loli.net/2024/02/20/eCgEakivlX7Dsoh.jpg%22/%3E">https://s2.loli.net/2024/02/20/eCgEakivlX7Dsoh.jpg&quot;/&gt;</a><br>&lt;img style&#x3D;”zoom:30%;”src&#x3D;”<a href="https://s2.loli.net/2024/02/20/219e3QBXKFRjWlE.jpg%22/%3E">https://s2.loli.net/2024/02/20/219e3QBXKFRjWlE.jpg&quot;/&gt;</a><br>　　这边的一家烟花网红店，还是挺有趣的，种类非常的齐全，还有奥特曼大礼包，Boy 诱捕器。我不爱玩烟花，但是爱看，可能还是懒的。烟花店养的大鸡毛怎么红得跟个耗牛肉干似的。看起来就很有食欲！<br>&lt;img style&#x3D;”zoom:30%;”src&#x3D;”<a href="https://s2.loli.net/2024/02/20/7kvcYWH3G4TyIFx.jpg%22/%3E">https://s2.loli.net/2024/02/20/7kvcYWH3G4TyIFx.jpg&quot;/&gt;</a><br>　　初二去逛花市的时候还看到一只拉布拉多，四处寻找它的主人，好在后来找到了。自己养太麻烦，看看别人的狗狗过过瘾还是极具性价比的。<br>&lt;img style&#x3D;”zoom:30%;”src&#x3D;”<a href="https://s2.loli.net/2024/02/20/diw68mNcAWe7GE2.png%22/%3E">https://s2.loli.net/2024/02/20/diw68mNcAWe7GE2.png&quot;/&gt;</a><br>　　到了初二的时候，温度就极具上升了，高达二十多度，可以在外面晒太阳也不冷。（给咱奶打个码）<br>&lt;img style&#x3D;”zoom:40%;”src&#x3D;”<a href="https://s2.loli.net/2024/02/20/dA7OHq165Fg3z8j.jpg%22/%3E">https://s2.loli.net/2024/02/20/dA7OHq165Fg3z8j.jpg&quot;/&gt;</a><br>　　然后初三就回武汉了，因为还想参加一些同学的社交。带了一些好东西回去，这个袋子就是奶奶缠好胶带，包装好的，最上面还加了一块布防止勒手。我在旁边就看着的时候，就有一种“临行密密缝”的感觉，要是可以分身，就放一个分身一直在爷爷奶奶旁边了。<br>　　回来以后和好朋友们见了几次，无外乎就是篮球，吃饭，网吧三件套，但是在网吧一起玩就是比自己在家好玩，也算是一期一会，念念不忘了。<br>　　没几天就要开学了，但是武汉又开始天气恶化，最后这些天也就是每天在家了，折腾一下网站的美化，看到别人写得好看的前端就学过来哈哈哈。在家呆久了，也挺期待开学的，想念我的工位。<br>　　初中阅读理解做了不少龙应台的文章，看的感动的唏哩呱啦的，真会写。等到年纪逐渐增加，才真正读懂了一些话，理解了一些情绪，虽然很俗套，但是还是要说，珍惜眼前人，过好每一天。</p><blockquote><p>所谓父女母子一场，只不过意味着，你和他的缘分就是今生今世不断地在目送他的背影渐行渐远。你站立在小路的这一端，看着他逐渐消失在小路转弯的地方，而且，他用背影默默告诉你：不必追。”——龙应台《目送》</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>通过Github Copilot搭建个人ChatGPT4服务</title>
    <link href="/2024/02/18/%E9%80%9A%E8%BF%87Github%20Copilot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAChatGPT4%E6%9C%8D%E5%8A%A1/"/>
    <url>/2024/02/18/%E9%80%9A%E8%BF%87Github%20Copilot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAChatGPT4%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>起因是晚饭后刷 b 站的时候看到了一个大佬的视频，可以通过 Github Copilot 白嫖 GPT4。我本来自己是二者都有的，以前看到的一些标题带“白嫖”字样的感觉大多数都不靠谱，但是这个还挺有意思的，如果能一直用的话，GPT4 那边倒是可以停一阵子哈哈哈。<br>　　这是原大佬的[视频链接][1]。有很详细的教程，如果大家只是想在本地部署<code>cogpt</code>，然后直接使用<code>chatgpt-next-web</code>的客户端的话，可以跟着大佬的视频和博客教程就行了，[博客地址][2]。<br>　　本文用于记录<code>centos</code>云服务器环境搭建<code>cogpt</code>和<code>chatgpt-next-web</code>的<code>docker</code>服务，可以完全部署在自己手中，给亲朋好友使用。</p><p>[note type&#x3D;”info flat”]首先，你得有<strong>Github Copilot</strong>才行！！！这个可以进行教育认证之后白嫖，一年认证一次。认证过程还挺麻烦的，可以网上搜索教程。[&#x2F;note]</p><ol><li>部署<code>cogpt</code>服务并创建一个<code>docker network</code>。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># docker-compose.yml</span><br>version: <span class="hljs-string">&#x27;3&#x27;</span><br><br>services:<br>  cogpt-api:<br>    image: geniucker/cogpt:latest<br>    environment:<br>      - HOST=0.0.0.0<br>      - share-xxxxxxx1:&#123;&#123;你的token&#125;&#125;<br>    ports:<br>      - &#123;&#123;主机挑一个空闲端口&#125;&#125;:8080<br>    volumes:<br>      - ./db:/app/db<br>      - ./log:/app/log<br>    restart: unless-stopped<br>    container_name: cogpt-api<br>    networks:<br>      - my-gpt<br><br>networks:<br>  my-gpt:<br>    external: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 运行docker-compose</span><br>docker-compose up -d<br></code></pre></td></tr></table></figure><p>这里的<code>token</code>是你的<strong>Github Copilot</strong>的<code>token</code>，需要大佬编写的软件获取，详情见其博客。<br>　　创建了一个<code>my-gpt</code>网络为了待会与<code>chatgpt-next-web</code>页面进行通信。<br>　　这样就在服务器运行好了<code>cogpt</code>服务，访问你设置的端口可以收到<code>Hi, it&#39;s CoGPT!</code>。</p><ol start="2"><li>创建聊天界面。<br>　　<code>chatgpt-next-web</code>的[Github 地址][3]。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>  -e BASE_URL=<span class="hljs-string">&quot;http://cogpt-api:&#123;&#123;刚刚设置的端口&#125;&#125;&quot;</span> \<br>  -e OPENAI_API_KEY=<span class="hljs-string">&quot;&#123;&#123;你的token&#125;&#125;&quot;</span> \<br>  -e CODE=<span class="hljs-string">&quot;&#123;&#123;设置一个10位以上的密码&#125;&#125;&quot;</span> \<br>  -e ENABLE_BALANCE_QUERY=<span class="hljs-literal">true</span> \<br>  -p 3000:3000 \<br>  --network my-gpt \<br>  --name chatgpt-next-web \<br>  yidadaa/chatgpt-next-web<br></code></pre></td></tr></table></figure><p>成功运行后，访问 3000 端口，输入密码，就可以愉快的玩耍啦！<br><img src="https://s2.loli.net/2024/02/18/bTgXU2A38yzuaBP.png" alt="image.png"><br>[1]: <a href="https://www.bilibili.com/video/BV1mK421k7xA/?p=1&vd_source=4e03f52e94cfa281cde032856b1f93a7">https://www.bilibili.com/video/BV1mK421k7xA/?p=1&amp;vd_source=4e03f52e94cfa281cde032856b1f93a7</a><br>[2]: <a href="https://blog.geniucker.top/2024/01/26/%E9%80%9A%E8%BF%87-GitHub-Copilot-%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8-gpt-4/#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE">https://blog.geniucker.top/2024/01/26/%E9%80%9A%E8%BF%87-GitHub-Copilot-%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8-gpt-4/#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE</a><br>[3]: <a href="https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web?tab=readme-ov-file">https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web?tab=readme-ov-file</a></p>]]></content>
    
    
    <categories>
      
      <category>geek</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>Github</tag>
      
      <tag>ChatGPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win10定时任务：调用python程序</title>
    <link href="/2024/02/15/win10%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%EF%BC%9A%E8%B0%83%E7%94%A8python%E7%A8%8B%E5%BA%8F/"/>
    <url>/2024/02/15/win10%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%EF%BC%9A%E8%B0%83%E7%94%A8python%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>在计划任务中，新建任务，选择每月。<br><img src="https://s2.loli.net/2024/02/15/U1EX7OWzDPm4sFi.png"/></p>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>win</tag>
      
      <tag>python</tag>
      
      <tag>cli</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7配置Clash代理（docker）</title>
    <link href="/2024/02/15/CentOS7%E9%85%8D%E7%BD%AEClash%E4%BB%A3%E7%90%86%EF%BC%88docker%EF%BC%89/"/>
    <url>/2024/02/15/CentOS7%E9%85%8D%E7%BD%AEClash%E4%BB%A3%E7%90%86%EF%BC%88docker%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>clash 的 github 仓库已经挂掉了，作者删库了。只能找以前的版本还能继续用，找的过程中发现有打包好的 docker 版本，可以一键配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>  --name clash \<br>  --restart=always \<br>  --log-opt max-size=1m \<br>  -v /root/.config/clash/config.yaml:/root/.config/clash/config.yaml \<br>  -p 7888:8080 -p 7890:7890 \<br>  laoyutang/clash-and-dashboard:latest<br></code></pre></td></tr></table></figure><p>需要把机场的 yaml 文件放到宿主机的<code>/root/.config/clash/</code>目录下，创建容器时挂载进去。<br>　　运行成功后，访问宿主机<code>7888</code>端口即可进入 clash 控制面板，选择节点，开启代理。<br><img src="https://s2.loli.net/2024/02/15/f3aP7vRlJFsWg2m.png"/><br>　　进入宿主机的<code>~/.bashrc</code>或者<code>~/.zshrc</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><br><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">☁  ~  curl -I https://www.google.com<br>HTTP/1.1 200 Connection established<br><br>HTTP/1.1 200 OK<br>Content-Type: text/html; charset=ISO-8859-1<br>Content-Security-Policy-Report-Only: object-src <span class="hljs-string">&#x27;none&#x27;</span>;base-uri <span class="hljs-string">&#x27;self&#x27;</span>;script-src <span class="hljs-string">&#x27;nonce-AOy0_Lb_CokxfUGDy6DQ_g&#x27;</span> <span class="hljs-string">&#x27;strict-dynamic&#x27;</span> <span class="hljs-string">&#x27;report-sample&#x27;</span> <span class="hljs-string">&#x27;unsafe-eval&#x27;</span> <span class="hljs-string">&#x27;unsafe-inline&#x27;</span> https: http:;report-uri https://csp.withgoogle.com/csp/gws/other-hp<br>P3P: CP=<span class="hljs-string">&quot;This is not a P3P policy! See g.co/p3phelp for more info.&quot;</span><br>Date: Thu, 15 Feb 2024 04:54:50 GMT<br>Server: gws<br>X-XSS-Protection: 0<br>X-Frame-Options: SAMEORIGIN<br>Transfer-Encoding: chunked<br>Expires: Thu, 15 Feb 2024 04:54:50 GMT<br>Cache-Control: private<br>Set-Cookie: 1P_JAR=2024-02-15-04; expires=Sat, 16-Mar-2024 04:54:50 GMT; path=/; domain=.google.com; Secure<br>Set-Cookie: AEC=Ae3NU9PkxZXsavIE1i87-bIS96xRW1GTL7sZcwHmIKL3WqKVCDteL_vKUbs; expires=Tue, 13-Aug-2024 04:54:50 GMT; path=/; domain=.google.com; Secure; HttpOnly; SameSite=lax<br>Set-Cookie: NID=511=svJ0Zakh7gQbZ_od1Mom5rEFyRtwmKP5na5-bwvWUu5Sced8AhXmC3hzJCyfmtPuwz0v9SIpeOJicYQdWneLn3wxffNoge90YzG6deCZlzpfGzBZEreX3AmxXpcym8lvyR7nkljLO02kefqX-oYlTSxjqPsOWPXIPrr3IkNzYiw; expires=Fri, 16-Aug-2024 04:54:50 GMT; path=/; domain=.google.com; HttpOnly<br>Alt-Svc: h3=<span class="hljs-string">&quot;:443&quot;</span>; ma=2592000,h3-29=<span class="hljs-string">&quot;:443&quot;</span>; ma=2592000<br></code></pre></td></tr></table></figure><p>测试成功。然后配置一个自动任务进行定期更新机场 yaml 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab -e<br><span class="hljs-comment"># 加入每日任务：更新机场文件，重启docker</span><br>0 0 * * 0 /usr/bin/curl -o /root/.config/clash/config.yaml 机场配置文件下载链接 &amp;&amp; /usr/bin/docker restart clash<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>geek</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos7</tag>
      
      <tag>docker</tag>
      
      <tag>Clash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于wsl2的python-opencv的docker开发环境配置</title>
    <link href="/2024/02/10/%E5%9F%BA%E4%BA%8Ewsl2%E7%9A%84python-opencv%E7%9A%84docker%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/02/10/%E5%9F%BA%E4%BA%8Ewsl2%E7%9A%84python-opencv%E7%9A%84docker%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>下学期项目需要学习<code>opencv</code>，打算 python 原型设计，有精力再 CPP 优化。<br>　　 CPP 的环境配置起来麻烦，我选择<code>VS2022</code>作为 IDE。<br>　　 PY 环境不想弄在宿主机，放到 wsl2 的 docker 里面。我的 win10 安装了<code>Ubuntu22.04</code>版本的 wsl2，对于一些 linux 环境下更好做的事就用它。这台云服务器虽说也是 linux 环境，但是性能不如自己电脑。</p><h1 id="第一步，win10-准备工作"><a href="#第一步，win10-准备工作" class="headerlink" title="第一步，win10 准备工作"></a>第一步，win10 准备工作</h1><ul><li>安装<code>Xlaunch</code>，<a href="https://sourceforge.net/projects/vcxsrv/">下载地址</a>。</li><li>运行<code>Xlaunch</code><ol><li>选择<code>Multiple windows</code>，<code>Display number: -1</code>。</li><li><code>Start no client</code>。</li><li>勾选<code>Native opengl</code>，硬件加速。勾选<code>Disable access control</code>，放开安全策略，简单。如果有更高的保密要求，这条不勾选，需要进一步配置。</li></ol></li><li>更改 win10 系统防火墙策略设置，图源知乎。<img src="https://s2.loli.net/2024/02/10/1fP6Mel8md742xs.png"/></li></ul><h1 id="第二步，WSL2-配置"><a href="#第二步，WSL2-配置" class="headerlink" title="第二步，WSL2 配置"></a>第二步，WSL2 配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LIBGL_ALWAYS_INDIRECT=1<br><span class="hljs-built_in">export</span> DISPLAY=$(ip route | grep default | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span>):0.0<br><span class="hljs-comment"># export DISPLAY=你的win10的IPV4:0.0</span><br></code></pre></td></tr></table></figure><p>将这两条命令加入到你的 WSL 的 shell 环境<code>/.bashrc</code>或者<code>/.zshrc</code>最末尾。第二条命令是自动获取主机 IP，如果失效，则用第三条命令，自己在 win 端<code>ipconfig</code>来获取 IPV4，手动填入。<br>　　这时 WSL2 的 GUI 应该可以发送给 win10 了，可以通过<code>xclock</code>小程序来检验。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install x11-apps<br>xclock<br></code></pre></td></tr></table></figure><p>win 系统出现可爱小闹钟即成功，如果卡在 wsl 没有反应，说明 wsl 已经运行<code>xclock</code>但是 x11 转发失败。</p><h1 id="第三步，启动docker"><a href="#第三步，启动docker" class="headerlink" title="第三步，启动docker"></a>第三步，启动<code>docker</code></h1><ol><li>这个版本的 ubuntu 没安装<code>systemd</code>和<code>systemctl</code>，而且安装有一些坑。只能通过<code>sudo service docker install</code>启动 docker。</li><li>构建一个 docker 镜像，配置了 python 和 opencv 环境，以及常用的 zsh，vim 等小工具（这些非必须）。<code>dockerfile</code>如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用Ubuntu作为基础镜像</span><br>FROM ubuntu:20.04<br><br><span class="hljs-comment"># 设置非交互式安装以避免安装过程中的交互式询问</span><br>ENV DEBIAN_FRONTEND=noninteractive<br><br><span class="hljs-comment"># 设置为中国国内源</span><br>RUN sed -i <span class="hljs-string">&#x27;s/archive.ubuntu.com/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list<br>RUN sed -i <span class="hljs-string">&#x27;s/security.ubuntu.com/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list<br><br><span class="hljs-comment"># 安装必要的软件包</span><br>RUN apt-get update &amp;&amp; apt-get install -y \<br>    python3 \<br>    python3-pip \<br>    x11-apps \<br>    vim \<br>    zsh \<br>    wget \<br>    git \<br>    curl \<br>    neofetch \<br>    figlet \<br>    libgtk2.0-dev \<br>    pkg-config \<br>    libgl1-mesa-glx &amp;&amp; \<br>    <span class="hljs-built_in">rm</span> -rf /var/lib/apt/lists/*<br><br><span class="hljs-comment"># 设置时区，例如设置为&quot;Asia/Shanghai&quot;</span><br>RUN <span class="hljs-built_in">ln</span> -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; dpkg-reconfigure --frontend noninteractive tzdata<br><br><br><span class="hljs-comment"># 安装Python的OpenCV库（带GUI支持）</span><br>RUN pip3 install opencv-python<br><br><br><span class="hljs-comment"># 安装和配置oh-my-zsh</span><br><br><span class="hljs-comment"># RUN sh -c &quot;$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)&quot; || true \</span><br><span class="hljs-comment">#     &amp;&amp; git clone https://gitee.com/zjy_1671/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting \</span><br><span class="hljs-comment">#     &amp;&amp; git clone https://gitee.com/chenweizhen/zsh-autosuggestions.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br><br>RUN sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)</span>&quot;</span> || <span class="hljs-literal">true</span> \<br>    &amp;&amp; git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions \<br>    &amp;&amp; git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br><br><br><br><span class="hljs-comment"># 复制.zshrc文件到容器</span><br>COPY .zshrc /root/.zshrc<br><br><br><span class="hljs-comment"># 设置默认shell为zsh</span><br>ENV SHELL /bin/zsh<br><br><span class="hljs-comment"># 设置工作目录</span><br>WORKDIR /workspace<br><br><span class="hljs-comment"># 默认命令启动zsh</span><br>CMD [<span class="hljs-string">&quot;zsh&quot;</span>]<br><br></code></pre></td></tr></table></figure><p>构建镜像，快慢取决于网速。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t pycv2 .<br></code></pre></td></tr></table></figure><ol start="3"><li>根据镜像启动容器，<a href="https://blog.csdn.net/weixin_39998006/article/details/99680522">docker run 命令参数</a>。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -itd --name pycv2 \<br>    -e DISPLAY=<span class="hljs-variable">$DISPLAY</span> \<br>    -v /tmp/.X11-unix:/tmp/.X11-unix \<br>    pycv2<br></code></pre></td></tr></table></figure><ul><li><p><code>-itd</code>：这个组合参数使容器以交互模式运行，并分配一个伪终端（-it），同时-d 参数使容器在后台运行。</p></li><li><p><code>--name pycv2</code>：为容器指定一个名称。</p></li><li><p><code>-e DISPLAY=$DISPLAY</code>：设置环境变量 DISPLAY，以便容器内的应用程序知道如何连接到 X 服务器。</p></li><li><p><code>-v /tmp/.X11-unix:/tmp/.X11-unix</code>：将宿主机上的 X11 套接字目录挂载到容器内，以实现 X11 转发。</p></li><li><p><code>pycv2</code>：指定要运行的 Docker 镜像及其标签。</p></li></ul><ol start="4"><li>在 docker 内重复前面的步骤，安装 X11-apps，运行 xclock，如果 win10 出现熟悉的小闹钟，则说明成功。</li></ol><h1 id="第四步，vscode-进行-docker-开发。"><a href="#第四步，vscode-进行-docker-开发。" class="headerlink" title="第四步，vscode 进行 docker 开发。"></a>第四步，vscode 进行 docker 开发。</h1><p>vscode 安装 docker 插件，可以直接识别 WSL 中的正在运行的 docker，将文件挂载到工作区，也可以进入 shell。<br>　　创建一个目录，传一个图片进去，再创建一个 py 文件，做一个简单的测试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><br><span class="hljs-comment"># 加载图片</span><br>image = cv2.imread(<span class="hljs-string">&#x27;fulilian.png&#x27;</span>) <span class="hljs-comment"># 绝对路径</span><br><br><span class="hljs-comment"># 获取图片的原始高度和宽度</span><br>original_height, original_width = image.shape[:<span class="hljs-number">2</span>]<br><br><span class="hljs-comment"># 设置最大高度为600像素</span><br>max_height = <span class="hljs-number">300</span><br><br><span class="hljs-comment"># 如果原始高度大于最大高度，则计算缩放比例</span><br><span class="hljs-keyword">if</span> original_height &gt; max_height:<br>    <span class="hljs-comment"># 计算缩放比例</span><br>    scaling_factor = max_height / original_height<br><br>    <span class="hljs-comment"># 计算新的宽度，保持宽高比不变</span><br>    new_width = <span class="hljs-built_in">int</span>(original_width * scaling_factor)<br><br>    <span class="hljs-comment"># 调整图片大小</span><br>    resized_image = cv2.resize(image, (new_width, max_height))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 如果原始高度小于或等于最大高度，则不需要缩放</span><br>    resized_image = image<br><br><span class="hljs-comment"># 显示调整大小后的图片</span><br>cv2.imshow(<span class="hljs-string">&#x27;Resized Image&#x27;</span>, resized_image)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.destroyAllWindows()<br><br></code></pre></td></tr></table></figure><p>成功运行！<br><img src="https://s2.loli.net/2024/02/10/iThVjY953ZfPbwO.png"/></p>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>python</tag>
      
      <tag>wsl2</tag>
      
      <tag>ubuntu</tag>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode——Ctrl - Shift - P失效记录</title>
    <link href="/2024/02/09/vscode%E2%80%94%E2%80%94Ctrl%20-%20Shift%20-%20P%E5%A4%B1%E6%95%88%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/02/09/vscode%E2%80%94%E2%80%94Ctrl%20-%20Shift%20-%20P%E5%A4%B1%E6%95%88%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>罪魁祸首居然是图床客户端<code>PicGo</code>！<br>　　这个软件默认开启了快捷键<code>Ctrl - Shift - P</code>，到设置里禁用或者更改一下即可。</p>]]></content>
    
    
    <categories>
      
      <category>geek</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
      <tag>picgo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装docker图形化管理面板portainer</title>
    <link href="/2024/02/09/%E5%AE%89%E8%A3%85docker%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BFportainer/"/>
    <url>/2024/02/09/%E5%AE%89%E8%A3%85docker%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BFportainer/</url>
    
    <content type="html"><![CDATA[<p>有一个 web 形式的管理面板会更加直观好看，选择<code>portainer</code>，<code>docker hub</code>上有一个汉化好的版本，<a href="https://hub.docker.com/r/6053537/portainer-ce">镜像地址</a>。<br>　　安装很简单，一句命令就完事。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --restart=always --name=&quot;portainer&quot; -p 8000:9000 -v /var/run/docker.sock:/var/run/docker.sock 6053537/portainer-ce<br></code></pre></td></tr></table></figure><p>这里我的宿主机<code>9000</code>端口已经被占用，改为<code>8000</code>。<br>　　然后通过<code>IP地址:8000</code>即可进入管理面板。</p>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>portainer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7基于docker搭建MySQL数据库的nextcloud个人网盘</title>
    <link href="/2024/02/08/CentOS7%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BAMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84nextcloud%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98/"/>
    <url>/2024/02/08/CentOS7%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BAMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84nextcloud%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<p>服务器闲着也是闲着，利用一下带宽和内存，跑一些自托管项目还是不错的。个人网盘就是一个很常见的项目。虽然<code>OneDrive</code>家庭版已经很香，但是它的 ios 端居然全局魔法也不好用，实在是无法理解。最后选择<code>nextcloud</code>搭建个人网盘，而没有选择<code>oneindex</code>在服务器挂在<code>OneDrive</code>，希望可以兼顾手机端。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ol><li><a href="https://cloud.tencent.com/developer/article/1701451">centos7 安装 Docker 详细步骤（无坑版教程）</a></li><li><a href="https://cloud.tencent.com/developer/article/2192236">使用 docker 安装部署 NextCloud 私人网盘</a></li><li><a href="https://zhuanlan.zhihu.com/p/108301496">Docker 方式部署 Nextcloud</a></li></ol><h1 id="第一步，安装docker"><a href="#第一步，安装docker" class="headerlink" title="第一步，安装docker"></a>第一步，安装<code>docker</code></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1</span><br>yum install -y yum-utils device-mapper-persistent-data lvm2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2</span><br>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>yum list docker-ce --showduplicates | sort -r<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3</span><br>yum -y install docker-ce-18.06.3.ce<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4</span><br>systemctl start docker<br>systemctl enable docker<br></code></pre></td></tr></table></figure><ol><li>安装需要的软件包，<code>yum-util</code>提供<code>yum-config-manager</code>功能，另两个是<code>devicemapper</code>驱动依赖。</li><li>设置<code>yum</code>源。</li><li>下载安装<code>docker</code>。</li><li>启动<code>docker</code>并且设置为开机自启。</li></ol><h1 id="第二步，运行MySQL容器"><a href="#第二步，运行MySQL容器" class="headerlink" title="第二步，运行MySQL容器"></a>第二步，运行<code>MySQL</code>容器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name mysql-nextcloud -e MYSQL_ROOT_PASSWORD=自己设 -e MYSQL_DATABASE=自己设 -e MYSQL_USER=自己设 -e MYSQL_PASSWORD=自己设 -p 3306:3306 -d mysql:5.7<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li><code>name</code>：容器名称<code>mysql-nextcloud</code></li><li><code>MYSQL_ROOT_PASSWORD</code>：数据库 root 账户密码</li><li><code>MYSQL_DATABASE</code>：数据库名称</li><li><code>MYSQL_USER</code>：普通账户名</li><li><code>MYSQL_PASSWORD</code>：普通账户密码</li><li>端口映射：主机<code>3306</code>和容器<code>3306</code>。</li><li>镜像：<code>mysql</code>选择<code>5.7</code>版本。</li></ul><h1 id="第三步，创建一个网络，将MySQL加入其中"><a href="#第三步，创建一个网络，将MySQL加入其中" class="headerlink" title="第三步，创建一个网络，将MySQL加入其中"></a>第三步，创建一个网络，将<code>MySQL</code>加入其中</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker network create nextcloud-network<br>docker network connect nextcloud-network mysql-nextcloud<br></code></pre></td></tr></table></figure><ul><li>创建了一个名为<code>nextcloud-network</code>的网络。</li><li>将容器<code>mysql-nextcloud</code>加入其中</li></ul><h1 id="第四步，运行nextcloud容器，加入刚刚的网络"><a href="#第四步，运行nextcloud容器，加入刚刚的网络" class="headerlink" title="第四步，运行nextcloud容器，加入刚刚的网络"></a>第四步，运行<code>nextcloud</code>容器，加入刚刚的网络</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name nextcloud --network nextcloud-network -p 8080:80 nextcloud<br></code></pre></td></tr></table></figure><ol><li>运行一个<code>nextcloud</code>容器，参数中设置加入网络。这里我的主机<code>80</code>端口已经被博客网站服务占用，所以主机使用<code>8080</code>端口。</li><li>设置防火墙策略，开放这 nextcloud 使用的端口。</li></ol><h1 id="第五步，进入-web-管理界面，进行配置"><a href="#第五步，进入-web-管理界面，进行配置" class="headerlink" title="第五步，进入 web 管理界面，进行配置"></a>第五步，进入 web 管理界面，进行配置</h1><ol><li>进入<code>http://你的服务器IP:8080</code>。端口是你上一步设定的。</li><li>进行初始化。</li></ol><ul><li>管理员账户：创建一个管理员账户，填写用户名和密码。</li><li>数据存储：默认情况下，数据目录应该已经设置好了，通常不需要更改。</li><li>数据库配置：<ol><li>选择<code>MySQL</code>作为数据库。</li><li>数据库用户名：之前设置的<code>MYSQL_USER</code>。</li><li>数据库密码：之前设置的<code>MYSQL_PASSWORD</code>。</li><li>数据库名称：之前设置的<code>MYSQL_DATABASE</code>。</li><li>数据库主机：这里应该填写<code>MySQL</code>容器的名称加上 Docker 网络名，如<code>mysql-nextcloud:3306</code>。</li></ol></li></ul><h1 id="一些经验"><a href="#一些经验" class="headerlink" title="一些经验"></a>一些经验</h1><p>docker 容器启动时候报错，容器依旧会启动，需要停止然后删除该容器，解决报错，然后重新启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker stop mysql-nextcloud<br>docker rm mysql-nextcloud<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>technology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos7</tag>
      
      <tag>docker</tag>
      
      <tag>mysql</tag>
      
      <tag>self-hosted</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>oh-my-zsh 配置记录：插件，主题，字体</title>
    <link href="/2024/02/08/oh-my-zsh%20%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95%EF%BC%9A%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%BB%E9%A2%98%EF%BC%8C%E5%AD%97%E4%BD%93/"/>
    <url>/2024/02/08/oh-my-zsh%20%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95%EF%BC%9A%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%B8%BB%E9%A2%98%EF%BC%8C%E5%AD%97%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<p>目前只用过 zsh，搭配 oh-my-zsh，体验很好。我的 wsl，macos 和服务器都安装了 oh-my-zsh，记录一下配置。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Set name of the theme to load --- <span class="hljs-keyword">if</span> <span class="hljs-built_in">set</span> to <span class="hljs-string">&quot;random&quot;</span>, it will</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">load a random theme each <span class="hljs-keyword">time</span> oh-my-zsh is loaded, <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> <span class="hljs-keyword">case</span>,</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">to know <span class="hljs-built_in">which</span> specific one was loaded, run: <span class="hljs-built_in">echo</span> <span class="hljs-variable">$RANDOM_THEME</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span><br>ZSH_THEME=&quot;主题名称&quot;<br></code></pre></td></tr></table></figure><h3 id="eastwood"><a href="#eastwood" class="headerlink" title="eastwood"></a>eastwood</h3><img src="https://s2.loli.net/2024/03/25/RpMY8LHi1U79NXI.png"/><h3 id="jnora"><a href="#jnora" class="headerlink" title="jnora"></a>jnora</h3><img src="https://s2.loli.net/2024/03/25/M27Nbnr6HQi5EKV.png"/><h3 id="re5et"><a href="#re5et" class="headerlink" title="re5et"></a>re5et</h3><img src="https://s2.loli.net/2024/03/25/OHBnvSelmAQRptP.png"/><h3 id="tjkirch"><a href="#tjkirch" class="headerlink" title="tjkirch"></a>tjkirch</h3><img src="https://s2.loli.net/2024/03/25/R5u4SE79KLOPJ2q.png"/><h3 id="ys"><a href="#ys" class="headerlink" title="ys"></a>ys</h3><img src="https://s2.loli.net/2024/03/25/NvQHREUAsjnMSG2.png"/><h3 id="cloud"><a href="#cloud" class="headerlink" title="cloud"></a>cloud</h3><img src="https://s2.loli.net/2024/03/25/P56XjGWOFgK3MmQ.png"/><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>中文一律用的<strong>霞鹜文楷等宽</strong>。英文字体需要<code>Nerd</code>字体才能正常显示图标，<a href="https://www.nerdfonts.com/font-downloads">Nerd Fonts - 标志性字体聚合器、字形&#x2F;图标集合和字体修补程序 — Nerd Fonts - Iconic font aggregator, glyphs&#x2F;icons collection, &amp; fonts patcher</a>。</p><ol><li><p><code>0xproto Nerd Font</code></p><p>这个有些花枝招展，但是爱看。</p><img src="https://s2.loli.net/2024/03/25/FuUXAkfjYa7dBW4.png"/></li><li><p><code>FiraCode Nerd Font</code></p><p>挺耐看的，而且有非常好看的连字符。</p><img src="https://s2.loli.net/2024/03/25/5prdWFl9HBcaC6t.png"/></li><li><p><code>Hack Nerd Font</code></p><p>黑客，名字很霸气，也好看，感觉很舒展。</p><img src="https://s2.loli.net/2024/03/25/KeqSTy58IjYQdJE.png"/></li><li><p><code>Iosevka Nerd Font</code></p><p>比较窄的类型的，我个人用的比较少。</p><img src="https://s2.loli.net/2024/03/25/rK5PxfCtBnD71GS.png"/></li><li><p><code>Ubuntu Nerd Font</code></p><p>Ubuntu 的系统字体，很经典。</p><img src="https://s2.loli.net/2024/03/25/JR6uP8XbxMT3LH1.png"/></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">plugins=(git zsh-autosuggestions zsh-syntax-highlighting copyfile copypath sudo)<br></code></pre></td></tr></table></figure><ol><li><p><code>zsh-autosuggestions</code><br>用于补全，还算智能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure></li><li><p><code>zsh-syntax-highlighting</code><br>用于终端高亮。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br></code></pre></td></tr></table></figure></li><li><p><code>copyfile &amp;&amp; copypath</code></p><p><code>Ohmyzsh</code>自带插件，在配置中起用即可。一个复制文件内容，一个复制当前路径。</p></li><li><p><code>sudo</code><br>也是一个自带插件，在忘记输入<code>sudo</code>时，按一下<code>ESC</code>即可快速补上。</p></li></ol><h2 id="别名（alias）"><a href="#别名（alias）" class="headerlink" title="别名（alias）"></a>别名（alias）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs shell">alias c=&quot;code .&quot;<br>alias ..=&quot;cd ../&quot;<br>alias ..l=&quot;cd ../ &amp;&amp; ls -a&quot;<br>alias ..ll=&quot;cd ../ &amp;&amp; ls -al&quot;<br><br>alias ...=&#x27;cd ../../..&#x27;<br>alias ....=&#x27;cd ../../../..&#x27;<br>alias .....=&#x27;cd ../../../..&#x27;<br>alias .2=&#x27;cd ../..&#x27;<br>alias .3=&#x27;cd ../../..&#x27;<br>alias .4=&#x27;cd ../../../..&#x27;<br>alias .5=&#x27;cd ../../../../..&#x27;<br><br>alias zshrc=&#x27;nvim ~/.zshrc&#x27;<br>alias update=&quot;source ~/.zshrc&quot;<br>alias cls=&quot;clear&quot;<br>alias vim=&quot;nvim&quot;<br>alias n=&quot;nvim&quot;<br>alias n.=&quot;nvim .&quot;<br>alias nc=&quot;n ~/.config/nvim/&quot;<br>alias h=&#x27;history&#x27;<br><br>alias df=&quot;duf&quot;<br>alias md=&quot;mkdir&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">连接上次会话</span><br>alias ta=&quot;tmux a&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">新会话</span><br>alias tn=&quot;tmux&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有会话</span><br>alias tls=&quot;tmux ls&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除tmux会话</span><br>alias td0=&quot;tmux kill-session -t 0&quot;<br>alias td1=&quot;tmux kill-session -t 1&quot;<br>alias td2=&quot;tmux kill-session -t 2&quot;<br>alias td3=&quot;tmux kill-session -t 3&quot;<br>alias td4=&quot;tmux kill-session -t 4&quot;<br>alias td5=&quot;tmux kill-session -t 5&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">临时开关代理</span><br>alias offclash=&#x27;unset http_proxy &amp;&amp; unset https_proxy all_proxy&#x27;<br>alias onclash=&#x27;export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">lsd</span><br>alias bls=&quot;/bin/ls&quot;<br>alias ls=&quot;lsd&quot;<br>alias lsa=&quot;lsd -a&quot;<br>alias lt=&quot;lsd --tree&quot;<br>alias lta=&quot;lsd -a --tree&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">lazygit</span><br>alias lg=&quot;lazygit&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">dotfiles</span><br>alias dt=&quot;cd ~/dotfiles &amp;&amp; lsa&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">lsd</span><br>alias bll=&quot;/bin/ls -al&quot;<br>alias ll=&#x27;lsd -l&#x27;<br>alias lla=&#x27;lsd -al&#x27;<br><br></code></pre></td></tr></table></figure><h2 id="欢迎语"><a href="#欢迎语" class="headerlink" title="欢迎语"></a>欢迎语</h2><p>加在<code>.zshrc</code>的末尾。</p><ol><li>可以打印一个 3d 艺术字。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">figlet -c Hello Ubuntu!<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2024/03/25/Ypm2VwAPu3MT5HZ.png"/><ol start="2"><li><p>可以调用<code>neofetch</code>。</p></li><li><p>可以使用 pokemansay 和 fortune。</p><img src="https://s2.loli.net/2024/03/25/R6JQcMCa9Dz48Wn.png"/></li></ol>]]></content>
    
    
    <categories>
      
      <category>geek</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dotfile</tag>
      
      <tag>zsh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typecho——博客段首缩进2字符解决方案</title>
    <link href="/2024/02/08/Typecho%E2%80%94%E2%80%94%E5%8D%9A%E5%AE%A2%E6%AE%B5%E9%A6%96%E7%BC%A9%E8%BF%9B2%E5%AD%97%E7%AC%A6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2024/02/08/Typecho%E2%80%94%E2%80%94%E5%8D%9A%E5%AE%A2%E6%AE%B5%E9%A6%96%E7%BC%A9%E8%BF%9B2%E5%AD%97%E7%AC%A6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>Typepcho 的编辑器默认不缩进。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.post-content</span> <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 css 对段落样式进行控制。但是从后台 markdown 编辑器生成的文本并不是每一段都会有 p 标签，导致实际使用时只有第一段会生效。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>由 LCQ 博客文章提供的插件实现，<a href="https://on1979.com/archives/281/">原文地址</a>。<br>　　插件可以增强网站后台的编辑器，热键<code>Alt + Q</code>为 2 个全角空格，可以在编辑的时候手动加入。</p><p>[note type&#x3D;”warning flat”]但是手机端这两个全角空格不显示，只能保证电脑端的效果。[&#x2F;note]</p>]]></content>
    
    
    <categories>
      
      <category>geek</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typecho</tag>
      
      <tag>插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode1.86无法ssh连接centos7解决办法</title>
    <link href="/2024/02/07/vscode1.86%E6%97%A0%E6%B3%95ssh%E8%BF%9E%E6%8E%A5centos7%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2024/02/07/vscode1.86%E6%97%A0%E6%B3%95ssh%E8%BF%9E%E6%8E%A5centos7%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>最近，vscode1.86 版本的 ssh 要求服务器<code>glibc</code>最低 2.28 版本，centos7 不满足要求。在服务器端编译安装新版 centos7 也比较麻烦，最后选择安装便携版 vscode1.85，不影响原来的使用。<br>　　参考<a href="https://zhuanlan.zhihu.com/p/681066025">知乎萌萌哒赫萝 ​ 的帖子</a>，感谢大佬：</p><ol><li>在某链接安装便携版 1.85.2 版本安装包，解压到本地。</li><li>在解压后的目录新建<code>data</code>文件夹。</li><li>拷贝<code>%APPDATA%\Code</code>目录到<code>data</code>文件夹下，将其重命名为<code>user-data</code>。</li><li>拷贝<code>%USERPROFILE%\.vscode\extensions</code>目录到<code>data</code>文件夹下。</li><li>在<code>data</code>文件夹下新建目录<code>tmp</code>。</li><li>将 vscode 的<code>remote-ssh</code>插件的版本降级到 0.107.1。</li></ol>]]></content>
    
    
    <categories>
      
      <category>geek</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos7</tag>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typecho数据库自动备份至邮箱</title>
    <link href="/2024/02/06/Typecho%E6%95%B0%E6%8D%AE%E5%BA%93%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E8%87%B3%E9%82%AE%E7%AE%B1/"/>
    <url>/2024/02/06/Typecho%E6%95%B0%E6%8D%AE%E5%BA%93%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E8%87%B3%E9%82%AE%E7%AE%B1/</url>
    
    <content type="html"><![CDATA[<p>不考虑备份网站样式，只备份数据库信息的办法，定期发送至 QQ 邮箱，可永久保存。</p><h1 id="正常步骤"><a href="#正常步骤" class="headerlink" title="正常步骤"></a>正常步骤</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>下载 Jrotty 维护的 AutoBackup 插件，<a href="https://github.com/jrotty/AutoBackup">仓库地址</a>。</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>将插件改名为<code>AutoBackup</code>，放到<code>usr/plugins/</code>目录下，到 Typecho 后台开启插件并进行配置。</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>到 QQ 邮箱网站申请一个 SMTP 服务的授权码。</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>需要配置的信息如下：</p><ol><li>SMTP 地址：smtp.qq.com</li><li>SMTP 端口：465</li><li>SMTP 用户：你的 QQ 邮箱</li></ol><p>[note type&#x3D;”info flat”]变量名是 JavaScript 写法，大家记得去掉括号。[&#x2F;note]</p><ol start="4"><li>SMTP 密码：第三步获得的授权码</li><li>SMTP 加密模式：SSL 加密</li><li>接收邮箱：你的 QQ 邮箱</li><li>定时任务接口秘钥：第三步获得的授权码</li></ol><p>[note type&#x3D;”info flat”]此插件还有一种备份模式，是检测到新文章或者新评论就备份，那就将<strong>定时任务接口秘钥</strong>留空，打开<strong>监听文章接口</strong>这一开关。[&#x2F;note]</p><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>测试。浏览器访问定时任务接口地址：<code>http://&#123;&#123;你的IPV4&#125;&#125;/index.php/autobackup?taken=&#123;&#123;第三步获得的授权码&#125;&#125;</code>，如果有报错信息，则排查问题。无报错信息，网页一片空白，邮箱里应该就接收成功了。</p><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>将此网址设置一个定时访问的任务，宝塔面板有图形化设置，我没有安装，直接在 linux 操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs BASH">crontab -e<br><span class="hljs-comment"># 进入vim编辑模式，在最后加入新行</span><br><span class="hljs-comment"># 分钟 小时 日 月 周 命令</span><br>0 0 * * 3 curl -sSL http://&#123;&#123;你的IPV4&#125;&#125;/index.php/autobackup?taken=&#123;&#123;第三步获得的授权码&#125;&#125;<br></code></pre></td></tr></table></figure><p>应该就大功告成了。我这个任务是每周三晚上 0 点进行一次，访问这个链接触发备份。</p><h1 id="我碰到的问题"><a href="#我碰到的问题" class="headerlink" title="我碰到的问题"></a>我碰到的问题</h1><p>进行第五步测试的时候，报错了一些什么文件无法创建，无法读取等等一堆错误，找到原因是 web 服务的用户对这个文件夹没有读写权限，简单处理就是直接给他加权限。<br>　　 1. 查看 web 服务的用户名，我使用的是<code>Nginx</code>服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">ps aux | grep nginx<br></code></pre></td></tr></table></figure><p>得到除了<code>root</code>用户之外的 web 服务用户叫<code>nobody</code>。<br>　　 2. 升级权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R nobody:nobody /usr/local/lighthouse/softwares/typecho/usr/plugins/AutoBackup/<br></code></pre></td></tr></table></figure><ol start="3"><li>再次测试，成功。<img src="https://s2.loli.net/2024/02/06/z2gay5RpPCrWOEh.png"/></li></ol>]]></content>
    
    
    <categories>
      
      <category>geek</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typecho</tag>
      
      <tag>SMTP</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>长期更新——win10系统个人常用软件及其配置</title>
    <link href="/2024/02/06/%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0%E2%80%94%E2%80%94win10%E7%B3%BB%E7%BB%9F%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%8F%8A%E5%85%B6%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/02/06/%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0%E2%80%94%E2%80%94win10%E7%B3%BB%E7%BB%9F%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%8F%8A%E5%85%B6%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p>使用 win10 而非 win11，是因为突然很馋扁平化的风格，所以从 win11 刷回 win10 了。而且 win10 已经停止更新了，能接着用几年就用几年吧。<br>　　桌面基本不放图标，用了一个 dock 栏。后台常驻了一堆软件，都是开机自启的，就是刚开机需要等待一分钟让这些软件全部启动。</p><img src="https://s2.loli.net/2024/02/06/nCf9BXdeaqIhHzc.jpg"/><h1 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h1><h2 id="关闭-PowerShell-更新提示"><a href="#关闭-PowerShell-更新提示" class="headerlink" title="关闭 PowerShell 更新提示"></a>关闭 PowerShell 更新提示</h2><p>设置系统环境变量<code>POWERSHELL_UPDATECHECK</code>为<code>off</code>。</p><h1 id="软件列表"><a href="#软件列表" class="headerlink" title="软件列表"></a>软件列表</h1><h2 id="1-Todesk"><a href="#1-Todesk" class="headerlink" title="1.Todesk"></a>1.Todesk</h2><p>远程桌面软件，多端可同步，共享剪贴板，传输文件，免费版基本够用，但是阉割许多功能，价格贵。</p><h2 id="2-火绒"><a href="#2-火绒" class="headerlink" title="2.火绒"></a>2.火绒</h2><p>对 360 沾边的软件都不太有好感，所以火绒。</p><h2 id="3-Quicker"><a href="#3-Quicker" class="headerlink" title="3.Quicker"></a>3.Quicker</h2><p>是一个快捷指令平台，鼠标中键触发，有一个丰富的指令市场，可以下载好别人上传的指令，用法非常多种多样，不过目前我也只是用了几个其中最常用的，但还是给他常驻后台了。</p><img src="https://s2.loli.net/2024/02/06/m8vCwKF1TJBurf4.jpg" style="zoom:40%;"/><h2 id="4-Auto-Dark-Mode"><a href="#4-Auto-Dark-Mode" class="headerlink" title="4.Auto Dark Mode"></a>4.Auto Dark Mode</h2><p><a href="https://github.com/AutoDarkMode/Windows-Auto-Night-Mode">Github 地址</a></p><img src="https://s2.loli.net/2024/02/06/71AnoyTH6YWSBlC.jpg" style="zoom:40%;"/>　　这个软件的UI真好看，原生win10风格，很有质感。　　可以让windows系统按照时间自动切换深色模式，效果很好。如果将各个软件和Edge浏览器深色模式插件——Dark Reader，都设置为随系统深色模式，就可以做到整台电脑自动切换深色模式。<p>[note type&#x3D;”info flat”]不过我个人感觉用不用深色模式还是取决于使用电脑的环境的明暗程度，如果是晚上，但是开灯很亮的房间，也还是用浅色模式体验更佳。因此可以设置此软件全局切换的快捷键，一键手动切换。[&#x2F;note]</p><h2 id="5-Watt-Toolkit"><a href="#5-Watt-Toolkit" class="headerlink" title="5.Watt Toolkit"></a>5.Watt Toolkit</h2><p><a href="https://steampp.net/">官网地址</a><br>　　原名 Steam++。一款免费的 Steam 加速器，同时支持加速 Github，Onedrive，~~ pixiv ~~ 等，非常好用，不用梯子也可以愉快的玩耍了。</p><h2 id="6-Little-Big-Mouse"><a href="#6-Little-Big-Mouse" class="headerlink" title="6.Little Big Mouse"></a>6.Little Big Mouse</h2><p><a href="https://github.com/mgth/LittleBigMouse">Github 地址</a><br>　　这个软件是用来解决多显示器的问题的。它可以校准多个显示器的物理位置，让鼠标可以在交界处平滑的移动过来，只要校准一次，以后开机自启，就可以无感使用。但是有一点点小 bug，瑕不掩瑜。<br>　　我这些奇奇怪怪的屏幕布局完全少不了它。</p><img src="https://s2.loli.net/2024/02/06/Q2rK1gazUSi6YWM.png" style="zoom:60%;"/><img src="https://s2.loli.net/2024/02/06/OVMDh5v4JeiUcSx.jpg" style="zoom:50%;"/><h2 id="7-Logitech-G-Hub"><a href="#7-Logitech-G-Hub" class="headerlink" title="7.Logitech G Hub"></a>7.Logitech G Hub</h2><p>依托答辩。<br>　　但是我的 GPW 又只能用这个来驱动，只能忍着用了。<br>　　配置 GPW 的两个侧键为移动软件到下一个显示屏的 win 系统快捷键，一个顺时针( <code>win+shift+←</code> )，一个逆时针(<code>win+shift+→</code>)。这样子在我工位的三个屏幕之间移动软件，就纵享丝滑，非常的方便。<br>　　虽然罗技这个驱动软件做的垃圾，鼠标还是非常的好的，GPW1 代都用的很舒服，现在都出到 3 了。可是 1 又太好用了，罗技还可以两年内直接换新，你说这事儿整的，想换 3 又没理由。</p><h2 id="8-Logi-Options"><a href="#8-Logi-Options" class="headerlink" title="8.Logi Options+"></a>8.Logi Options+</h2><p>没有时间为 GHub 哀悼，接下来登场的是 Options+！<br><img src="https://s2.loli.net/2024/02/06/imSYx2HublnQspq.jpg"/><br><img src="https://s2.loli.net/2024/02/06/tpncsWY5T8gFbRy.jpg"/><br><img src="https://s2.loli.net/2024/02/06/Mvau1Twp4doqkK3.jpg"/><br>　　你就说这个有没有质感吧，看着就舒服，尊贵的 Logi MX Keys Mini 用户。<br>　　主要就是配置一下快捷键。界面动画很好看，大厂风范。这里就要再推一下罗技的产品了。<br>　　其实我之前一直种草了很久 MX Master 3s，但是一直蹲不到好价，每天评论区看到人家低价入手的嘴脸，就不想买了。但是又需要一个办公鼠标，GPW 用久了，手有点疼。后来就发现了这款 M720，便宜很多，有无极滚轮（看芯片手册这种超长 PDF 直接起飞），蓝牙连接切换方便（GPW 必须用接收器，导致我的 macbook 和 ipad 不方便用），而且是人体工学的趴握形状，还是用的电池，一节小电池能用半年以上不充电，总之就是非常喜欢，没有任何不喜欢的点。<br>　　键盘，MX Keys Mini，写本科毕业论文入手的。当时虽然不是史低，但也算个好价吧，就冲了。其实我手里已经有一个机械键盘，柯芝 K75，但是，这款薄膜键盘网上评价实在太好了，怀着好奇的心，就冲了，到手一体验，果然没买错。质感的外观，超轻的质量，超小的体积，背出去连上 ipad 就可以在各种地方码字，它陪着我写完了毕业论文，以及现在读研的大量输入任务。按照范总的话来说，李李和汪小姐固然很好，但是心中永远的玫瑰，还是杭州老家的，罗技 MX Keys Mini。</p><h2 id="9-Lenovo-Legion-Toolkit"><a href="#9-Lenovo-Legion-Toolkit" class="headerlink" title="9.Lenovo Legion Toolkit"></a>9.Lenovo Legion Toolkit</h2><p>这个是一个第三方拯救者控制中心，用来代替 Legion Zone，轻量级，颜值高，好用，没什么好说的，拯救者必备。</p><h2 id="10-Twinkle-Tray"><a href="#10-Twinkle-Tray" class="headerlink" title="10.Twinkle Tray"></a>10.Twinkle Tray</h2><p><a href="https://twinkletray.com/">官网地址</a><br>　　这是一个亮度调节工具，最核心的功能是它可以调节各个外接显示屏的亮度，就不需要去按显示屏上生涩的物理按键了，既可以调节单个屏幕也可以同步调节，外接显示屏必备软件。</p><h2 id="11-Onedrive"><a href="#11-Onedrive" class="headerlink" title="11.Onedrive"></a>11.Onedrive</h2><p>当初拼了一个家庭版 MicroSoft 365，三年 100 元，送了 1T 的 Onedrive，现在我主要用它来实现多端同步，基本是 win 端和 macos 端都同步的很快，可能是 Watt Toolkit 的缘故，但是手机端访问就很有问题，全靠运气，全局开魔法也不行，就很离谱。<br>　　还是那四个字，瑕不掩瑜，这个价钱，这个同步体验，已经很好了。真正重要的资料还是多处备份吧。</p><h2 id="12-TranslucentTB"><a href="#12-TranslucentTB" class="headerlink" title="12.TranslucentTB"></a>12.TranslucentTB</h2><p>一个任务栏透明的美化小软件，微软商店即可下载汉化版，注意不要下载成盗版。我用很多年了，一般是选亚克力效果，既好看又不影响阅读文字。</p><h2 id="13-Parsec"><a href="#13-Parsec" class="headerlink" title="13.Parsec"></a>13.Parsec</h2><p><a href="https://parsec.app/">官网地址</a><br>　　这是一个很强大的串流软件，他和 todesk 相比，少了类似于隐私屏，共享剪贴板等实用功能，但是更专注于游戏串流，并非走中转服务器，而是他帮你建立一个 P2P 连接，不限制画质帧率，延迟极低，远程体验更好。建议和 todesk 搭配使用，各取所长。</p><h2 id="14-Wifilian"><a href="#14-Wifilian" class="headerlink" title="14.Wifilian"></a>14.Wifilian</h2><p>是一个自动检测 wifi 信号强度然后切换的小工具。为什么会用他？是当时疫情时期，在亲戚家参加线上考试，他们家 wifi 时好时坏的。然后我就开了个手机热点，用这个软件，设置优先级，和检测时间间隔，他就可以实现优先使用 wifi，当 wifi 信号不好的时候自动切换到热点。当 wifi 好的时候，他又能自己切回去，减少手机流量的消耗，当时也真是帮了我很多。日常网络稳定的环境，也没啥用。</p><h2 id="15-Snipaste"><a href="#15-Snipaste" class="headerlink" title="15.Snipaste"></a>15.Snipaste</h2><p><a href="https://zh.snipaste.com/">官网地址</a><br>　　截图软件天花板，像素放大镜，取色器，图钉，内置简单的图片编辑器，不必多说，安装就完事了。</p><h2 id="16-PSTools"><a href="#16-PSTools" class="headerlink" title="16.PSTools"></a>16.PSTools</h2><p><a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/pstools">官网地址</a><br>　　 windows 可执行程序合集，加入系统环境变量之后即可命令行调用。</p><h2 id="17-geek"><a href="#17-geek" class="headerlink" title="17.geek"></a>17.geek</h2><p><a href="https://geekuninstaller.com/">官网地址</a><br>　　好用的绿色软件卸载工具。</p><h2 id="18-PotPlayer"><a href="#18-PotPlayer" class="headerlink" title="18.PotPlayer"></a>18.PotPlayer</h2><p><a href="https://potplayer.daum.net/">官网地址</a><br>　　 win 端最好用的播放器，功能齐全，也有很多主题可供选择。</p><h2 id="19-noMeiryoUI"><a href="#19-noMeiryoUI" class="headerlink" title="19.noMeiryoUI"></a>19.noMeiryoUI</h2><p><a href="https://github.com/Tatsu-syo/noMeiryoUI">Github 地址</a><br>　　用来更换 win 系统字体，win 的原生字体在 4K 屏幕上渲染效果不佳，用 macos 字体苹方就很好 hhh。但是我之前碰到一个 bug，STM32CUBEIDE 打开会乱码，网上也没有解决办法，不知道是不是因为我用这个换过字体导致的。</p><h2 id="20-滴答清单"><a href="#20-滴答清单" class="headerlink" title="20.滴答清单"></a>20.滴答清单</h2><p>付费软件，一年一百多。<br>　　相比于 Microsoft todo 等其他 todo list 软件的优势：</p><ul><li>界面更加美观</li><li>团队更新非常勤快，UI 美化，功能增加，bug 反馈，体验很好。</li><li>可智能识别日期</li></ul><p>[note type&#x3D;”primary flat”]eg. 在创建任务时，直接输入”三天后开会”，”三天后”会被自动识别为时间。[&#x2F;note]</p><ul><li>也有笔记功能，支持 markdown 语法。</li></ul><p>总的来说我认为<strong>非常值得</strong>，可以作为第二大脑，专注于任务本身。</p><h2 id="21-Listary"><a href="#21-Listary" class="headerlink" title="21.Listary"></a>21.Listary</h2><p>用的是 6 的 pro 破解版，比 5 主要多了深色模式。<br>　　目前<strong>最最好用</strong>的 win 端快捷启动器软件，具体使用教程可结合网上的博客和视频。<br>　　解放了电脑桌面，可以不放应用图标。并且查找速度非常快，还支持快捷打开网站和快捷控制系统命令，必装软件。<br>　　详细的配置专门写一篇。</p><h2 id="22-Nexus"><a href="#22-Nexus" class="headerlink" title="22.Nexus"></a>22.Nexus</h2><p><a href="https://www.winstep.net/nexus.asp">官网地址</a><br>　　一款 Dock 栏软件，可以放一些最常用的快捷方式，自己更换图标。它的动画效果还挺好看的，运行也比较稳定。<br>　　 Steam 上有一款付费同类软件，MyDockFinder，完全对标 macos 的 Dock 栏效果，还支持台前调度的样式，但是很卡，bug 很多，我买了之后火速退款了。</p><h2 id="23-WGestures"><a href="#23-WGestures" class="headerlink" title="23.WGestures"></a>23.WGestures</h2><p><a href="https://www.yingdev.com/projects/wgestures2">官网地址</a><br>　　是个独立开发者做的软件，真厉害。<br>　　 WG1 是免费的，win 平台独占。WG2 收费，多平台可用，教育邮箱优惠价。我之前用 WG1 用了很久，体验很好，后来我有了一台 macbook pro，mac 平台没有好用的鼠标手势我完全不习惯。最后就是购入了 2。<br>　　这是一个鼠标手势软件。我常用指令如下。按住鼠标右键上拉就是复制，按住鼠标右键下拉就是粘贴，这对于咱们(Ctrl)CV 软件工程师非常有帮助，可以一个手吃东西一个手 CV 代码。</p><blockquote><p>不过根据我的体验下来，大量复制粘贴的时候，即便是用这个也会累，但至少可以左右手休息一下，键盘 CV 和鼠标手势交替使用，体验更佳。</p></blockquote><p>可以注意到，它除了全局手势，可以对某些特定软件进行配置，你可以给一些 IDE 软件设置专用手势，加速你的专业干活速度；而对于福昕 PDF，Altium Designer 等原生需要鼠标右键的软件，则需要禁用鼠标手势，或者你也可以绑定到鼠标中键，侧键，甚至是设置为功能键加鼠标右键触发，还有屏幕边缘角的功能。<br>　　<strong>总之，效率工具是为人服务的，掌握常用指令实际运用到自己的 workflow 比设置一大堆不记得用，更重要。</strong></p><img src="https://s2.loli.net/2024/02/06/we3VIOvuby8jntD.jpg" style="zoom:30%;"/><h2 id="24-Altsnap"><a href="#24-Altsnap" class="headerlink" title="24.Altsnap"></a>24.Altsnap</h2><p><a href="https://github.com/RamonUnch/AltSnap/releases">Github 地址</a><br>　　在 win 端实现 Alt 键加鼠标左键拖拽窗口，Alt 键加鼠标右键更改窗口大小。<br>　　好用是好用，就是里面对某些应用禁用完全是摆设。在使用 AD 的时候，我需要使用 alt 加鼠标左键高亮某个网络，这个时候就会触发这个软件，怎么都禁用不掉，只能手动关闭了。<br>　　总体来说，还是给他开机自启了。希望他速速更新，不要辜负我对它的厚望。</p><h2 id="25-One-Commander"><a href="#25-One-Commander" class="headerlink" title="25.One Commander"></a>25.One Commander</h2><p><a href="https://one-commander.com/">官网地址</a><br><img src="https://s2.loli.net/2024/02/06/bLEQfnrMj28wHT5.jpg"/></p><p>这个软件也是一个<strong>非常非常非常推荐的好软件</strong>。当我从 win11 刷回 win10 的时候，最痛苦的一点就是，文件管理器的标签页没了，这就很不方便了。当时找了一些解决方案，都效果不佳。而这个，是我用的体验最好的。</p><ul><li>颜值很高，默认的明暗两套主题就很好看，Github 还有第三方主题可以下载。</li><li>可以注册进系统从而替代原生文件管理器。都用第三方了，当然是希望完全替代掉，不要点击某个文件，还是用系统原生的打开，那多么不方便。</li><li>分栏多标签页，开再多标签页也能很方便的切换，和移动复制文件。</li><li>自带一个相当于 quicklook 的空格键预览功能，很轻量级，启动飞快，可以看图也可以记事本格式打开各种文本文件。</li><li>个人版体验就已经 very good，白嫖，还要啥自行车。</li></ul><p>而且使用它的过程还发生了一个小插曲，软件某个界面和多显示器，不太兼容，移动到屏幕之间的时候就会卡死闪退，然后我就用机翻发了一封英语邮件反馈了一下 bug，结果对方居然真的很迅速的回复我了。第一次回复说他无法复现 bug，只是教我如何暂时关闭该功能。第二次回复给了我一个测试链接，让我测试一下是否修复。可惜我很久之后才看到，我给他说抱歉，测试链接已经过期了，大哥说没事儿，已经上线正式版了，让我更新一下就行。很好米洛斯岛邮件，让我心情愉悦，爱来自瓷器。<br>　　企业版对我而言实在用不着，我也只能多多推荐宣传，支持一下这个软件了。</p><img src="https://s2.loli.net/2024/02/06/YsofMk5LFXZtQTl.png"/><h2 id="26-Typora"><a href="#26-Typora" class="headerlink" title="26.Typora"></a>26.Typora</h2><p><a href="https://typoraio.cn/">官网地址</a><br>　　颜值太高了，没办法，买断了，本地写 markdown 笔记基本用它。虽说 vscode 有 markdown 插件，但是还是有一些效果不佳的地方。</p><h2 id="27-知云文献"><a href="#27-知云文献" class="headerlink" title="27.知云文献"></a>27.知云文献</h2><p>划词翻译还是挺好用的。</p><h2 id="28-Bandizip"><a href="#28-Bandizip" class="headerlink" title="28.Bandizip"></a>28.Bandizip</h2><p><a href="https://www.bandisoft.com/bandizip/">官网地址</a><br>　　感觉它比 7zip 好看，所以选它。</p><h2 id="29-Calibre2"><a href="#29-Calibre2" class="headerlink" title="29.Calibre2"></a>29.Calibre2</h2><p><a href="https://calibre-ebook.com/zh_CN/download">官网地址</a><br>　　一个电子书管理软件，还可以进行格式转换，当时用来给 kindle 导入电子书用的。</p><h2 id="30-Saturn-PCB-Toolkit"><a href="#30-Saturn-PCB-Toolkit" class="headerlink" title="30.Saturn PCB Toolkit"></a>30.Saturn PCB Toolkit</h2><p><a href="https://saturnpcb.com/saturn-pcb-toolkit/">官网地址</a><br>　　一个 PCB 工具箱，功能很强，但是我还不太会用。</p><h2 id="31-SourceTree"><a href="#31-SourceTree" class="headerlink" title="31.SourceTree"></a>31.SourceTree</h2><p><a href="https://www.sourcetreeapp.com/">官网地址</a><br>　　一个图形化的 git 工具，颜值高，好用。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>以上这些都是我日常使用觉得很好的软件，自己记录之余，推荐给大家。</p><blockquote><p>君子性非异也，善假于物也。</p></blockquote><p>希望大家都能用上趁手的软件，提高效率。</p>]]></content>
    
    
    <categories>
      
      <category>geek</category>
      
    </categories>
    
    
    <tags>
      
      <tag>win</tag>
      
      <tag>效率</tag>
      
      <tag>软件推荐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>南京游记——和高中好友们的六人行</title>
    <link href="/2024/02/05/%E5%8D%97%E4%BA%AC%E6%B8%B8%E8%AE%B0%E2%80%94%E2%80%94%E5%92%8C%E9%AB%98%E4%B8%AD%E5%A5%BD%E5%8F%8B%E4%BB%AC%E7%9A%84%E5%85%AD%E4%BA%BA%E8%A1%8C/"/>
    <url>/2024/02/05/%E5%8D%97%E4%BA%AC%E6%B8%B8%E8%AE%B0%E2%80%94%E2%80%94%E5%92%8C%E9%AB%98%E4%B8%AD%E5%A5%BD%E5%8F%8B%E4%BB%AC%E7%9A%84%E5%85%AD%E4%BA%BA%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<p>上一次和这群朋友们一起出去玩，还是 2020 年夏天，当时疫情比较缓和，去了重庆。之后便是考研的考研，考公的考公，二战的二战，加上疫情的限制，最后就是一直没有机会再一起出去玩，见面最多就是网吧五连坐。</p><p>这次终于来到了南京，因为其中一个好朋友在南京上大学还没放假，正好来找他。趁着年前就出发，火速下单了一个豪华电竞五人间，环境比以前住的好多了。当时在重庆住的电竞酒店，还是很窄的爬梯子的上下铺，这次也是上下铺，但是很宽敞，而且是阶梯式的，上床非常的舒适。</p><p>[note type&#x3D;”danger flat”]这里就要点名大运村了，那个上床下桌，那个铁梯，扶手也少，上下一次真是酷刑。[&#x2F;note]</p><p>到南京第一天就把烤鸭火速整了一份，是叫章云板鸭（新街口总店）。</p><img src="https://s2.loli.net/2024/02/04/CWmlLNryoB4t1xs.jpg" alt="微信图片_20240204103946" style="zoom:15%;" /><p>卤汁一浇，味道很足。但是一个人吃这半只有点腻，最后基本一个人吃完了，往后两三天不想吃鸭子。</p><p>爱吃冰淇淋的 ZHX，每天都积极地带我们买冰淇淋，正好看到肯德基新品，味道也不错，还送了这个闪闪的红包。</p><img src="https://s2.loli.net/2024/02/04/pvM8IycPkFj1w4J.jpg" alt="微信图片_20240204105202" style="zoom:15%;" /><p>最近临近春节，感觉旅游的人也不少。夫子庙这个好看的灯下面，走都走不动。</p><img src="https://s2.loli.net/2024/02/04/IdwpYsqPLAQCmaf.png" style="zoom:50%;"/><p>然后是一些吃吃吃，这次吃的店铺都不错，没有踩雷。名称如下：</p><img src="https://s2.loli.net/2024/02/04/szNG9noHchmlXZg.png" style="zoom:40%;"/><p>出来旅游想找个特色菜吃，找到了这家江南灶，确实挺好吃，下面是桂花香酥烤鸭，蟹粉豆腐和妈妈红烧肉。有一道最贵的笋壳鱼，味道反而不咋地，不如吃席的松鼠鳜鱼。</p><img src="https://s2.loli.net/2024/02/05/17vc85SMCVzZNnB.png" style="zoom:30%;"/><img src="https://s2.loli.net/2024/02/05/U8qEe2WtITXwAua.png" style="zoom:40%;"/><img src="https://s2.loli.net/2024/02/05/qa6SW8mcV9RHCoz.png" style="zoom:40%;"/><p>这个冰淇淋店在德基的楼上，主打的是抹茶。我只能吃很淡的抹茶，苦的不爱吃，真的会 yue 出来那种。这家抹茶有 5 个浓度等级，这个是第 3 级，对我来说依旧是有点苦。另外两个味道是生巧和开心果。生巧也苦，好在开心果相当的甜，中和着也算是吃完了。真是神奇，连开心果都可以做冰淇淋。</p><img src="https://s2.loli.net/2024/02/04/eLVpwQmaATyXoCB.png" style="zoom:50%;"/><p>总体来说，主要是吃了这些好吃的，然后就是电竞五黑，真的很爽，虽然有的游戏我不怎么玩平时，但是大家一起玩热闹一下还是很宝贵的时光。中途实在无聊的时候也远程了一下家里的电脑敲了一下代码。景点也逛了一些，就随缘啦。</p><p>最后回家的时候发生了一个小插曲，只有我一个人如期赶上了返程的高铁，好朋友们只能在南京多呆了一天，随后回到武汉又面临了冻雨降温，天气非常恶劣，高铁都有停运的可能。好在写这篇 Blog 的时候，我已经润到广东省亲戚家了，这边 10℃ 左右，比较暖和。武汉这种恶劣天气，我长这么大也是第一次见，到处结冰，各种树都倒下，也算是挺新奇的，观赏是挺有趣，出门就很不方便了，还好我爸提醒我将第二天上午的高铁改签到当天下午，趁着下午路上雪处理的差不多了，才可以出发。下面是一些图片，拿的大摄影师脏总 pyq 的图。</p><img src="https://s2.loli.net/2024/02/05/i45FbDzwck3Os8v.png" style="zoom:40%;"/><img src="https://s2.loli.net/2024/02/05/vUr4scaDNiFG5VX.png" style="zoom:40%;"/><p>一晃自己已经 24 岁了，马上就 25，过了 25 就奔三，现在研一还是一个罕见的没什么太大压力的阶段，可以寒暑假与好友玩耍，学习折腾一些仅凭兴趣而非功利的知识，不知道明年会如何，后年会如何，30 岁的时候又会如何。期待今年暑假，再与好友旅游一次。现在每个人都旅游足迹都不一样，想去的地方可能朋友已经去过了，还真是难找个合适的地儿。</p><p>本次南京之行耗时五天，总共开销大概 1500 多一点，还是非常划算的，我大一的时候也去过一次，这两次去，感兴趣的景点也差不多了，应该不会再去了，拜拜了南京。</p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
